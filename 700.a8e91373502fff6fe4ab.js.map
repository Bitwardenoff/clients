{"version":3,"file":"700.a8e91373502fff6fe4ab.js","mappings":"ogBAcO,MAAM,EAMXA,YACUC,EACEC,EACAC,EACFC,EACAC,EACAC,GALA,KAAAL,SAAAA,EACE,KAAAC,OAAAA,EACA,KAAAC,wBAAAA,EACF,KAAAC,YAAAA,EACA,KAAAC,qBAAAA,EACA,KAAAC,YAAAA,EAXV,KAAAC,mBAAqBC,KAAKN,OAAOO,KAAKF,mBACtC,KAAAG,kBAAoBF,KAAKN,OAAOO,KAAKC,kBACrC,KAAAC,WAAaH,KAAKN,OAAOO,KAAKE,WAC9B,KAAAC,OAAS,IAAI,IASV,CAEGC,S,yCACJ,UAEQL,KAAKL,wBAAwBW,WAAWN,KAAKI,OAAOG,M,CAC1D,MAAOC,GAMP,YALAR,KAAKH,qBAAqBY,UACxB,QACAT,KAAKF,YAAYY,EAAE,SACnBV,KAAKF,YAAYY,EAAE,yB,CAKvBV,KAAKP,SAASkB,OAAM,EACtB,G,mCA7BW,GAA+B,qE,mBAA/B,I,gDCPN,MAAMC,UAAwC,G,8DAAxCA,KAA+B,GAA/BA,EAA+B,E,sBAA/BA,EAA+B,2wBCN5C,cACA,+BACE,iCACE,sCAAkC,oCAAY,EAAAP,QAAQ,IACpD,oCACE,U,uCACF,QACA,uCACE,U,iBACF,QACA,uCACE,2DACA,+BACF,6BACA,uCAGE,4CACE,0CAAM,U,iBAA8B,QACtC,+BACA,6CACE,U,iBACF,QACF,6BACF,2BACF,yBACF,uBACA,gB,MAtBQ,8EAGA,yEAGwC,uCAOhC,iDAGN,kE,+NCLH,MAAMQ,G,iCAAAA,EAAgB,E,mBAAhBA,I,uBAJD,KAAc,IAAc,IAAkB,KAAe,Q,cCAlE,MAAMC,G,iCAAAA,EAAY,E,mBAAZA,I,uBAHD,IAAcD,K,yBCEnB,MAAME,G,iCAAAA,EAAa,E,mBAAbA,I,uBAJD,KAAc,O,0BCsCnB,MAAMC,G,iCAAAA,EAA0B,E,mBAA1BA,I,uBA7BT,IACA,IACA,IACA,KACAD,EAGA,IACAA,K,qCCnBG,MAAME,EACXC,WACEC,SAASC,KAAKC,UAAUC,OAAO,kBACjC,E,iCAHWL,EAAe,E,mBAAfA,EAAe,wSCN5B,iBACE,iCAGE,6CACF,wBACA,kCACE,2CACF,yBACF,uBACA,e,kECRO,MAAMM,E,SAAqB,EAAO;;iBCIlC,MAAeC,EADtB,cAyBW,KAAAC,QAA8B,UAK9B,KAAAC,UAAY,EAKZ,KAAAC,kBAAmB,EAKlB,KAAAC,mBAA+C,IAAI,K,mCAvCzCJ,EAAgB,E,mBAAhBA,EAAgB,qM,2FCelC,kBAME,yCAOF,2B,qBAXE,+CAOE,gD,uBAMJ,Q,0BAIE,iCACC,mBAAyE,SAAU,QACtF,mB,qBAFK,6DACI,+EAAmE,sB,uBAiBxE,Q,yCAZF,oBACA,oBACA,oCAOE,oEAAkB,QAAAK,UAAA,GAAiB,GAAnC,CAAoC,oDAC3B,QAAAD,mBAAA,OAAyB,IAElC,uDACF,4BACF,iB,qCAVI,qCAAoB,uCAApB,CAAoB,gCACpB,wCAOe,oC,uBAYf,Q,yCANF,oBACA,yCAGE,0DAAS,QAAAA,mBAAA,OAAyB,IAElC,uDACF,4BACF,iB,mCAFmB,oC,sJC5DhB,MAAME,UAAyBN,EAJtC,c,oBAQU,KAAAO,SAAU,EAOR,KAAAC,WAAmC,CAC3CC,MAAO,SACPC,YAAa,QACbC,SAAU,UACVC,aAAc,WAiBN,KAAAC,oBAAsB,IAAIC,EAAA,GAAgB,GAC1C,KAAAC,WAAavC,KAAKqC,oBAAoBG,MAC9C,EAAAC,EAAA,IAAKlC,GAAWA,EAAQ,+DAAiE,K,CA7BjFsB,UAAUa,GAClB1C,KAAK+B,QAAUW,CACjB,CACcC,uBACZ,OAAO3C,KAAK+B,UAAY/B,KAAK2B,gBAC/B,CAWaiB,eAAWC,GACtB7C,KAAKgC,WAAWC,MAAQY,EAAM,QAAU,QAC1C,CAcAC,UAAUC,GACR/C,KAAKqC,oBAAoBW,KAAKD,EAAOE,QAAQ,sBAC/C,CAEAC,aACElD,KAAKqC,oBAAoBW,MAAK,EAChC,E,8DA3CWlB,KAAgB,GAAhBA,EAAgB,E,sBAAhBA,EAAgB,6D,oCAAhB,qBAAwB,G,CAAA,8BAAxB,cAAY,G,46CDVzB,iB,iBAOE,iCAOE,qCAIE,6BACF,0BACA,mBACA,2CAeA,sDAEA,qBACA,8DAKA,qBACA,8DAiBA,qBACA,8DAWA,uCAGE,iCACF,2BACF,yBACF,uBACA,gB,8CA/EE,uHAME,uFAEE,8DAYC,+CAcY,+BAAa,aAAb,CAAa,a,qKEvB5B,sCAOE,2DAAS,QAAAqB,OAAA,GAAc,I,gCAOxB,QACH,e,yBAZI,4GAEC,oBAFD,CAEC,qCAMD,yCAAsC,4BAAtC,CAAsC,sE,uBAQxC,Q,0BADF,WACE,kDACF,yB,8BADiB,oC,uBAGf,Q,0BADF,WACE,kDACF,yB,8BADiB,oC,2BAKnB,iB,gBAME,yBACF,uB,qBALE,wBAAqB,8D,ECxBhB,MAAMC,UAA0B5B,EAJvC,c,oBAkBY,KAAA6B,UAAYC,KAAKC,SAASC,SAAS,IAAIC,UAAU,GAM3D,KAAAC,MAAO,EAQP,KAAAC,WAAa,IAAI,K,CAEPR,OAAOS,GACfA,SAAAA,EAAOC,kBACP7D,KAAK0D,MAAQ1D,KAAK0D,KAClB1D,KAAK2D,WAAWG,KAAK9D,KAAK0D,KAC5B,CAKQK,mBACe,SAAjB/D,KAAKyB,SAGT,IAAIzB,KAAKgE,gBAAiBhE,KAAKiE,aAAaC,SAASC,IACnDA,EAAezC,WAAa,CAAC,GAEjC,CAEA0C,qBACEpE,KAAK+D,kBACP,E,8DAlDWX,KAAiB,GAAjBA,EAAiB,E,sBAAjBA,EAAiB,6D,GAAA,M,QACMA,EAAiB,G,QAKlCtB,EAAkB,I,woBDvBrC,wCAKE,8CAAsB,EAAAqB,QAAQ,GAA9B,CAA+B,wCAET,EAAAvB,mBAAA,MAAyB,IAI/C,2DAkBA,kBACA,gDAGA,gDAGF,uBAEA,iBACA,uCAQA,gB,MA9CE,8BAAa,cAAb,CAAa,gBAAb,CAAa,oBAAb,CAAa,wBAAb,CAAa,wBAAb,CAAa,2BA6Ba,0CAGF,0CAOvB,8B,sEEnCI,MAAMyC,G,iCAAAA,EAAmB,E,mBAAnBA,EAAmB,qICNhC,iBACA,c,iJCSI,0BAKE,wEAAsB,QAAAlB,SAAQ,I,gBAGhC,yB,6BANE,qBAAiB,mEAAjB,CAAiB,yBAAjB,CAAiB,sB,4BAHrB,SACE,oDASF,yB,oBARoB,2B,yBASpB,0B,sBAGE,0C,0CAvBJ,2BAME,mF,gBAGA,iD,iBAWA,iDAMA,2CACF,qB,kCAzBE,qBAAgC,oEAAhC,CAAgC,0BAAhC,CAAgC,cAAhC,CAAgC,iBAOjB,mDAYZ,uC,ECVE,MAAMmB,GAkCX9E,YAAoB+E,EAA+BC,GAA/B,KAAAD,MAAAA,EAA+B,KAAAC,oBAAAA,EAjCzC,KAAAC,eACRzE,KAAKwE,oBAAoBC,eAAejC,MACtC,EAAAC,EAAA,IAAKiC,GAASA,EAAKC,OAAO3E,KAAK2E,QAAQC,MAAK,CAACC,EAAGC,IAAMD,EAAEE,KAAKC,cAAcF,EAAEC,WAEvE,KAAAE,qBAAgD,EAAAC,EAAA,GAAc,CACtElF,KAAKuE,MAAMY,SACXnF,KAAKyE,iBACJjC,MAAK,EAAAC,EAAA,IAAI,EAAE2C,EAAQV,KAAUA,EAAKW,MAAMC,GAAQA,EAAIC,KAAOH,EAAOI,IAAI,uBASzE,KAAAb,OAAyC,KAAM,EAM/C,KAAAjB,MAAO,EAEP,KAAAC,WAAa,IAAI,MAOjB,KAAA8B,eAAgB,CAE8E,CAEpFtC,OAAOS,GACfA,SAAAA,EAAOC,kBACP7D,KAAK0D,MAAQ1D,KAAK0D,KAClB1D,KAAK2D,WAAWG,KAAK9D,KAAK0D,KAC5B,E,uBCvCF,0B,sBAEE,gC,wBAIF,2B,gBACE,2C,gBACA,2C,gBACF,uB,MAH8B,oCACd,+CACA,+C,mCDTHY,IAAoB,0B,oBAApBA,GAAoB,0pBDXjC,oC,iBA4BA,e,KA3BG,8C,6DGYI,MAAMoB,GAOXlG,YAAoB+E,EAA+BC,GAA/B,KAAAD,MAAAA,EAA+B,KAAAC,oBAAAA,EANhC,KAAAmB,KAAOpE,EAChB,KAAAqE,UAAaN,GAAsBA,EAAIO,wBACvC,KAAAC,SAAW9F,KAAKuE,MAAMa,OAAO5C,MACrC,EAAAC,EAAA,IAAK2C,IAAU,MAAC,OAAmD,QAAnD,EAAApF,KAAKwE,oBAAoBgB,IAAIJ,EAAOW,uBAAe,eAAEC,OAAO,IAGgB,E,kCAPnFN,IAAmB,0B,oBAAnBA,GAAmB,8jBDbhC,eACE,sCACF,sBAEA,0CACA,wC,gBACA,yC,iBACA,0C,iBAKA,iD,kBAMA,kD,kBAIA,gB,MArBY,8BAGE,qCAAoB,oBACE,6CACP,8CAG3B,sDAOC,+CAEuD,+C,kEERnD,MAAMO,I,kCAAAA,GAAc,E,oBAAdA,K,wBAJD,QCOL,MAAMC,I,kCAAAA,GAAgB,E,oBAAhBA,K,wBAJD,IAAcD,M,iNCUlB,iBACE,wCAAY,SAAiB,QAC7B,wCAAY,SAAyB,QACvC,+B,yBAFc,uBACA,8B,4BAFd,6CAIF,qB,qBAJgC,wC,ECR/B,MAAME,IAUN,MAAMC,GACX5G,YAAmB6G,EAAkDpG,GAAlD,KAAAoG,UAAAA,EAAkD,KAAApG,KAAAA,CAA0B,CAE/FiB,W,MAEE,KACGlB,KAAKC,KAAKqG,OACVtG,KAAKC,KAAKsG,UACVvG,KAAKC,KAAKuG,aACVxG,KAAKC,KAAKwG,UACQ,QAAjB,EAAAzG,KAAKC,KAAKyG,eAAO,eAAEC,SAAU,GAG/B,MADA3G,KAAKqG,UAAU1F,QACT,IAAIiG,MACR,+EAGN,E,kCAjBWR,IAAyB,mBACa,OAAW,E,oBADjDA,GAAyB,yaDrBtC,wBACE,2BACE,kCAAM,S,gBAAuB,QAC7B,oCACE,S,iBAEF,QACF,yBAEA,qCACE,U,iBACA,sBACE,iCACE,sCACE,0CAAY,U,iBAA6B,QACzC,0CAAY,U,iBAAoB,QAClC,+BACF,6BACA,sDAMF,2BACF,yBAEA,qCACE,wCACE,U,iBACF,QACF,yBACF,uBACA,gB,MA/BU,wCAEJ,iGAMF,8DAIkB,gDACA,qCAchB,0D,4GE7BC,MAAMS,ICAN,MAAMC,ICEN,MAAMC,I,gBCAN,MAAMC,WAAgC,KAO3CxH,YAAYyH,GACVC,MAAMD,GACNjH,KAAKuF,GAAKvF,KAAKmH,oBAAoB,MACnCnH,KAAK+F,eAAiB/F,KAAKmH,oBAAoB,kBAC/CnH,KAAK+E,KAAO/E,KAAKmH,oBAAoB,QACrCnH,KAAKoH,aAAepH,KAAKmH,oBAAoB,gBAC7CnH,KAAKqH,aAAerH,KAAKmH,oBAAoB,eAC/C,ECdK,MAAMG,WAAwB,KAOnC9H,YAAYyH,GACVC,MAAMD,GACNjH,KAAKuF,GAAKvF,KAAKmH,oBAAoB,MACnCnH,KAAK+F,eAAiB/F,KAAKmH,oBAAoB,kBAC/CnH,KAAK+E,KAAO/E,KAAKmH,oBAAoB,QACrCnH,KAAKoH,aAAepH,KAAKmH,oBAAoB,gBAC7CnH,KAAKqH,aAAerH,KAAKmH,oBAAoB,eAC/C,EAGK,MAAMI,WAAyCD,GAIpD9H,YAAYyH,GACVC,MAAMD,GACNjH,KAAKwH,KAAOxH,KAAKmH,oBAAoB,QACrCnH,KAAKyH,MAAQzH,KAAKmH,oBAAoB,QACxC,E,+UCHK,MAAMO,GAIXlI,YACUmI,EACAC,EACAC,GAFA,KAAAF,cAAAA,EACA,KAAAC,WAAAA,EACA,KAAAC,eAAAA,EANA,KAAAC,SAAW,IAAIC,GAAA,EACzB,KAAAC,SAAWhI,KAAK8H,SAASG,cAMtB,CAEGC,eAAeC,G,0CACnB,MAAMC,QAAUpI,KAAK4H,WAAWS,KAAK,MAAO,aAAeF,EAAW,MAAM,GAAM,GAC5EG,EAAkB,IAAIf,GAAiCa,GAC7D,aAAapI,KAAKuI,mCAAmCD,EACvD,G,CAEME,YAAYzC,G,0CAChB,MAAMqC,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,kBAAoBtC,EAAiB,YACrC,MACA,GACA,GAEI0C,EAAU,IAAI,GAAAC,EAAaN,EAAGpB,IACpC,aAAahH,KAAK2I,uBAAuB5C,EAAgB0C,EAAQxI,KACnE,G,CAEM2I,OAAO7C,EAAwB8C,G,0CACnC,MAAMC,QAAgB9I,KAAK+I,kBAAkBhD,EAAgB8C,GACvDT,QAAUpI,KAAK4H,WAAWS,KAC9B,OACA,kBAAoBtC,EAAiB,YACrC+C,GACA,GACA,GAGIE,QAAgBhJ,KAAKiJ,kBAAkB,IAAI3B,GAAgBc,IAEjE,OADApI,KAAK8H,SAAS9E,KAAKgG,GACZA,CACT,G,CAEME,OAAOnD,EAAwB8C,G,0CACnC,MAAMC,QAAgB9I,KAAK+I,kBAAkBhD,EAAgB8C,GACvDT,QAAUpI,KAAK4H,WAAWS,KAAK,MAAO,aAAeQ,EAAYtD,GAAIuD,GAAS,GAAM,GAC1F9I,KAAK8H,SAAS9E,WAAWhD,KAAKiJ,kBAAkB,IAAI3B,GAAgBc,IACtE,G,CAEMe,OAAOC,G,0CACX,MAAMC,EAAaD,EAAS3G,KAAKuG,GAAYA,EAAQzD,KAC/C6C,QAAUpI,KAAK4H,WAAWS,KAAK,OAAQ,mBAAoBgB,GAAY,GAAM,GAEnF,OADArJ,KAAK8H,SAAS9E,KAAK,MACZoF,EAAEnI,KAAKwC,KAAK6G,IACjB,MAAMC,EAAsB,IAAIpD,GAIhC,OAHAoD,EAAoBhE,GAAK+D,EAAQ/D,GACjCgE,EAAoBxE,KAAOqE,EAAS/D,MAAM2D,GAAYA,EAAQzD,IAAM+D,EAAQ/D,KAAIR,KAChFwE,EAAoBC,aAAeF,EAAQG,MACpCF,CAAmB,GAE9B,G,CAEcG,mBAAmB3D,G,0CAC/B,aAAa/F,KAAK2H,cAAcgC,UAAU5D,EAC5C,G,CAEcgD,kBACZhD,EACA8C,G,0CAEA,MAAMe,QAAe5J,KAAK0J,mBAAmB3D,GACvC+C,EAAU,IAAI/B,GAGpB,OAFA+B,EAAQ/D,WAAa/E,KAAK6H,eAAegC,QAAQhB,EAAY9D,KAAM6E,GAE5Dd,CACT,G,CAEcG,kBACZX,G,0CAEA,MAAMsB,QAAe5J,KAAK0J,mBAAmBpB,EAAgBvC,gBAEvD8C,EAAc,IAAI/B,GASxB,OARA+B,EAAYtD,GAAK+C,EAAgB/C,GACjCsD,EAAY9C,eAAiBuC,EAAgBvC,eAC7C8C,EAAYzB,aAAekB,EAAgBlB,aAC3CyB,EAAYxB,aAAeiB,EAAgBjB,aAC3CwB,EAAY9D,WAAa/E,KAAK6H,eAAeiC,cAC3C,IAAI,KAAUxB,EAAgBvD,MAC9B6E,GAEKf,CACT,G,CAEcN,mCACZD,G,0CAEA,OAAO,OAAP,8BACYtI,KAAKiJ,kBAAkBX,IAAiB,CAClDd,KAAMc,EAAgBd,KACtBC,MAAOa,EAAgBb,OAE3B,G,CAEckB,uBACZ5C,EACAqD,G,0CAEA,MAAMQ,QAAe5J,KAAK0J,mBAAmB3D,GAC7C,aAAagE,QAAQC,IACnBZ,EAAS3G,KAAWwH,GAA+B,GAAD,gCAChD,MAAMC,EAAkB,IAAIrD,GAS5B,OARAqD,EAAgB3E,GAAK0E,EAAE1E,GACvB2E,EAAgBnE,eAAiBkE,EAAElE,eACnCmE,EAAgBnF,WAAa/E,KAAK6H,eAAeiC,cAC/C,IAAI,KAAUG,EAAElF,MAChB6E,GAEFM,EAAgB9C,aAAe6C,EAAE7C,aACjC8C,EAAgB7C,aAAe4C,EAAE5C,aAC1B6C,CACT,MAEJ,G,oCA3HWxC,IAAc,sC,sBAAdA,GAAc,QAAdA,GAAc,gBAFb,S,ibCjBN,SACE,SACF,S,qBADE,mE,4BAEF,SACE,S,gBAEF,S,qBAFE,uG,ECqBH,MAAMyC,GAKX3K,YACS6G,EACqBpG,EACpBmK,EACAtK,EACAD,EACAwK,GALD,KAAAhE,UAAAA,EACqB,KAAApG,KAAAA,EACpB,KAAAmK,eAAAA,EACA,KAAAtK,YAAAA,EACA,KAAAD,qBAAAA,EACA,KAAAwK,cAAAA,EAVV,KAAAC,UAAY,IAAI,MAAU,CACxBC,cAAe,IAAI,MAAY,GAAI,CAACvK,KAAKwK,wCAmC3C,KAAAnK,OAAS,IAAY,mCACnBL,KAAKsK,UAAUG,mBAEXzK,KAAKsK,UAAUI,gBAIb1K,KAAKmJ,SACXnJ,KAAKqG,UAAU1F,QACjB,GAlCG,CAEHO,W,MACE,MAAwB,QAAlB,EAAAlB,KAAKC,KAAKmJ,gBAAQ,eAAEzC,SAAU,GAElC,MADA3G,KAAKqG,UAAU1F,QACT,IAAIiG,MACR,kFAGN,CAEIN,YACF,OAAqC,IAA9BtG,KAAKC,KAAKmJ,SAASzC,OAAe,gBAAkB,gBAC7D,CAEIgE,oBACF,OAAqC,IAA9B3K,KAAKC,KAAKmJ,SAASzC,OACtB3G,KAAKF,YAAYY,EAAE,6BAA8BV,KAAKC,KAAKmJ,SAAS,GAAGrE,MACvE/E,KAAKF,YAAYY,EAAE,8BACzB,CAEIkK,8BACF,OAAO5K,KAAKF,YAAYY,EAAE,0BAA2BV,KAAK6K,0BAC5D,CAaM1B,S,0CACJ,MAAM2B,QAAsB9K,KAAKoK,eAAejB,OAAOnJ,KAAKC,KAAKmJ,UAEjE,GAAI0B,EAAczF,MAAM4B,GAAaA,EAASuC,eAE5C,YADAxJ,KAAK+K,qBAAqBD,EAAcnG,QAAQsC,GAAaA,EAASuC,gBAIxE,MAAM/C,EAAwC,IAA9BzG,KAAKC,KAAKmJ,SAASzC,OAAe,qBAAuB,sBACzE3G,KAAKH,qBAAqBY,UAAU,UAAW,KAAMT,KAAKF,YAAYY,EAAE+F,GAC1E,G,CAEAsE,qBAAqBC,GACnBhL,KAAKqK,cAAc3G,KAAiC0C,GAA2B,CAC7EnG,KAAM,CACJqG,MAAO,iBACPC,SAAU,WACVC,YAAa,cACbC,QAAS,iCACTC,QAASsE,IAGf,CAEYH,gC,QACV,OAAsC,KAAb,QAAlB,EAAA7K,KAAKC,KAAKmJ,gBAAQ,eAAEzC,QACvB3G,KAAKF,YAAYY,EAAE,8BAA+BV,KAAKC,KAAKmJ,SAAS,GAAGrE,MACxE/E,KAAKF,YAAYY,EAAE,+BAAkD,QAAlB,EAAAV,KAAKC,KAAKmJ,gBAAQ,eAAEzC,OAAOnD,WACpF,CAEQgH,oCACN,OAAQS,GACFjL,KAAK6K,0BAA0BK,eAAiBD,EAAQ1K,MAAM2K,cACzD,KAEA,CACLC,6BAA8B,CAC5B1E,QAASzG,KAAKF,YAAYY,EAAE,2BAKtC,E,kCA1FWyJ,IAA4B,mBAO7B,OAAW,gD,oBAPVA,GAA4B,siBD9BzC,kBACE,wCACE,6BACE,oCAAM,S,gBAAkB,QACxB,uCACE,yDAGA,yDAIF,6BACF,2BAEA,uCACE,+C,iBACE,UACF,QACA,gDACE,6CAAW,UAA6B,QACxC,2CACF,6BACF,2BAEA,uCACE,0CACE,U,iBACF,QACA,2CACE,U,iBACF,QACF,2BACF,yBACF,uBACA,gB,MAnCM,+BAAuB,sBAGjB,oCAEW,iDAGA,gDAQW,+CAC1B,wDAGW,0CAOX,6DAGA,8D,iIEnBIiB,G,8TCPN,iBACE,sCACF,4B,wBACA,0BACE,2CAAW,S,gBAA0B,QACrC,0CACF,6B,MAFa,yC,EDGnB,SAAYA,GACV,iBACA,kBACD,CAHD,CAAYA,KAAAA,GAAa,KAelB,MAAMC,GAMX7L,YACS6G,EACsBpG,EACrBmK,EACAtK,EACAD,EACAyL,GALD,KAAAjF,UAAAA,EACsB,KAAApG,KAAAA,EACrB,KAAAmK,eAAAA,EACA,KAAAtK,YAAAA,EACA,KAAAD,qBAAAA,EACA,KAAAyL,OAAAA,EAXA,KAAAhB,UAAY,IAAI,MAAU,CAClCvF,KAAM,IAAI,MAAY,GAAI,CAAC,mBAEnB,KAAAwG,SAAU,EA+BpB,KAAAlL,OAAS,IAAY,mCAGnB,GAFAL,KAAKsK,UAAUG,mBAEXzK,KAAKsK,UAAUI,QACjB,OAGF,MAAM7B,EAAc7I,KAAKwL,iBACzB,GAAIxL,KAAKC,KAAKwL,YAAcL,GAAcM,IAAK,CAC7C,MAAMC,QAAmB3L,KAAK4L,cAAc/C,GAC5C7I,KAAKsL,OAAOO,SAAS,CAAC,KAAM7L,KAAKC,KAAK8F,eAAgB,WAAY4F,EAAWpG,I,MAE7EsD,EAAYtD,GAAKvF,KAAKC,KAAKkI,gBACrBnI,KAAK8L,cAAcjD,GAE3B7I,KAAKqG,UAAU1F,OACjB,GAtCG,CAEGO,W,0CACJ,GAAIlB,KAAKC,KAAKwL,YAAcL,GAAcW,MAAQ/L,KAAKC,KAAKkI,gBACpDnI,KAAKgM,gBACN,GAAIhM,KAAKC,KAAKwL,YAAcL,GAAcM,IAE/C,MADA1L,KAAKqG,UAAU1F,QACT,IAAIiG,MAAM,2EAEpB,G,CAEMoF,W,0CACJhM,KAAKuL,SAAU,EACf,MAAMvC,QAA6BhJ,KAAKoK,eAAelC,eAAelI,KAAKC,KAAKkI,WAChFnI,KAAKuL,SAAU,EACfvL,KAAKsK,UAAU2B,SAAS,CAAElH,KAAMiE,EAAQjE,MAC1C,G,CAEIuB,YACF,OAAOtG,KAAKC,KAAKwL,YAAcL,GAAcM,IAAM,aAAe,aACpE,CAoBcE,cAAc/C,G,0CAC1B,MAAM8C,QAAmB3L,KAAKoK,eAAexB,OAAO5I,KAAKC,KAAK8F,eAAgB8C,GAE9E,OADA7I,KAAKH,qBAAqBY,UAAU,UAAW,KAAMT,KAAKF,YAAYY,EAAE,mBACjEiL,CACT,G,CAEcG,cAAcjD,G,gDACpB7I,KAAKoK,eAAelB,OAAOlJ,KAAKC,KAAK8F,eAAgB8C,GAC3D7I,KAAKH,qBAAqBY,UAAU,UAAW,KAAMT,KAAKF,YAAYY,EAAE,gBAC1E,G,CAEQ8K,iBACN,MAAM3C,EAAc,IAAI/B,GAGxB,OAFA+B,EAAY9C,eAAiB/F,KAAKC,KAAK8F,eACvC8C,EAAY9D,KAAO/E,KAAKsK,UAAU/J,MAAMwE,KACjC8D,CACT,E,kCArEWwC,IAAsB,mBAQvB,OAAW,gD,oBARVA,GAAsB,gkBC1BnC,kBACE,wCACE,oCAAqB,S,gBAAkB,QACvC,oCACE,6CAGA,yDAIF,2BACA,qCACE,0CACE,U,iBACF,QACA,0CACE,U,iBACF,QACF,2BACF,yBACF,uBACA,gB,MAtBM,+BAAuB,sBAEJ,mCAEb,iCAGW,kCAOf,2DAGA,8D,8HCfD,MAAMa,ICFN,MAAMC,ICEN,MAAMC,ICFN,MAAMC,ICEN,MAAMC,WAA8B,KAIzC9M,YAAYyH,GACVC,MAAMD,GACNjH,KAAK+E,KAAO/E,KAAKmH,oBAAoB,QACrCnH,KAAKuF,GAAKvF,KAAKmH,oBAAoB,KACrC,ECNK,MAAMoF,WAA+B,KAU1C/M,YAAYyH,GACVC,MAAMD,GACNjH,KAAKuF,GAAKvF,KAAKmH,oBAAoB,MACnCnH,KAAK+F,eAAiB/F,KAAKmH,oBAAoB,kBAC/CnH,KAAK+E,KAAO/E,KAAKmH,oBAAoB,OACrCnH,KAAKoH,aAAepH,KAAKmH,oBAAoB,gBAC7CnH,KAAKqH,aAAerH,KAAKmH,oBAAoB,gBAC7CnH,KAAKwH,KAAOxH,KAAKmH,oBAAoB,QACrCnH,KAAKyH,MAAQzH,KAAKmH,oBAAoB,SAEtC,MAAM6B,EAAUhJ,KAAKmH,oBAAoB,YACzCnH,KAAKoJ,SAAsB,MAAXJ,EAAkB,KAAOA,EAAQvG,KAAK+J,GAAW,IAAIF,GAAsBE,IAC7F,ECrBK,MAAMC,WAAuC,KAIlDjN,YAAYyH,GACVC,MAAMD,GACN,MAAMyF,EAAU1M,KAAKmH,oBAAoB,WACnCiC,EAAWpJ,KAAKmH,oBAAoB,YAC1CnH,KAAKoJ,SACS,MAAZA,EAAmB,KAAOA,EAAS3G,KAAK+J,GAAW,IAAIF,GAAsBE,KAC/ExM,KAAK0M,QAAqB,MAAXA,EAAkB,GAAKA,EAAQjK,KAAKkK,GAAY,IAAIJ,GAAuBI,IAC5F,ECZK,MAAMC,WAAuB,KAclCpN,YAAYyH,GACVC,MAAMD,GACNjH,KAAKuF,GAAKvF,KAAKmH,oBAAoB,MACnCnH,KAAK+F,eAAiB/F,KAAKmH,oBAAoB,kBAC/CnH,KAAK+E,KAAO/E,KAAKmH,oBAAoB,OACrCnH,KAAKO,MAAQP,KAAKmH,oBAAoB,SACtCnH,KAAK6M,KAAO7M,KAAKmH,oBAAoB,QACrCnH,KAAKoH,aAAepH,KAAKmH,oBAAoB,gBAC7CnH,KAAKqH,aAAerH,KAAKmH,oBAAoB,gBAE7CnH,KAAKwH,KAAOxH,KAAKmH,oBAAoB,QACrCnH,KAAKyH,MAAQzH,KAAKmH,oBAAoB,SAEtC,MAAMiC,EAAWpJ,KAAKmH,oBAAoB,YAC1CnH,KAAKoJ,SACS,MAAZA,EAAmB,KAAOA,EAAS3G,KAAK+J,GAAW,IAAIF,GAAsBE,IACjF,E,2SCXK,MAAMM,GAKXtN,YACUmI,EACAC,EACAC,GAFA,KAAAF,cAAAA,EACA,KAAAC,WAAAA,EACA,KAAAC,eAAAA,EAPA,KAAAkF,QAA+B,IAAIhF,GAAA,EAE7C,KAAAiF,QAAUhN,KAAK+M,QAAQ9E,cAMpB,CAEGgF,cAAcC,G,0CAClB,MAAM9E,QAAUpI,KAAK4H,WAAWS,KAAK,MAAO,YAAc6E,EAAU,MAAM,GAAM,GAC1EC,EAAiB,IAAIP,GAAexE,GAE1C,aAAapI,KAAKoN,iBAAiBD,EACrC,G,CAEME,WAAWtH,G,0CACf,MAAMqC,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,kBAAoBtC,EAAiB,WACrC,MACA,GACA,GAGI0C,EAAU,IAAIgE,GAA+BrE,GACnD,aAAapI,KAAKsN,sBAAsBvH,EAAgB0C,EAC1D,G,CAEM8E,oBAAoBxH,EAAwBoC,G,0CAChD,MAAMC,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,aAAeF,EAAY,WAC3B,MACA,GACA,GAGIM,EAAU,IAAIgE,GAA+BrE,GACnD,aAAapI,KAAKsN,sBAAsBvH,EAAgB0C,EAC1D,G,CAEMG,OAAO7C,EAAwByH,G,0CACnC,MAAM1E,QAAgB9I,KAAKyN,iBAAiB1H,EAAgByH,GACtDpF,QAAUpI,KAAK4H,WAAWS,KAC9B,OACA,kBAAoBtC,EAAiB,WACrC+C,GACA,GACA,GAEF9I,KAAK+M,QAAQ/J,WAAWhD,KAAKoN,iBAAiB,IAAIR,GAAexE,IACnE,G,CAEMc,OAAOnD,EAAwByH,G,0CACnC,MAAM1E,QAAgB9I,KAAKyN,iBAAiB1H,EAAgByH,GACtDpF,QAAUpI,KAAK4H,WAAWS,KAAK,MAAO,YAAcmF,EAAWjI,GAAIuD,GAAS,GAAM,GACxF9I,KAAK+M,QAAQ/J,WAAWhD,KAAKoN,iBAAiB,IAAIR,GAAexE,IACnE,G,CAEMe,OAAOuD,G,0CACX,MAAMgB,EAAYhB,EAAQjK,KAAKrC,GAAWA,EAAOmF,KAC3C6C,QAAUpI,KAAK4H,WAAWS,KAAK,OAAQ,kBAAmBqF,GAAW,GAAM,GAGjF,OADA1N,KAAK+M,QAAQ/J,KAAK,MACXoF,EAAEnI,KAAKwC,KAAK6G,IACjB,MAAMC,EAAsB,IAAIpD,GAIhC,OAHAoD,EAAoBhE,GAAK+D,EAAQ/D,GACjCgE,EAAoBxE,KAAO2H,EAAQrH,MAAMjF,GAAWA,EAAOmF,IAAM+D,EAAQ/D,KAAIR,KAC7EwE,EAAoBC,aAAeF,EAAQG,MACpCF,CAAmB,GAE9B,G,CAEMoE,kBAAkB5H,G,0CACtB,MAAMqC,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,YAActC,EAAiB,SAC/B,MACA,GACA,GAGF,aAAa/F,KAAKsN,sBAAsBvH,EAAgB,IAAI0G,GAA+BrE,GAC7F,G,CAEMwF,cAAc7H,EAAwB2H,G,gDACpC1N,KAAK4H,WAAWS,KACpB,OACA,YAActC,EAAiB,eAC/B2H,GACA,GACA,GAGF1N,KAAK+M,QAAQ/J,KAAK,KACpB,G,CAEM6K,eAAe9H,EAAwB2H,G,gDACrC1N,KAAK4H,WAAWS,KACpB,OACA,YAActC,EAAiB,iBAC/B2H,GACA,GACA,GAGF1N,KAAK+M,QAAQ/J,KAAK,KACpB,G,CAEc0G,mBAAmB3D,G,0CAC/B,aAAa/F,KAAK2H,cAAcgC,UAAU5D,EAC5C,G,CAEc0H,iBACZ1H,EACAyH,G,gDAEA,MAAM5D,QAAe5J,KAAK0J,mBAAmB3D,GACvC+C,EAAU,IAAIuD,IACbyB,EAAKvN,EAAOsM,SAAc9C,QAAQC,IAAI,CAC3ChK,KAAK6H,eAAegC,QAAQ2D,EAAWzI,KAAM6E,GAC7C5J,KAAK6H,eAAegC,QAAQ2D,EAAWjN,MAAOqJ,GAC9C5J,KAAK6H,eAAegC,QAAQ2D,EAAWX,KAAMjD,KAS/C,OAPAd,EAAQgF,IAAMA,EAAIC,gBAClBjF,EAAQvI,MAAQA,EAAMwN,gBACtBjF,EAAQ+D,KAAOA,EAAKkB,gBACpBjF,EAAQO,WAAa,GAEF,QAAnB,EAAAmE,EAAWpE,gBAAQ,SAAElF,SAAS1D,GAAMsI,EAAQO,WAAW2E,KAAKxN,EAAE+E,MAEvDuD,C,IAGKsE,iBAAiBD,G,0CAC7B,MAAMvD,QAAe5J,KAAK0J,mBAAmByD,EAAepH,gBAEtDyH,EAAa,IAAIpB,GACvBoB,EAAWjI,GAAK4H,EAAe5H,GAC/BiI,EAAWzH,eAAiBoH,EAAepH,eAC3CyH,EAAWpG,aAAe+F,EAAe/F,aACzCoG,EAAWnG,aAAe8F,EAAe9F,aAEzC,MAAOtC,EAAMxE,EAAOsM,SAAc9C,QAAQC,IAAI,CAC5ChK,KAAK6H,eAAeiC,cAAc,IAAI,KAAUqD,EAAepI,MAAO6E,GACtE5J,KAAK6H,eAAeiC,cAAc,IAAI,KAAUqD,EAAe5M,OAAQqJ,GACvE5J,KAAK6H,eAAeiC,cAAc,IAAI,KAAUqD,EAAeN,MAAOjD,KAgBxE,OAdA4D,EAAWzI,KAAOA,EAClByI,EAAWjN,MAAQA,EACnBiN,EAAWX,KAAOA,EAElBW,EAAWhG,KAAO2F,EAAe3F,KACjCgG,EAAW/F,MAAQ0F,EAAe1F,MAEH,MAA3B0F,EAAe/D,WACjBoE,EAAWpE,eAAiBpJ,KAAKiO,+BAC/BrE,EACAuD,EAAe/D,WAIZoE,CACT,G,CAEcF,sBACZvH,EACA2G,G,0CAEA,MAAM9C,QAAe5J,KAAK0J,mBAAmB3D,GAEvCmI,QAAoClO,KAAKiO,+BAC7CrE,EACA8C,EAAQtD,UAGV,aAAaW,QAAQC,IACnB0C,EAAQA,QAAQjK,KAAWwH,GAA8B,mC,MACvD,MAAMkE,EAAiB,IAAIjC,GAC3BiC,EAAe5I,GAAK0E,EAAE1E,GACtB4I,EAAepI,eAAiBkE,EAAElE,eAClCoI,EAAepJ,WAAa/E,KAAK6H,eAAeiC,cAC9C,IAAI,KAAUG,EAAElF,MAChB6E,GAEFuE,EAAe/G,aAAe6C,EAAE7C,aAChC+G,EAAe9G,aAAe4C,EAAE5C,aAEhC,MAAMgC,EAAuB,QAAV,EAAAY,EAAEb,gBAAQ,eAAE3G,KAAK2L,GAAMA,EAAE7I,KAQ5C,OAPA4I,EAAe/E,SAAW8E,EAA4BvJ,QAAQyJ,GAC5D/E,EAAWgF,SAASD,EAAE7I,MAGxB4I,EAAe3G,KAAOyC,EAAEzC,KACxB2G,EAAe1G,MAAQwC,EAAExC,MAElB0G,CACT,MAEJ,G,CAEcF,+BACZrE,EACAR,G,0CAEA,aAAaW,QAAQC,IACnBZ,EAAS3G,KAAWwH,GAA6B,mCAC/C,MAAMqE,EAA6B,IAAInC,GAMvC,OALAmC,EAA2B/I,GAAK0E,EAAE1E,GAClC+I,EAA2BvJ,WAAa/E,KAAK6H,eAAeiC,cAC1D,IAAI,KAAUG,EAAElF,MAChB6E,GAEK0E,CACT,MAEJ,G,oCA3NWxB,IAAa,sC,sBAAbA,GAAa,QAAbA,GAAa,gBAFZ,S,0VClBV,eACE,S,gBACF,S,MADE,yE,CCmBC,MAAMyB,GACX/O,YACS6G,EACCmI,EACA1O,EACAD,EACqBI,EACrBoK,GALD,KAAAhE,UAAAA,EACC,KAAAmI,cAAAA,EACA,KAAA1O,YAAAA,EACA,KAAAD,qBAAAA,EACqB,KAAAI,KAAAA,EACrB,KAAAoK,cAAAA,EAGV,KAAAoE,4BAA2D,IAA7BzO,KAAKC,KAAKyM,QAAQ/F,OAUhD,KAAAwC,OAAS,IAAY,mCACnB,MAAM2B,QAAsB9K,KAAKwO,cAAcrF,OAAOnJ,KAAKC,KAAKyM,SAEhE,GAAI5B,EAAczF,MAAM4B,GAAaA,EAASuC,eAG5C,OAFAxJ,KAAK+K,qBAAqBD,EAAcnG,QAAQsC,GAAaA,EAASuC,qBACtExJ,KAAKqG,UAAU1F,OAAM,GAIvB,MAAM8F,EACyB,IAA7BzG,KAAKC,KAAKyM,QAAQ/F,OAAe,yBAA2B,0BAC9D3G,KAAKH,qBAAqBY,UAAU,UAAW,KAAMT,KAAKF,YAAYY,EAAE+F,IAExEzG,KAAKqG,UAAU1F,OAAM,EACvB,GA1BG,CAIC2F,YACF,OAAoC,IAA7BtG,KAAKC,KAAKyM,QAAQ/F,OAAe,eAAiB,eAC3D,CAEI+H,uBACF,OAAoC,IAA7B1O,KAAKC,KAAKyM,QAAQ/F,OAAe,eAAiB,eAC3D,CAkBAoE,qBAAqBC,GACnBhL,KAAKqK,cAAc3G,KAAiC0C,GAA2B,CAC7EnG,KAAM,CACJqG,MAAO,gBACPC,SAAU,UACVC,YAAa,OACbC,QAAS,gCACTC,QAASsE,IAGf,E,kCA9CWuD,IAA2B,qDAM5B,OAAW,c,oBANVA,GAA2B,0VDvBxC,6BACE,kCAAqB,S,gBAAkB,QACvC,kCACE,0CAGA,S,iBACF,QACA,mCACE,wCACE,U,iBACF,QACA,wCACE,U,iBACF,QACF,yBACF,uBACA,gB,MAhBuB,mCAEb,qDAGN,qEAGqD,qCACnD,oEAGA,yD,qEEMM,G,0UCfN,kBAIE,sCACF,4B,2BAsBI,qBACE,SACF,S,yBAFmC,oBACjC,sD,2CAmBN,qBAOE,0DAAS,QAAAI,yBAAwB,IAClC,O,GDxCP,SAAYvD,GACV,iBACA,kBACD,CAHD,CAAY,QAAa,KAgBlB,MAAMwD,GAYXpP,YACS6G,EACsBpG,EACrBuO,EACA1O,EACAD,EACAuK,EACAC,EACA7F,GAPD,KAAA6B,UAAAA,EACsB,KAAApG,KAAAA,EACrB,KAAAuO,cAAAA,EACA,KAAA1O,YAAAA,EACA,KAAAD,qBAAAA,EACA,KAAAuK,eAAAA,EACA,KAAAC,cAAAA,EACA,KAAA7F,oBAAAA,EAnBA,KAAA8F,UAAY,IAAI,MAAU,CAClCvF,KAAM,IAAI,MAAY,GAAI,CAAC,iBAC3BxE,MAAO,IAAI,MAAY,GAAI,CAAC,iBAC5BsO,MAAO,IAAI,MAAY,IACvB7F,QAAS,IAAI,MAAY,GAAI,CAAC,mBAGxB,KAAA8F,SAAW,IAAI/G,GAAA,EACf,KAAAwD,SAAU,EAkElB,KAAAlL,OAAS,IAAY,mCAGnB,GAFAL,KAAKsK,UAAUG,mBAEXzK,KAAKsK,UAAUI,QACjB,OAGF,MAAM8C,EAAaxN,KAAK+O,gBACpB/O,KAAKC,KAAKwL,YAAc,GAAcC,UAClC1L,KAAKgP,aAAaxB,IAExBA,EAAWjI,GAAKvF,KAAKC,KAAKiN,eACpBlN,KAAKiP,aAAazB,IAE1BxN,KAAKqG,UAAU1F,OACjB,GArEG,CAEGO,W,gDACJ,GAAIlB,KAAKC,KAAKwL,YAAc,GAAcM,MAAQ/L,KAAKC,KAAKiN,eACpDlN,KAAKgM,gBACN,GAAIhM,KAAKC,KAAKwL,YAAc,GAAcC,IAE/C,MADA1L,KAAKqG,UAAU1F,QACT,IAAIiG,MAAM,2EAGd5G,KAAKC,KAAKkI,WACZnI,KAAKsK,UAAU9E,IAAI,WAAWyG,SAASjM,KAAKC,KAAKkI,YAGO,QAAtD,EAAAnI,KAAKwE,oBAAoBgB,IAAIxF,KAAKC,KAAK8F,uBAAe,eAAEC,WAC1DhG,KAAKsK,UAAU9E,IAAI,WAAW0J,iBAAiB,gBAC/ClP,KAAKsK,UAAU9E,IAAI,WAAW2J,0BAGhCnP,KAAKoJ,eAAiBpJ,KAAKoK,eACxB5B,YAAYxI,KAAKC,KAAK8F,gBACtBqJ,MAAMhG,GAAaA,EAASxE,MAAK,CAACC,EAAGC,IAAMD,EAAEE,KAAKC,cAAcF,EAAEC,S,IAGjEiH,W,kDACJhM,KAAKsK,UAAU+E,UACf,MAAMjP,QAA2BJ,KAAKwO,cAAcvB,cAAcjN,KAAKC,KAAKiN,UAC5ElN,KAAKsK,UAAU2B,SAAS,CACtBlH,KAAM3E,EAAO2E,KACbxE,MAAOH,EAAOG,MACdsO,MAAOzO,EAAOyM,KACd7D,QAA+B,QAAtB,EAAkB,QAAlB,EAAA5I,EAAOgJ,SAAS,UAAE,eAAE7D,UAAE,QAAI,KAGrCvF,KAAKuL,SAAU,EAEXnL,EAAOqH,OACTzH,KAAKsK,UAAUgF,Q,IAInBC,cACEvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,CAEIlJ,YACF,OAAOtG,KAAKC,KAAKwL,YAAc,GAAcC,IAAM,YAAc,YACnE,CAEI+D,kBACF,OAAOzP,KAAKC,KAAKwL,YAAc,GAAcM,MAAQ/L,KAAKuL,OAC5D,CAmBImE,4BACF,OAAO1P,KAAKC,KAAKwL,YAAc,GAAcM,IAC/C,CAEU4C,yBACR,MAAMR,EAAmCnO,KAAK2P,oBAExCtJ,EAAYrG,KAAKqK,cAAc3G,KACnC6K,GACA,CACEtO,KAAM,CACJyM,QAASyB,MAMf,EAAAyB,GAAA,GAAcvJ,EAAUwJ,QAAQT,MAC7BU,QAA4BC,IAAdD,GAA2B9P,KAAKqG,UAAU1F,SAE7D,CAEcqO,aAAaxB,G,gDACnBxN,KAAKwO,cAAc5F,OAAO5I,KAAKC,KAAK8F,eAAgByH,GAC1DxN,KAAKH,qBAAqBY,UAAU,UAAW,KAAMT,KAAKF,YAAYY,EAAE,iBAC1E,G,CAEcuO,aAAazB,G,gDACnBxN,KAAKwO,cAActF,OAAOlJ,KAAKC,KAAK8F,eAAgByH,GAC1DxN,KAAKH,qBAAqBY,UAAU,UAAW,KAAMT,KAAKF,YAAYY,EAAE,gBAC1E,G,CAEQqO,gBACN,MAAMvB,EAAa,IAAIpB,GACvBoB,EAAWzH,eAAiB/F,KAAKC,KAAK8F,eACtCyH,EAAWzI,KAAO/E,KAAKsK,UAAU/J,MAAMwE,KACvCyI,EAAWjN,MAAQP,KAAKsK,UAAU/J,MAAMA,MACxCiN,EAAWX,KAAO7M,KAAKsK,UAAU/J,MAAMsO,MAEvC,MAAM7F,EAAUhJ,KAAKoJ,SAAS/D,MAAM+I,GAAMA,EAAE7I,IAAMvF,KAAKsK,UAAU/J,MAAMyI,UAGvE,OAFAwE,EAAWpE,SAAsB2G,MAAX/G,EAAuB,CAACA,GAAW,GAElDwE,CACT,CAEQmC,oBACN,MAAMK,EAAoC,GACpCC,EAAqC,GAErC9B,EAAiB,IAAIjC,GAY3B,OAVIlM,KAAKsK,UAAU/J,MAAMyI,QACvBmF,EAAe/E,SAAW,CAACpJ,KAAKoJ,SAAS/D,MAAM+I,GAAMA,EAAE7I,IAAMvF,KAAKsK,UAAU/J,MAAMyI,WAElFmF,EAAe/E,SAAW6G,EAG5B9B,EAAepI,eAAiB/F,KAAKC,KAAK8F,eAC1CoI,EAAe5I,GAAKvF,KAAKC,KAAKiN,SAC9BiB,EAAepJ,KAAO/E,KAAKsK,UAAU/J,MAAMwE,KAC3CiL,EAAgBhC,KAAKG,GACd6B,CACT,E,kCA1JWpB,IAAqB,mBActB,OAAW,sE,oBAdVA,GAAqB,yyCCnClC,kBACE,wCACE,6BAA6B,S,gBAAkB,QAC/C,mCACE,6CAMA,uCACE,oDACE,iDAA6B,U,iBAAmB,QAChD,6CACF,+BACA,oDACE,+CAAW,U,iBAAoB,QAC/B,iDACF,+BACF,6BACA,gDACE,6CAAW,U,iBAAoB,QAC/B,+CACF,6BAEA,sCAEA,qDACE,6CAAW,U,iBAAsB,QACjC,6CACE,+CAAiB,U,iBAAgC,QACjD,sDAGF,+BACF,6BACF,2BACA,sCACE,2CACE,U,iBACF,QACA,2CAQE,U,iBACF,QACA,kDASF,2BACF,yBACF,uBACA,gB,MA/DM,+BAAuB,sBAEI,oCAGxB,qCAO8B,oCAIlB,qCAKF,sCAOA,wCAEQ,iDACK,qCAQxB,4DAQA,8BAEA,8DAGC,+C,mJCpDF,MAAMsB,ICEN,MAAMC,ICAN,MAAMC,WAA+B,KAO1C5Q,YAAYyH,GACVC,MAAMD,GACNjH,KAAKuF,GAAKvF,KAAKmH,oBAAoB,MACnCnH,KAAK+F,eAAiB/F,KAAKmH,oBAAoB,kBAC/CnH,KAAK+E,KAAO/E,KAAKmH,oBAAoB,QACrCnH,KAAKoH,aAAepH,KAAKmH,oBAAoB,gBAC7CnH,KAAKqH,aAAerH,KAAKmH,oBAAoB,eAC/C,E,2SCGK,MAAMkJ,GAKX7Q,YACUmI,EACAC,EACAC,GAFA,KAAAF,cAAAA,EACA,KAAAC,WAAAA,EACA,KAAAC,eAAAA,EAPA,KAAAyI,gBAA+C,IAAIvI,GAAA,EAE7D,KAAAwI,gBAAkBvQ,KAAKsQ,gBAAgBrI,cAMpC,CAEGuI,mBAAmBzK,G,0CACvB,MAAMqC,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,kBAAoBtC,EAAiB,oBACrC,MACA,GACA,GAEI0C,EAAU,IAAI,GAAAC,EAAaN,EAAGgI,IACpC,aAAapQ,KAAKyQ,0BAA0B1K,EAAgB0C,EAAQxI,KACtE,G,CAEMyQ,sBACJC,EACA5K,G,0CAEA,MAAM6D,QAAe5J,KAAK0J,mBAAmB3D,GACvCqC,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,qBAAuBsI,EACvB,MACA,GACA,GAGF,aAAa3Q,KAAK4Q,yBAAyBhH,EAAQ,IAAIwG,GAAuBhI,GAChF,G,CAEMc,OACJyH,EACA5K,EACA8K,G,0CAEA,MAAMjH,QAAe5J,KAAK0J,mBAAmB3D,GACvC+C,QAAgB9I,KAAK8Q,yBAAyBlH,EAAQiH,GACtDzI,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,qBAAuBsI,EACvB7H,GACA,GACA,GAEF9I,KAAKsQ,gBAAgBtN,WACbhD,KAAK4Q,yBAAyBhH,EAAQ,IAAIwG,GAAuBhI,IAE3E,G,CAEMQ,OAAO7C,EAAwB8K,G,0CACnC,MAAMjH,QAAe5J,KAAK0J,mBAAmB3D,GACvC+C,QAAgB9I,KAAK8Q,yBAAyBlH,EAAQiH,GACtDzI,QAAUpI,KAAK4H,WAAWS,KAC9B,OACA,kBAAoBtC,EAAiB,oBACrC+C,GACA,GACA,GAEF9I,KAAKsQ,gBAAgBtN,WACbhD,KAAK4Q,yBAAyBhH,EAAQ,IAAIwG,GAAuBhI,IAE3E,G,CAEMe,OAAO4H,G,0CACX,MAAMC,EAAMD,EAAgBtO,KAAKwO,GAAmBA,EAAe1L,KAC7D6C,QAAUpI,KAAK4H,WAAWS,KAAK,OAAQ,2BAA4B2I,GAAK,GAAM,GAIpF,OAFAhR,KAAKsQ,gBAAgBtN,KAAK,MAEnBoF,EAAEnI,KAAKwC,KAAK6G,IACjB,MAAMC,EAAsB,IAAIpD,GAIhC,OAHAoD,EAAoBhE,GAAK+D,EAAQ/D,GACjCgE,EAAoBxE,KAAOgM,EAAgB1L,MAAM6L,GAAOA,EAAG3L,IAAM+D,EAAQ/D,KAAIR,KAC7EwE,EAAoBC,aAAeF,EAAQG,MACpCF,CAAmB,GAE9B,G,CAEcG,mBAAmB3D,G,0CAC/B,aAAa/F,KAAK2H,cAAcgC,UAAU5D,EAC5C,G,CAEc+K,yBACZK,EACAN,G,0CAEA,MAAM/H,EAAU,IAAIqH,GAEpB,OADArH,EAAQ/D,WAAa/E,KAAK6H,eAAegC,QAAQgH,EAAmB9L,KAAMoM,GACnErI,CACT,G,CAEc8H,yBACZO,EACAC,G,0CAEA,MAAMP,EAAqB,IAAIX,GAS/B,OARAW,EAAmBtL,GAAK6L,EAAuB7L,GAC/CsL,EAAmB9K,eAAiBqL,EAAuBrL,eAC3D8K,EAAmBzJ,aAAegK,EAAuBhK,aACzDyJ,EAAmBxJ,aAAe+J,EAAuB/J,aACzDwJ,EAAmB9L,WAAa/E,KAAK6H,eAAeiC,cAClD,IAAI,KAAUsH,EAAuBrM,MACrCoM,GAEKN,CACT,G,CAEcJ,0BACZ1K,EACAsL,G,0CAEA,MAAMzH,QAAe5J,KAAK0J,mBAAmB3D,GAC7C,aAAagE,QAAQC,IACnBqH,EAAwB5O,KAAWwH,GAA8B,mCAC/D,aAAajK,KAAK4Q,yBAAyBhH,EAAQK,EACrD,MAEJ,G,oCA/HWoG,IAAqB,sC,sBAArBA,GAAqB,QAArBA,GAAqB,gBAFpB,S,ICPF,G,8TCNN,iBACE,sCACF,4B,wBACA,eACE,gDACE,6CAAW,S,gBAAiC,QAC5C,4CACF,8BACF,8B,MAHe,gD,EDCrB,SAAYjF,GACV,iBACA,kBACD,CAHD,CAAY,QAAa,KAelB,MAAMkG,GAOX9R,YACS6G,EACsBpG,EACrBsR,EACAzR,EACAD,GAJD,KAAAwG,UAAAA,EACsB,KAAApG,KAAAA,EACrB,KAAAsR,sBAAAA,EACA,KAAAzR,YAAAA,EACA,KAAAD,qBAAAA,EAXA,KAAAyK,UAAY,IAAI,MAAU,CAClCvF,KAAM,IAAI,MAAY,GAAI,CAAC,mBAGnB,KAAAwG,SAAU,EA2BpB,KAAAlL,OAAS,IAAY,mCAGnB,GAFAL,KAAKsK,UAAUG,mBAEXzK,KAAKsK,UAAUI,QACjB,OAGF,MAAMmG,EAAqB7Q,KAAKwR,wBAChC,IAAIC,EAEAzR,KAAKC,KAAKwL,WAAa,GAAcC,WACjC1L,KAAKuR,sBAAsB3I,OAAO5I,KAAKC,KAAK8F,eAAgB8K,GAClEY,EAAwBzR,KAAKF,YAAYY,EAAE,iCAErCV,KAAKuR,sBAAsBrI,OAC/BlJ,KAAKC,KAAK0Q,iBACV3Q,KAAKC,KAAK8F,eACV8K,GAEFY,EAAwBzR,KAAKF,YAAYY,EAAE,0BAG7CV,KAAKH,qBAAqBY,UAAU,UAAW,KAAMgR,GACrDzR,KAAKqG,UAAU1F,OACjB,GA3CG,CAEGO,W,0CACAlB,KAAKC,KAAKwL,WAAa,GAAcM,MACvC/L,KAAKgM,UAET,G,CAEMA,W,0CACJhM,KAAKuL,SAAU,EACf,MAAM0F,QACEjR,KAAKuR,sBAAsBb,sBAC/B1Q,KAAKC,KAAK0Q,iBACV3Q,KAAKC,KAAK8F,gBAEd/F,KAAKsK,UAAUoH,WAAW,CAAE3M,KAAMkM,EAAelM,OACjD/E,KAAKuL,SAAU,CACjB,G,CA4BQiG,wBACN,MAAMX,EAAqB,IAAIX,GAG/B,OAFAW,EAAmB9K,eAAiB/F,KAAKC,KAAK8F,eAC9C8K,EAAmB9L,KAAO/E,KAAKsK,UAAU/J,MAAMwE,KACxC8L,CACT,CAEIvK,YACF,OAAOtG,KAAKC,KAAKwL,YAAc,GAAcC,IAAM,oBAAsB,oBAC3E,E,kCAnEW4F,IAA6B,mBAS9B,OAAW,oC,oBATVA,GAA6B,wkBCzB1C,kBACE,wCACE,6BAA6B,S,gBAAkB,QAC/C,mCACE,6CAGA,+CAMF,2BACA,qCACE,0CACE,U,iBACF,QACA,0CACE,U,iBACF,QACF,2BACF,yBACF,uBACA,gB,MAxBM,+BAAuB,sBAEI,mCAErB,iCAGA,kCASJ,2DAGA,8D,iOCJD,MAAMK,GAUEC,YAAQrR,GACnBP,KAAK6R,UAAW,SAAsBtR,EACxC,CAUAf,YAAoBsS,GAAA,KAAAA,MAAAA,CAAwB,CAE5C5Q,WACMlB,KAAK6R,WAAa7R,KAAK0C,UACzB1C,KAAK6B,WAET,CAEmCkQ,eACjC,GAAK/R,KAAK0C,SAGV,MAA+B,QAAxB1C,KAAK4E,KAAKoN,UAAsB,YAAc,YACvD,CAEUnQ,YACR,GAAI7B,KAAK8R,MAAMG,WAAY,CACzB,MAAMD,EAAYhS,KAAK0C,UAA+B,QAAnB1C,KAAKgS,UAAsB,OAAS,MACvEhS,KAAK8R,MAAMG,WAAWrN,KAAO,CAAEsN,OAAQlS,KAAKmS,YAAaH,UAAWA,EAAWI,GAAIpS,KAAKoS,G,CAE5F,CAEYxN,W,MACV,OAA4B,QAArB,EAAA5E,KAAK8R,MAAMG,kBAAU,eAAErN,IAChC,CAEIlC,e,MACF,OAAgB,QAAT,EAAA1C,KAAK4E,YAAI,eAAEsN,UAAWlS,KAAKmS,WACpC,CAEIH,gB,MACF,OAAgB,QAAT,EAAAhS,KAAK4E,YAAI,eAAEoN,SACpB,CAEIK,WACF,OAAKrS,KAAK0C,SAGgB,QAAnB1C,KAAKgS,UAAsB,eAAiB,iBAF1C,iBAGX,CAEI3Q,gBACF,MAAO,CACL,WACA,eAGA,YACA,eAGA,YACA,kBACA,aACA,gBACA,wBACA,wBAEA,oBACA,iBACA,wBACA,gCACA,8BACA,2CACA,yBACA,uCACA,mCAOA,cACA,yBACA,kBACA,qBACA,yBACA,uBACA,uBACA,iBACA,6BACA,wBAEJ,E,kCA1GWsQ,IAAiB,c,oBAAjBA,GAAiB,+E,iQAN1B,sCAA6D,iCAAS,EAAA9P,WAAW,IAC/E,6BACA,mCACF,0BACF,iB,MAJU,sCAAsB,iCAEL,iC,4ICAtB,MAAMyQ,GAJb,cAKY,KAAAD,KAAO,I,oCADNC,GAAgB,E,oBAAhBA,GAAgB,gD,sDAAA,4P,UCX7B,iBAGE,iCACE,wCACA,kCACE,6BACF,0BACA,iCACE,iCACF,2BACF,yBACA,mCACE,+BACF,yBACF,uBACA,gB,MAZc,8B,8ECJd,iBACE,+BACF,sB,wBAGE,wBACE,8BAA2B,S,gBAAkC,QAC7D,8BAAiC,S,gBAAyC,QAC5E,yB,MAF6B,iDACM,wD,0CAEnC,wBACE,8BAA2B,S,gBAAkC,QAC7D,8BAAiC,S,gBAAoC,QACrE,wCAKE,2DAAS,QAAAC,eAAA,OAAqB,IAE9B,sCACA,U,iBACF,QACF,wB,OAZ6B,iDACM,mDAS/B,4D,2BAhBN,SACE,kDAIA,kDAcF,uB,qBAlBiB,+BAIA,+B,2CAyDP,qBAA8B,+EAAS,QAAAC,gBAAA,WAA+B,IACpE,SACF,O,mCADE,sD,4BAEF,eAAmB,SAAiB,S,+BAAjB,sB,4BAIrB,mBAOE,S,oBACF,S,yBAHE,sBAEA,gE,yBAEF,mBACG,gBACA,S,gBAAyB,S,MAAzB,wC,0CAgBH,oBAGE,+EAAS,QAAAA,gBAAA,WAA+B,IAGxC,wCACA,S,gBACF,O,OADE,oE,0CAEF,oBAGE,+EAAS,QAAAC,oBAAA,aAAqC,IAG9C,wCACA,S,gBACF,O,OADE,wE,0CAEF,oBAGE,+EAAS,QAAAC,qBAAA,WAAoC,IAG7C,wCACA,S,gBACF,O,OADE,yE,0CAEF,oBAGE,+EAAS,QAAAC,oBAAA,aAAqC,IAG9C,wCACA,S,gBACF,O,OADE,uE,0CAEF,oBAGE,+EAAS,QAAAC,mBAAA,UAAiC,IAG1C,uCACA,0CAA6B,S,gBAE3B,QACJ,6B,0BAH+B,qE,2CAxFnC,iBACE,qCACE,0CAEE,yEAAU,MAAAC,EAAS,EAAAC,UAAA,aAA8B,KAAI,IAFvD,QAKF,4BACA,qCACE,wCACE,0CACA,sDAGA,kDACF,+BACF,6BACA,uCACE,kDASA,kDAIF,6BACA,uCAAyC,U,iBAA2C,QACpF,uCACE,6C,kCAQF,6BAEA,oDACE,mDASA,mDASA,mDASA,mDASA,mDAWF,6BACF,0B,oDAxFM,uDAMyE,gCAGnE,+BAKc,qCAQf,6CAKgC,qDAMrC,+CAA0B,uBAC1B,2CAUC,yCASA,gCASA,gCASA,+BASA,8B,4BArFP,4C,iBA8FF,iB,yBA9FgC,sC,2CA9BlC,wBACE,4BACE,gCACE,qCACE,0CACE,6CAEE,4DAAU,MAAAD,EAAS,EAAAE,YAAc,KAAI,IAFvC,QAMA,U,iBACF,QACF,6BACA,uCAAuC,U,iBAAmB,QAC1D,uCAAuD,U,iBAAsB,QAC7E,uCAAuC,U,iBAAyB,QAChE,uCACE,6C,kCAQF,6BACF,2BACF,yBACA,mDAgGF,sB,oCA7HwC,iCAQ5B,qEAAmD,4DAGrD,+DAGmC,oCACJ,oCAAoB,uCAChB,0CAMnC,+CAA0B,uBAC1B,0C,2CAyGR,oBAAkC,0DAAS,QAAAC,qBAAoB,IAC7D,kCACA,kCAAM,S,gBAA8B,QACtC,uB,OADQ,6C,CC5IH,MAAMC,GAIPvG,cACF,OAAO1M,KAAKkT,QACd,CACIxG,YAAQA,GACV1M,KAAK8S,UAAUK,QACfnT,KAAKkT,SAAWxG,EAChB1M,KAAKiS,WAAWhS,KAAOyM,CACzB,CAII0G,WAAOA,GACTpT,KAAKiS,WAAWtN,OAASyO,CAC3B,CAgBA5T,YACUM,EACAD,GADA,KAAAC,YAAAA,EACA,KAAAD,qBAAAA,EAlCA,KAAAoS,WAAa,IAAI,KAoBjB,KAAAO,gBAAkB,IAAI,MACtB,KAAAC,oBAAsB,IAAI,MAC1B,KAAAC,qBAAuB,IAAI,MAC3B,KAAAW,qBAAuB,IAAI,MAC3B,KAAAT,mBAAqB,IAAI,MACzB,KAAAL,eAAiB,IAAI,MACrB,KAAAI,oBAAsB,IAAI,MAE5B,KAAA7D,SAA0B,IAAI/G,GAAA,EAEtC,KAAA+K,UAAY,IAAI,OAAuB,EAAM,IAsD7C,KAAAQ,aAAe,CAACzO,EAAmBC,K,MACjC,MAAMyO,EAAY1O,EAAEuE,SACdoK,EAAY1O,EAAEsE,SACpB,OAAImK,EAAU5M,SAAW6M,EAAU7M,OAC1B4M,EAAU5M,OAAS6M,EAAU7M,OAGnB,QAAZ,EAAA4M,EAAU,UAAE,eAAExO,KAAKC,cAAcwO,EAAU,GAAGzO,KAAK,EAvD1D/E,KAAK8S,UAAUW,QACZjR,MAAK,EAAAkR,GAAA,GAAU1T,KAAK8O,WACpB6E,WAAWC,GAAM5T,KAAKqT,qBAAqBvP,KAAK9D,KAAK8S,UAAUe,WACpE,CAEAtE,cACEvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,CAEAsE,gBAGE,OAFoB9T,KAAK8S,UAAUe,SAASlN,SAC5B3G,KAAK0M,QAAQ/F,MAE/B,CAEAoM,YACE/S,KAAK8T,gBACD9T,KAAK8S,UAAUK,QACfnT,KAAK8S,UAAUiB,UAAU/T,KAAK0M,QAAQjK,KAAKwH,GAAMA,EAAE1E,KACzD,CAEAyO,oBACMhU,KAAK8S,UAAUe,SAASlN,QAAU,EACpC3G,KAAK4S,mBAAmB9O,KACtB9D,KAAK0M,QAAQ/H,QAAQvE,GAAWJ,KAAK8S,UAAUmB,WAAW7T,EAAOmF,OAGnEvF,KAAKH,qBAAqBY,UACxB,QACAT,KAAKF,YAAYY,EAAE,iBACnBV,KAAKF,YAAYY,EAAE,mBAGzB,CAEAsS,qBACMhT,KAAK8S,UAAUe,SAASlN,QAAU,EACpC3G,KAAK2S,oBAAoB7O,KAAK9D,KAAK8S,UAAUe,UAE7C7T,KAAKH,qBAAqBY,UACxB,QACAT,KAAKF,YAAYY,EAAE,iBACnBV,KAAKF,YAAYY,EAAE,mBAGzB,CAeAwT,sBACEnP,EACAlF,EACAC,GAEAD,EAAqBsU,gBAAgBpP,GACrClF,EAAqBY,UACnB,UACA,KACAX,EAAYY,EAAE,cAAeZ,EAAYY,EAAE,SAE/C,CAKAwT,uBACE3O,EACA1F,EACAC,EACA0O,GAEA,MAAMjO,EAAQiO,EAAcvB,cAAc1H,GAAI6J,MAAMhP,GAAWA,EAAOG,QACtE0S,GAAqBmB,qBAAqB7T,EAAOV,GAAsBuP,MAAK,KAC1EvP,EAAqBY,UACnB,UACA,KACAX,EAAYY,EAAE,cAAeZ,EAAYY,EAAE,UAC5C,GAEL,CAKQwT,4BACNG,EACAxU,GAEA,OAAIA,EAAqByU,WAChBC,UAAUC,UAAU/M,MAAM,CAC/B,IAAIgN,cAAc,CAChB,aAAgBJ,MAKfA,EAAKjF,MAAM1O,GAAMb,EAAqBsU,gBAAgBzT,IAC/D,E,kCAlJWuS,IAAoB,0B,oBAApBA,GAAoB,6yEDfjC,wBAIA,iDAqBA,gDA+HA,2CACE,2CAIA,sCAAkC,iCAAS,EAAAe,mBAAmB,IAC5D,mCACA,sCAA6B,U,iBAA4B,QAC3D,yBACF,uBACA,gB,MAlKM,yBAIS,kEAqBH,kEAgIwD,+BAMnC,4C,0PE1IzB,gB,sBAAgB,uB,4BAPlB,iB,gBAOE,6CACA,S,gBACF,S,oCAJE,6CAEI,8BACJ,qE,2CAOA,SACE,6CAKE,mD,oBACF,gCAEA,sDACE,8CACE,gDAIE,yD,qBACA,kDACE,kDAAM,U,iBAAyB,QAC/B,sDACE,U,qBACF,QACF,uCACF,qCAEA,4DAEA,gDACE,gDACA,U,iBACF,QACA,8CACE,gDACA,U,iBACF,QACA,8CACE,gDACA,U,iBACF,QAEA,4DAEA,qDAAkC,2DAAS,QAAAU,OAAM,IAC/C,gDACA,U,iBACF,QACA,mDAAkC,2DAAS,QAAAC,SAAQ,IACjD,gDACA,U,iBACF,QACF,mCACF,iCACF,8B,mCAhDI,sCAGY,8BAAqB,sBASjB,uCAA2B,eAE/B,0CAEJ,+EASJ,wFAIA,+EAIA,+EAOA,+EAIA,6E,iMA5EhB,oBAQE,iCACE,mCACE,6BACA,uCACE,mCACF,6BACA,6CAUF,2BACA,qCACE,uCACE,mCACA,oDACA,2D,kBAoDF,6BACA,2CAKE,mCACF,6BACF,2BACF,yBACA,uCAKE,+BACF,yBACF,wB,wDA/FE,qDAQyB,+DAIlB,+CAcc,+CAwDf,+DASJ,8D,kHClFG,MAAMC,GAcXpV,YACU+E,EACAsQ,EACAC,GAFA,KAAAvQ,MAAAA,EACA,KAAAsQ,aAAAA,EACA,KAAAC,iBAAAA,EAER9U,KAAK+U,WAAa/U,KAAKuE,MAAMtE,KAAKuC,MAChC,EAAAC,EAAA,IAAK2C,IACI,CACL4P,QAAS5P,EAAO4P,aAKtBhV,KAAKiV,UAAW,EAAA/P,EAAA,GAAc,CAC5BlF,KAAK6U,aAAaK,eAClBlV,KAAK6U,aAAaM,YACjB3S,MACD,EAAAC,EAAA,IAAI,EAAE2S,EAAeC,M,MACnB,OAA8B,QAAvB,EAAAA,EAASD,UAAc,eAAEE,OAAO,IAG7C,CAEUZ,OACR1U,KAAK8U,iBAAiBzM,KAAK,YAC7B,CAEUsM,SACR3U,KAAK8U,iBAAiBzM,KAAK,SAC7B,E,kCA3CWuM,IAAe,sC,oBAAfA,GAAe,gF,2EAAA,qyD,UDZ5B,6B,iBAmGA,e,KAlGG,qC,yGEuBI,MAAMW,GAIX/V,YAAoB+E,EAA+B8F,GAA/B,KAAA9F,MAAAA,EAA+B,KAAA8F,cAAAA,EAF3C,KAAAyE,SAA0B,IAAI/G,GAAA,CAE4C,CAElF7G,WACElB,KAAKuE,MAAMa,OAAO5C,MAAK,EAAAkR,GAAA,GAAU1T,KAAK8O,WAAW6E,WAAWvO,IAC1DpF,KAAK+F,eAAiBX,EAAOW,cAAc,GAE/C,CAEAwJ,cACEvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,CAEAgG,mBACExV,KAAKqK,cAAc3G,KAA+BkL,GAAuB,CACvE3O,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,SAGjB,CAEAgK,oBACEzV,KAAKqK,cAAc3G,KAAgC2H,GAAwB,CACzEpL,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,SAGjB,CAEAiK,2BACE1V,KAAKqK,cAAc3G,KAAuC4N,GAA+B,CACvFrR,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,SAGjB,E,uBClEF,iBACE,+BACF,sB,0CAEA,wBACE,2BAA2B,S,gBAAmC,QAC9D,4BAAiC,S,gBAAqC,QACtE,sCAKE,0DAAS,QAAAkK,gBAAA,OAAsB,IAE/B,oCACA,U,iBACF,QACF,sB,OAZ6B,kDACM,oDAS/B,yD,mCDSSJ,IAAgB,0B,oBAAhBA,GAAgB,qb,GAAA,MExB7B,oBAOE,S,gBAAmB,eACrB,sBAEA,2CACE,oCAAkC,iCAAS,EAAAE,mBAAmB,IAC5D,mCACA,U,iBACF,QACA,sCAAkC,iCAAS,EAAAD,kBAAkB,IAC3D,mCACA,U,iBACF,QACA,sCAAkC,iCAAS,EAAAE,0BAA0B,IACnE,mCACA,U,iBACF,QACF,uBACA,gB,sBAnBE,6BAEA,4CAME,uDAIA,qDAIA,6D,2JD2BA,iBACE,qCACE,0CAEE,yEAAU,MAAA7C,EAAS,EAAAC,UAAA,aAA+B,KAAI,IAFxD,QAKF,4BACA,qCACE,wCACE,0CACA,0CAAkF,UAEhF,QACJ,+BACF,6BACA,uCAAyC,U,iBAA4C,QACrF,uCACE,6C,kCAQF,6BACA,kDACE,4CAAkC,uEAAS,QAAA8C,iBAAA,WAAiC,IAC1E,0CACA,U,iBACF,QACA,wCACE,0CACA,U,iBACF,QACA,4CAAkC,uEAAS,QAAAC,cAAA,MAAyB,IAClE,yCACA,4CAA6B,U,iBAA4B,QAC3D,+BACF,6BACF,0B,oDApCM,uDAMW,gEAAuE,uBAK7C,qDAMrC,sCAAiC,gCAEjC,2CAMA,wEAEa,gEAEb,uEAI6B,4C,4BAtCnC,4C,iBA0CF,iB,yBA1CiC,sC,2CA7BnC,wBACE,4BACE,gCACE,qCACE,0CACE,6CAEE,4DAAU,MAAAhD,EAAS,EAAAE,YAAc,KAAI,IAFvC,QAMA,U,iBACF,QACF,6BACA,uCAAuC,U,iBAAmB,QAC1D,uCAAuC,U,iBAAyB,QAChE,uCACE,6C,kCAQF,6BACF,2BACF,yBACA,mDA4CF,sB,oCAxEyC,iCAQ7B,qEAAmD,4DAGrD,8DAGmC,oCACA,0CAMnC,sCAA+B,gCAE/B,0C,EE5BH,MAAM+C,GAIP1M,eACF,OAAOpJ,KAAK+V,SACd,CACI3M,aAASA,GACXpJ,KAAK8S,UAAUK,QACfnT,KAAK+V,UAAY3M,EACjBpJ,KAAKiS,WAAWhS,KAAOmJ,CACzB,CAIIgK,WAAOA,GACTpT,KAAKiS,WAAWtN,OAASyO,CAC3B,CAWA5T,YACUM,EACAD,GADA,KAAAC,YAAAA,EACA,KAAAD,qBAAAA,EA7BA,KAAAoS,WAAa,IAAI,KAkBjB,KAAA2D,iBAAmB,IAAI,MACvB,KAAAI,mBAAqB,IAAI,MACzB,KAAAC,sBAAwB,IAAI,MAC5B,KAAAN,gBAAkB,IAAI,MAExB,KAAA7G,SAA0B,IAAI/G,GAAA,EAEtC,KAAA+K,UAAY,IAAI,OAAuB,EAAM,IAM3C9S,KAAK8S,UAAUW,QACZjR,MAAK,EAAAkR,GAAA,GAAU1T,KAAK8O,WACpB6E,WAAWC,GAAM5T,KAAKiW,sBAAsBnS,KAAK9D,KAAK8S,UAAUe,WACrE,CAEAtE,cACEvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,CAEAsE,gBAGE,OAFoB9T,KAAK8S,UAAUe,SAASlN,SAC5B3G,KAAKoJ,SAASzC,MAEhC,CAEAoM,YACE/S,KAAK8T,gBACD9T,KAAK8S,UAAUK,QACfnT,KAAK8S,UAAUiB,UAAU/T,KAAKoJ,SAAS3G,KAAKwH,GAAMA,EAAE1E,KAC1D,CAEAsQ,cAAc1N,GACZnI,KAAKgW,mBAAmBlS,KAAK9D,KAAKoJ,SAASzE,QAAQyJ,GAAMA,EAAE7I,IAAM4C,IACnE,CAEA+N,qBACMlW,KAAK8S,UAAUe,SAASlN,QAAU,EACpC3G,KAAKgW,mBAAmBlS,KACtB9D,KAAKoJ,SAASzE,QAAQqE,GAAYhJ,KAAK8S,UAAUmB,WAAWjL,EAAQzD,OAGtEvF,KAAKH,qBAAqBY,UACxB,QACAT,KAAKF,YAAYY,EAAE,iBACnBV,KAAKF,YAAYY,EAAE,mBAGzB,E,kCAtEWoV,IAAqB,0B,oBAArBA,GAAqB,kqDFdlC,wBAIA,kDAeA,gDA0EA,2CACE,oCAAkC,iCAAS,EAAAI,oBAAoB,IAC7D,mCACA,sCAA6B,U,iBAA6B,QAC5D,yBACF,uBACA,gB,MAnGM,0BAIS,oEAeH,oEA6EqB,8C,gQG/F/B,+BACC,kBAIE,SAAW,eACb,QACH,e,qBAPiC,yEAE7B,kDAGC,uB,wBAMD,Q,2BADF,eACE,mDACF,yB,gCAFyB,4BACR,oC,wBAGf,Q,2BADF,qBACE,mDACF,yB,8BADiB,oC,kDCNZ,MAAMC,GAPb,cASE,KAAAC,WAAY,EAGZ,KAAA/D,KAAO,iB,CAQPgE,YAAYC,GAIVA,EAAGzS,iBACL,E,0BClBE,iBAIE,oBACA,qCAAuB,aAAM,QAC7B,qCAAqB,SAAiB,QACxC,2B,qBADuB,6B,oCDNdsS,GAAuB,E,oBAAvBA,GAAuB,0J,MAAA,kZ,QDTpC,2CAUA,gCACE,sCAGA,2CAGA,iCAGE,kCAAS,EAAAE,YAAA,EAAmB,IAE5B,6BACF,yBACF,uBACA,gB,MAdc,+BAGmB,gCAK7B,kD,uGGdEE,GAA2C,CAC/CC,MAAO,CAAC,UACR5E,QAAS,CAAC,UACV6E,MAAO,CAAC,WAGJC,GAAuD,CAC3DC,OAAQ,CAAC,oBACTC,QAAS,CAAC,qBACVC,QAAS,CAAC,qBACVC,QAAS,CAAC,sBAOL,MAAMC,GAJb,cAKW,KAAAC,SAAW,EACX,KAAAC,QAA2B,UAC3B,KAAAC,UAAW,EACX,KAAAC,KAAkB,S,CAGvBC,kBACF,OAAOpX,KAAKkX,UAA0B,UAAdlX,KAAKmX,IAC/B,CAEIE,qBACF,MAAO,CAAC,qBAAsB,aAAc,uBAAuBC,OACjEf,GAAYvW,KAAKmX,MAErB,CAEII,qBACF,MAAO,CACL,UACA,oBACA,kBACA,uBACA,aACA,mBACA,mBACA,qBAECD,OAAOf,GAAYvW,KAAKmX,OACxBG,OAAOZ,GAAkB1W,KAAKiX,SACnC,CAEIO,kBACF,OAAOxX,KAAKqU,MAAQrU,KAAKgX,SAAW,GACtC,E,0BClDI,gBACE,S,gBACF,S,qBADE,8F,yBAoBN,gCACF,c,mCDNaD,GAAiB,E,oBAAjBA,GAAiB,udDtB9B,iBACE,iCAQE,0CAQF,wBACF,sBACA,e,MAnBK,kCAED,2CAA0B,sCAI1B,kCAIG,qC,kDGFA,MAAMU,GAJb,cAQY,KAAAC,QAAU,IAAI,MAEd,KAAAhU,MAAO,EACP,KAAAiU,SAAU,C,CAENC,sBACZ,OAAO5X,KAAK6X,MAAMlT,QAAQmT,GAASA,EAAK1B,YAAWzP,MACrD,CAEcqQ,eACZ,OAA6B,IAAtBhX,KAAK6X,MAAMlR,OAAe,EAAK3G,KAAK4X,gBAAkB5X,KAAK6X,MAAMlR,OAAU,GACpF,CAEUxD,SACRnD,KAAK0D,MAAQ1D,KAAK0D,IACpB,E,0BChBA,iBACE,6BACF,yB,qBAFkB,uB,oCDHP+T,GAAmB,E,oBAAnBA,GAAmB,6D,GAAA,K,QACbtB,GAAuB,G,yxBDT1C,uBAA0E,kCAAU,EAAAhT,QAAQ,IAC1F,qCACE,mCACE,mCACA,qCAAwB,UAAW,QACnC,gDACA,+CAGA,qCAKF,2BACF,yBACA,kCACE,6BACF,yBACA,oCACE,yCAA0D,iCAAS,EAAAuU,QAAA,MAAc,IAC/E,U,iBACF,QACF,yBACF,uBAEA,8DAGA,gB,uBAzB8B,yBACQ,8BAAkB,uBAC3C,wCAAwB,cAK7B,iEAUF,0D,kGGfC,MAAMK,GAJb,cAKW,KAAArU,MAAO,EAKN,KAAAL,UAAYC,KAAKC,SAASC,SAAS,IAAIC,UAAU,E,CAEjDN,SACRnD,KAAK0D,MAAQ1D,KAAK0D,IACpB,E,kCAVWqU,GAAgB,E,oBAAhBA,GAAgB,mE,uBAAA,uM,UDN7B,mBACE,oCACE,iCAAK,SAAiD,QACtD,sCAGE,iCAAS,EAAA5U,QAAQ,IAGlB,QACH,wBACA,yCAGF,uBACA,gB,MAVM,uEAEA,8BAA2B,6BAIzB,8B,gYEQJ,iCAGE,2DAAS,QAAA6U,uBAAsB,I,gBAGhC,O,+BAJC,0CAAgC,kC,6EAKlC,iC,4CAEE,0CAAgC,oBAAhC,CAAgC,kC,2CAKlC,iCAGE,2DAAS,QAAAxC,mBAAkB,I,gBAG5B,O,+BAJC,yCAA+B,iC,2CA9BnC,2BAAoE,6DAAW,QAAAyC,iBAAgB,I,gBAC7F,mDAEE,2DAAS,QAAAvC,2BAA0B,I,gBAInC,uCACE,S,gBACA,gBAAkF,U,iBAEhF,QACJ,6BACF,2BACA,4DAOA,4DAOA,4DAOF,wB,wCAnCe,uCAEX,2DAAuC,0CAMrC,oEACkF,qCAMnF,qCAOA,qCAOA,4C,4BAiBD,kBACE,S,gBACA,gBAAiD,S,gBAAsB,QACzE,6B,0BAFE,0HACiD,oC,4BAcnD,kBACE,S,gBACA,gBAAgD,S,gBAAsB,QACxE,6B,0BAFE,wHACgD,oC,2CAjExD,eACE,oDAqCA,mCACE,wCACE,oCAA+D,S,iBAAuB,QACtF,oDACE,oEAAmB,QAAAsC,uBAAsB,GAAzC,CAA0C,gEACtB,QAAAE,gBAAA,GAAuB,GAD3C,CAA0C,kEAEpB,QAAAC,wBAAA,GAA+B,IAEtD,QACD,8CAIF,2BACA,0CACE,sCAA+D,U,iBAAsB,QACrF,mDAEE,wEAAsB,QAAAC,iBAAA,GAAwB,GAA9C,CAA+C,6DAC7B,QAAAC,sBAAqB,GADvC,CAA+C,+DAE5B,QAAAC,eAAA,GAAsB,GAFzC,CAA+C,mEAGxB,QAAAC,eAAA,GAAsB,GAH7C,CAA+C,oEAIvB,QAAAC,gBAAA,GAAuB,IAEhD,QACD,8CAIF,2BACF,yBACF,sB,kCApEgD,wCAuCqB,uCAK7D,4CAEI,8CAMyD,sCAQ7D,0CAEI,4C,yBASV,kCACE,kCACF,wBACF,c,CCfO,MAAMC,GAiBXjZ,YACU+E,EACA6F,EACAoE,EACA+C,EACAlH,EACA7F,EACAqQ,EACAhV,EACAC,GARA,KAAAyE,MAAAA,EACA,KAAA6F,eAAAA,EACA,KAAAoE,cAAAA,EACA,KAAA+C,sBAAAA,EACA,KAAAlH,cAAAA,EACA,KAAA7F,oBAAAA,EACA,KAAAqQ,aAAAA,EACA,KAAAhV,qBAAAA,EACA,KAAAC,YAAAA,EAzBF,KAAAgP,SAA0B,IAAI/G,GAAA,EAC9B,KAAA2Q,UAAY,GAIV,KAAAC,gBAAiB,EACjB,KAAApN,SAAU,CAoBjB,CAEHrK,WACE,MAAM0X,EAAS5Y,KAAKuE,MAAMa,OAAO5C,MAC/B,EAAAC,EAAA,IAAK2L,GAAMA,EAAErI,kBACb,EAAA8S,GAAA,MAGFD,EACGpW,MACC,EAAAC,EAAA,IAAKqW,GAAU9Y,KAAKwE,oBAAoBgB,IAAIsT,MAC5C,EAAApF,GAAA,GAAU1T,KAAK8O,WAEhB6E,WAAWrO,IACVtF,KAAK+F,eAAiBT,EAAIC,GAC1BvF,KAAK+Y,iBAAmBzT,EAAIP,KAC5B/E,KAAKgZ,YAAc1T,EAAIU,QACvBhG,KAAKuL,SAAU,CAAI,IAGvB,MAAM0N,GAAY,EAAA/T,EAAA,GAAc,CAC9B0T,EACA5Y,KAAKoK,eAAepC,SAASxF,MAAK,EAAA0W,GAAA,GAAU,SAC3C1W,MACD,EAAA2W,GAAA,IAAU,EAAEL,KAAW9Y,KAAKoK,eAAe5B,YAAYsQ,MACvD,EAAAM,GAAA,MAGIC,GAAW,EAAAnU,EAAA,GAAc,CAC7B0T,EACA5Y,KAAKwO,cAAcxB,QAAQxK,MAAK,EAAA0W,GAAA,GAAU,OAC1ClZ,KAAKoK,eAAepC,SAASxF,MAAK,EAAA0W,GAAA,GAAU,SAC3C1W,MACD,EAAA2W,GAAA,IAAU,EAAEL,KAAW9Y,KAAKwO,cAAcnB,WAAWyL,MACrD,EAAAM,GAAA,MAGIE,GAAmB,EAAApU,EAAA,GAAc,CACrC0T,EACA5Y,KAAKuR,sBAAsBhB,gBAAgB/N,MAAK,EAAA0W,GAAA,GAAU,SACzD1W,MACD,EAAA2W,GAAA,IAAU,EAAEL,KAAW9Y,KAAKuR,sBAAsBf,mBAAmBsI,MACrE,EAAAM,GAAA,MAGFpZ,KAAKuZ,MAAQX,EAAOpW,MAClB,EAAA2W,GAAA,IAAWL,IACT,EAAA5T,EAAA,GAAc,CAAC+T,EAAWI,EAAUC,IAAmB9W,MACrD,EAAA2W,GAAA,IAAU,EAAQ/P,EAAUsD,EAASqE,KAAqB,0CACxDyI,eAAgBxZ,KAAKyZ,eAAerQ,EAAUpJ,KAAK0Y,WACnDgB,cAAe1Z,KAAKyZ,eAAe/M,EAAS1M,KAAK0Y,WACjDiB,YAAavQ,EACbwQ,WAAYlN,EACZmL,YAAa7X,KAAK6Z,mBAAmBf,EAAO,CAC1CgB,cAAepN,EAAQ/F,OAAS,EAChCqI,aAActC,EAAQ/F,OAAS,EAC/BiF,cAAexC,EAASzC,OAAS,EACjCoT,qBAAsBhJ,EAAgBpK,OAAS,I,UAQzDiS,EACGpW,MACC,EAAA2W,GAAA,IAAU,IAAMnZ,KAAKuZ,MAAM/W,MAAK,EAAAwX,GAAA,GAAK,OACrC,EAAAtG,GAAA,GAAU1T,KAAK8O,WAEhB6E,WAAWsG,IACVja,KAAK2Y,eAAiBuB,OAAOC,OAAOF,EAAKpC,OAAOxJ,UAAS,GACzDrO,KAAKuL,SAAU,CAAK,GAE1B,CAEAgE,cACEvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,CAEQiK,eAAqDW,EAAUzT,GACrE,OAAOyT,EACJxV,MAAK,CAACC,EAAGC,IACD,IAAIuV,KAAKvV,EAAEuC,cAAciT,UAAY,IAAID,KAAKxV,EAAEwC,cAAciT,YAEtEC,MAAM,EAAG5T,EACd,CAEckT,mBACZ9T,EACAyU,G,0CAEA,MAAMC,SAAoBza,KAAK6U,aAAa6F,yBAA2B,CAAC,EAClEC,EAAyBT,OAAOU,YACpCV,OAAOW,QAAQL,GAAU7V,QAAO,EAAEmW,EAAIC,MAAa,IAANA,KAEzCC,EAAe,OAAH,sBAChBlB,eAAe,EACf9K,cAAc,EACdpD,eAAe,EACfmO,sBAAsB,GACnBU,EAAU1U,IACV4U,GAML,OAJA3a,KAAK6U,aAAaoG,qBAAqB,OAAD,wBACjCR,GAAS,CACZ,CAAC1U,GAAiBiV,KAEbA,CACT,G,CAIA9C,gBAAgB/P,GACdnI,KAAKqK,cAAc3G,KAAgC2H,GAAwB,CACzEpL,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,QACXtD,UAAWA,IAGjB,CAEA6P,uBACEhY,KAAKqK,cAAc3G,KAAgC2H,GAAwB,CACzEpL,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,SAGjB,CAEAiK,2BACE1V,KAAKqK,cAAc3G,KAAuC4N,GAA+B,CACvFrR,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,SAGjB,CAEA0M,wBAAwBvU,GACtB5D,KAAKqK,cAAc3G,KAAsCyG,GAA8B,CACrFlK,KAAM,CACJmJ,SAAUxF,IAGhB,CAIA4R,mBACExV,KAAKqK,cAAc3G,KAA+BkL,GAAuB,CACvE3O,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,SAGjB,CAEA6M,eAAepL,GACblN,KAAKqK,cAAc3G,KAA+BkL,GAAuB,CACvE3O,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,QACXyB,SAAUA,IAGhB,CAEAkL,iBAAiBxU,GACf5D,KAAKqK,cAAc3G,KAAqC6K,GAA6B,CACnFtO,KAAM,CACJyM,QAAS9I,IAGf,CAEAyU,sBACErY,KAAKqK,cAAc3G,KAA+BkL,GAAuB,CACvE3O,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,SAGjB,CAEA8M,eAAexT,GACbkO,GAAqBsF,eAAexT,EAAM/E,KAAKH,qBAAsBG,KAAKF,YAC5E,CAEA0Y,gBAAgBjT,GACd0N,GAAqBuF,gBACnBjT,EACAvF,KAAKH,qBACLG,KAAKF,YACLE,KAAKwO,cAET,CAEUyJ,iBACRjY,KAAK2Y,gBAAiB,EACtB3Y,KAAK6Z,mBAAmB7Z,KAAK+F,eAAgB,CAC3C+T,eAAe,EACf9K,cAAc,EACdpD,eAAe,EACfmO,sBAAsB,GAE1B,E,kCA5OWtB,IAAiB,wG,oBAAjBA,GAAiB,+xC,GAAA,MDhE9B,uBACE,uCACF,sBAEA,0C,iBAuEA,2DAKA,gB,sBAhFW,kCAIL,sDAAgC,a,uFECtC,MAAMyC,GAAiB,CACrB,CACEC,KAAM,GACNC,UAAW3C,KAQR,MAAM4C,I,kCAAAA,GAAqB,E,oBAArBA,K,wBAHD,cAAsBH,IACtB,QCAL,MAAMI,I,kCAAAA,GAAc,E,oBAAdA,K,wBAJDta,EAA4Bqa,GAAuBnV,M,gBCVxD,MAAMqV,IAQN,MAAMC,WAAoCD,IAO1C,MAAME,WAA2CF,IAOjD,MAAMG,WAAqCH,IAO3C,MAAMI,WAA4CJ,IAOlD,MAAMK,WAA8CL,IAOpD,MAAMM,IAMN,MAAMC,ICjDN,MAAMC,ICEN,MAAMC,ICAN,MAAMC,WAAiC,KAO5Czc,YAAYyH,GACVC,MAAMD,GACNjH,KAAKuF,GAAKvF,KAAKmH,oBAAoB,MACnCnH,KAAKwH,KAAOxH,KAAKmH,oBAAoB,QACrCnH,KAAKyH,MAAQzH,KAAKmH,oBAAoB,SACtCnH,KAAKoH,aAAepH,KAAKmH,oBAAoB,gBAC7CnH,KAAKqH,aAAerH,KAAKmH,oBAAoB,eAC/C,EAGK,MAAM+U,WAAwCD,GAMnDzc,YAAYyH,GACVC,MAAMD,GACNjH,KAAKmc,mBAAqBnc,KAAKmH,oBAAoB,sBACnDnH,KAAKoc,qBAAuBpc,KAAKmH,oBAAoB,wBACrDnH,KAAKqc,iBAAmBrc,KAAKmH,oBAAoB,oBACjDnH,KAAKsc,OAAStc,KAAKmH,oBAAoB,SACzC,EAGK,MAAMoV,WAA+CN,GAM1Dzc,YAAYyH,GACVC,MAAMD,GACNjH,KAAKmc,mBAAqBnc,KAAKmH,oBAAoB,sBACnDnH,KAAKoc,qBAAuBpc,KAAKmH,oBAAoB,wBACrDnH,KAAKwc,wBAA0Bxc,KAAKmH,oBAAoB,2BACxDnH,KAAKsc,OAAStc,KAAKmH,oBAAoB,SACzC,EAGK,MAAMsV,WAAyCR,GAMpDzc,YAAYyH,GACVC,MAAMD,GACNjH,KAAK0c,QAAU1c,KAAKmH,oBAAoB,WACxCnH,KAAK2c,UAAY3c,KAAKmH,oBAAoB,aAC1CnH,KAAKqc,iBAAmBrc,KAAKmH,oBAAoB,oBACjDnH,KAAK4c,mBAAqB5c,KAAKmH,oBAAoB,qBACrD,EAGK,MAAM0V,WAAgDZ,GAM3Dzc,YAAYyH,GACVC,MAAMD,GACNjH,KAAK0c,QAAU1c,KAAKmH,oBAAoB,WACxCnH,KAAK2c,UAAY3c,KAAKmH,oBAAoB,aAC1CnH,KAAKwc,wBAA0Bxc,KAAKmH,oBAAoB,2BACxDnH,KAAK4c,mBAAqB5c,KAAKmH,oBAAoB,qBACrD,EAGK,MAAM2V,WAAkDb,GAM7Dzc,YAAYyH,GACVC,MAAMD,GACNjH,KAAK2Q,iBAAmB3Q,KAAKmH,oBAAoB,oBACjDnH,KAAK+c,mBAAqB/c,KAAKmH,oBAAoB,sBACnDnH,KAAKqc,iBAAmBrc,KAAKmH,oBAAoB,oBACjDnH,KAAKgd,mBAAqBhd,KAAKmH,oBAAoB,qBACrD,ECnFK,MAAM8V,WAAsC,KAKjDzd,YAAYyH,GACVC,MAAMD,GACN,MAAMiW,EAAqBld,KAAKmH,oBAAoB,sBACpDnH,KAAKkd,mBAAqBA,EAAmBza,KAC1C+J,GAAW,IAAI0P,GAAgC1P,KAElD,MAAM2Q,EAAsBnd,KAAKmH,oBAAoB,uBACrDnH,KAAKmd,oBAAsBA,EAAoB1a,KAC5C+J,GAAW,IAAIiQ,GAAiCjQ,KAEnD,MAAM4Q,EAA+Bpd,KAAKmH,oBAAoB,gCAC9DnH,KAAKod,6BAA+BA,EAA6B3a,KAC9D+J,GAAW,IAAIsQ,GAA0CtQ,IAE9D,ECpBK,MAAM6Q,WAA6C,KAIxD7d,YAAYyH,GACVC,MAAMD,GACN,MAAMiW,EAAqBld,KAAKmH,oBAAoB,sBACpDnH,KAAKkd,mBAAqBA,EAAmBza,KAC1C+J,GAAW,IAAI+P,GAAuC/P,KAEzD,MAAM2Q,EAAsBnd,KAAKmH,oBAAoB,uBACrDnH,KAAKmd,oBAAsBA,EAAoB1a,KAC5C+J,GAAW,IAAIqQ,GAAwCrQ,IAE5D,ECrBK,MAAM8Q,ICAN,MAAMC,ICAN,MAAMC,ICEN,MAAMC,WAAiC,KAM5Cje,YAAYyH,GACVC,MAAMD,GACNjH,KAAKuF,GAAKvF,KAAKmH,oBAAoB,MACnCnH,KAAK+E,KAAO/E,KAAKmH,oBAAoB,QACrCnH,KAAK0d,KAAO1d,KAAKmH,oBAAoB,QACrCnH,KAAK2d,MAAQ3d,KAAKmH,oBAAoB,QACxC,E,2SC4BK,MAAMyW,GAwBXpe,YACUmI,EACAnD,EACEoD,EACAC,GAHF,KAAAF,cAAAA,EACA,KAAAnD,oBAAAA,EACE,KAAAoD,WAAAA,EACA,KAAAC,eAAAA,EA3BJ,KAAAgW,6BAA+B,IAAI9V,GAAA,EACnC,KAAA+V,oCAAsC,IAAI/V,GAAA,EAC1C,KAAAgW,qCAAuC,IAAIhW,GAAA,EAO1C,KAAAiW,4BAA8Bhe,KAAK6d,6BAA6B5V,eAKhE,KAAAgW,mCACPje,KAAK8d,oCAAoC7V,eAKlC,KAAAiW,oCACPle,KAAK+d,qCAAqC9V,cAOzC,CAEHkW,oCACEne,KAAK6d,6BAA6B7a,KAAK,KACzC,CAEAob,2CACEpe,KAAK8d,oCAAoC9a,KAAK,KAChD,CAEMqb,mBACJ1N,EACA5K,G,0CAEA,MAAMqC,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,qBAAuBsI,EAAmB,oBAC1C,MACA,GACA,GAGIlI,EAAU,IAAI,GAAAC,EAAaN,EAAG0U,IACpC,aAAa9c,KAAKse,6CAA6C7V,EAAQxI,KAAM8F,EAC/E,G,CAEMwY,sBACJxY,EACA4K,EACA6N,G,0CAEA,MAAM1V,EAAU9I,KAAKye,gCAAgCD,GAC/CpW,QAAUpI,KAAK4H,WAAWS,KAC9B,OACA,qBAAuBsI,EAAmB,oBAC1C7H,GACA,GACA,GAEIL,EAAU,IAAI,GAAAC,EAAaN,EAAG0U,IAC9B4B,QAAc1e,KAAKse,6CACvB7V,EAAQxI,KACR8F,GAGF,OADA/F,KAAK+d,qCAAqC/a,KAAK0b,GACxCA,CACT,G,CAEMC,yBACJ5Y,EACAoC,G,0CAEA,MAAMC,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,aAAeF,EAAY,mBAC3B,MACA,GACA,GAGIM,EAAU,IAAIwU,GAA8B7U,GAClD,aAAapI,KAAK4e,gCAAgC7Y,EAAgB0C,EACpE,G,CAEMoW,gCACJlO,G,0CAEA,MAAMvI,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,qBAAuBsI,EAAmB,mBAC1C,MACA,GACA,GAGIlI,EAAU,IAAI4U,GAAqCjV,GACzD,aAAapI,KAAK8e,uCAAuCrW,EAC3D,G,CAEMsW,4BACJhZ,EACAoC,EACA6W,G,0CAEA,MAAMlW,EAAU9I,KAAKif,+BAA+BD,GAC9C5W,QAAUpI,KAAK4H,WAAWS,KAC9B,OACA,aAAeF,EAAY,mBAC3BW,GACA,GACA,GAEIL,EAAU,IAAIwU,GAA8B7U,GAC5C6R,QAAaja,KAAK4e,gCAAgC7Y,EAAgB0C,GAExE,OADAzI,KAAK6d,6BAA6B7a,KAAKiX,GAChCA,CACT,G,CAEMiF,mCACJvO,EACAwO,G,0CAEA,MAAMrW,EAAU9I,KAAKof,6CACnBD,GAEI/W,QAAUpI,KAAK4H,WAAWS,KAC9B,OACA,qBAAuBsI,EAAmB,mBAC1C7H,GACA,GACA,GAEIL,EAAU,IAAI4U,GAAqCjV,GACnD6R,QAAaja,KAAK8e,uCAAuCrW,GAE/D,OADAzI,KAAK8d,oCAAoC9a,KAAKiX,GACvCA,CACT,G,CAEMoF,mBAAmBC,G,gDACjBtf,KAAK4H,WAAWS,KAAK,SAAU,oBAAsBiX,EAAgB,MAAM,GAAM,GACvFtf,KAAK6d,6BAA6B7a,KAAK,MACvChD,KAAK8d,oCAAoC9a,KAAK,MAC9ChD,KAAK+d,qCAAqC/a,KAAK,KACjD,G,CAEMuc,mBAAmBC,G,0CACvB,MAAMC,EAAU,IAAInC,GACpBmC,EAAQjY,KAAOgY,EAAqBhY,KACpCiY,EAAQhY,MAAQ+X,EAAqB/X,YAC/BzH,KAAK4H,WAAWS,KACpB,MACA,oBAAsBmX,EAAqBja,GAC3Cka,GACA,GACA,EAEJ,G,CAEMC,+BACJ3Z,EACA4Z,EACAC,G,0CAEA,MAAMC,EAAe7f,KAAKwE,oBAAoBgB,IAAIO,GAClD,GAAI8Z,EAAaC,SAAWD,EAAa7Z,QACvC,OAAO,EAET,MAAM+Z,EAAgBF,EAAavD,OAC7B0D,EAAyBJ,EAC5Bjb,QAAQsb,GAAMA,EAAEX,gBAAkBK,EAAOL,iBACzC3a,QAAQsb,GAAMA,EAAErD,oBAAsBqD,EAAEzY,MAAQyY,EAAExY,QAAOd,OACtDuZ,EAAwBN,EAC3Bjb,QAAQsb,GAAMA,EAAEX,gBAAkBK,EAAOL,iBACzC3a,QAAQsb,GAAMA,EAAE3D,QAAUyD,GAAiBE,EAAEzY,MAAQyY,EAAExY,QAAOd,OAEjE,MAAoB,SAAhBgZ,EAAOjC,MAAmBiC,EAAOrD,QAAUyD,GAA2C,GAA1BC,KAG9C,UAAhBL,EAAOjC,OACPiC,EAAO/C,oBACkB,GAAzBsD,GAC0B,GAA1BF,EAKJ,G,CAEcpB,gCACZ7Y,EACAoa,G,0CAEA,MAAMvW,QAAe5J,KAAK0J,mBAAmB3D,GACvCkU,EAAO,IAAI4B,GAajB,OAXA5B,EAAKiD,mBAAqBiD,EAA8BjD,mBAAmBza,KAAK2d,GACvEpgB,KAAKqgB,kCAAkCD,KAEhDnG,EAAKkD,oBAAsBgD,EAA8BhD,oBAAoB1a,KAAK2d,GACzEpgB,KAAKsgB,mCAAmCF,KAEjDnG,EAAKmD,mCAAqCrT,QAAQC,IAChDmW,EAA8B/C,6BAA6B3a,KAAW2d,GAAO,mCAC3E,aAAapgB,KAAKugB,4CAA4C3W,EAAQwW,EACxE,OAEKnG,CACT,G,CAEQgF,+BACND,G,UAEA,MAAMwB,EAAgB,IAAIxE,GAwB1B,OAtBgD,QAA5C,EAAAgD,EAA0B9B,0BAAkB,eAAEvW,QAAS,IACzD6Z,EAAcC,yBAA2BzB,EAA0B9B,mBAAmBza,KACnF2d,GACQpgB,KAAK0gB,uBAAuBN,EAAGjE,mBAAoBiE,OAKf,QAA7C,EAAApB,EAA0B7B,2BAAmB,eAAExW,QAAS,IAC1D6Z,EAAcG,0BAA4B3B,EAA0B7B,oBAAoB1a,KACrF2d,GACQpgB,KAAK0gB,uBAAuBN,EAAG1D,QAAS0D,OAKK,QAAtD,EAAApB,EAA0B5B,oCAA4B,eAAEzW,QAAS,IACnE6Z,EAAcI,mCACZ5B,EAA0B5B,6BAA6B3a,KAAK2d,GACnDpgB,KAAK0gB,uBAAuBN,EAAGzP,iBAAkByP,MAGvDI,CACT,CAEQH,kCACNpZ,GAEA,OAAO,OAAP,wBACKjH,KAAK6gB,2BAA2B5Z,IAAS,CAC5CoV,iBAAkBpV,EAASoV,iBAC3BF,mBAAoBlV,EAASkV,mBAC7BC,qBAAsBnV,EAASmV,qBAC/BE,OAAQrV,EAASqV,QAErB,CAEQgE,mCACNrZ,GAEA,OAAO,OAAP,wBACKjH,KAAK6gB,2BAA2B5Z,IAAS,CAC5CoV,iBAAkBpV,EAASoV,iBAC3BK,QAASzV,EAASyV,QAClBC,UAAW1V,EAAS0V,UACpBC,mBAAoB3V,EAAS2V,oBAEjC,CAEc2D,4CACZpP,EACAlK,G,0CAEA,OAAO,OAAP,wBACKjH,KAAK6gB,2BAA2B5Z,IAAS,CAC5CoV,iBAAkBpV,EAASoV,iBAC3B1L,iBAAkB1J,EAAS0J,iBAC3BqM,mBAAoB/V,EAAS+V,yBACnBhd,KAAK6H,eAAeiC,cACxB,IAAI,KAAU7C,EAAS+V,oBACvB7L,GAEF,KACJ4L,yBAA0B/c,KAAK6H,eAAeiC,cAC5C,IAAI,KAAU7C,EAAS8V,oBACvB5L,IAGN,G,CAEQiO,6CACND,G,QAEA,MAAMqB,EAAgB,IAAIxE,GAgB1B,OAduD,QAAnD,EAAAmD,EAAiCjC,0BAAkB,eAAEvW,QAAS,IAChE6Z,EAAcC,yBACZtB,EAAiCjC,mBAAmBza,KAAK2d,GAChDpgB,KAAK0gB,uBAAuBN,EAAGjE,mBAAoBiE,OAIR,QAApD,EAAAjB,EAAiChC,2BAAmB,eAAExW,QAAS,IACjE6Z,EAAcG,0BACZxB,EAAiChC,oBAAoB1a,KAAK2d,GACjDpgB,KAAK0gB,uBAAuBN,EAAG1D,QAAS0D,MAI9CI,CACT,CAEc1B,uCACZgC,G,0CAEA,MAAM7G,EAAO,IAAI6B,GASjB,OARA7B,EAAKiD,mBAAqB4D,EAAqC5D,mBAAmBza,KAAK2d,GAC9EpgB,KAAK+gB,yCAAyCX,KAEvDnG,EAAKkD,oBAAsB2D,EAAqC3D,oBAAoB1a,KACjF2d,GACQpgB,KAAKghB,0CAA0CZ,KAGnDnG,CACT,G,CAEQ8G,yCACN9Z,GAEA,OAAO,OAAP,wBACKjH,KAAK6gB,2BAA2B5Z,IAAS,CAC5CuV,wBAAyBvV,EAASuV,wBAClCL,mBAAoBlV,EAASkV,mBAC7BC,qBAAsBnV,EAASmV,qBAC/BE,OAAQrV,EAASqV,QAErB,CAEQ0E,0CACN/Z,GAEA,OAAO,OAAP,wBACKjH,KAAK6gB,2BAA2B5Z,IAAS,CAC5CuV,wBAAyBvV,EAASuV,wBAClCE,QAASzV,EAASyV,QAClBC,UAAW1V,EAAS0V,UACpBC,mBAAoB3V,EAAS2V,oBAEjC,CAEMqE,2BAA2Blb,G,0CAC/B,MAAMqC,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,kBAAoBtC,EAAiB,6CACrC,MACA,GACA,GAEI0C,EAAU,IAAI,GAAAC,EAAaN,EAAGqV,IACpC,aAAazd,KAAKkhB,4BAA4Bnb,EAAgB0C,EAAQxI,KACxE,G,CAEMkhB,oCAAoCpb,G,0CACxC,MAAMqC,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,kBAAoBtC,EAAiB,uDACrC,MACA,GACA,GAEI0C,EAAU,IAAI,GAAAC,EAAaN,EAAGqV,IACpC,aAAazd,KAAKkhB,4BAA4Bnb,EAAgB0C,EAAQxI,KACxE,G,CAEMmhB,6BAA6Brb,G,0CACjC,MAAMqC,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,kBAAoBtC,EAAiB,+CACrC,MACA,GACA,GAEI0C,EAAU,IAAI,GAAAC,EAAaN,EAAGqV,IACpC,aAAazd,KAAKkhB,4BAA4Bnb,EAAgB0C,EAAQxI,KACxE,G,CAEgByJ,mBAAmB3D,G,0CACjC,aAAa/F,KAAK2H,cAAcgC,UAAU5D,EAC5C,G,CAEU2a,uBACRW,EACApH,GAOA,MAAMnR,EAAU,IAAIyU,GAIpB,OAHAzU,EAAQuY,UAAYA,EACpBvY,EAAQtB,KAAOyS,EAAKzS,KACpBsB,EAAQrB,MAAQwS,EAAKxS,MACdqB,CACT,CAEU+X,2BACR5Z,GAOA,MAAO,CACL1B,GAAI0B,EAAS1B,GACbiC,KAAMP,EAASO,KACfC,MAAOR,EAASQ,MAChBL,aAAcH,EAASG,aACvBC,aAAcJ,EAASI,aAE3B,CAEc6Z,4BACZnb,EACA0C,G,0CAEA,MAAMmB,QAAe5J,KAAK0J,mBAAmB3D,GAC7C,aAAagE,QAAQC,IACnBvB,EAAQhG,KAAW2F,GAAM,mCACvB,MAAM6R,EAAO,IAAI8B,GAUjB,OATA9B,EAAK1U,GAAK6C,EAAE7C,GACZ0U,EAAKyD,KAAOtV,EAAEsV,KACdzD,EAAK0D,MAAQvV,EAAEuV,MAEA,mBAAXvV,EAAEsV,MAAwC,YAAXtV,EAAEsV,KACnCzD,EAAKlV,WAAa/E,KAAK6H,eAAeiC,cAAc,IAAI,KAAU1B,EAAErD,MAAO6E,GAE3EqQ,EAAKlV,KAAOqD,EAAErD,KAETkV,CACT,MAEJ,G,CAEQwE,gCACND,GAEA,OAAOA,EAAS/b,KAAK2d,IACnB,MAAMtX,EAAU,IAAI0U,GAIpB,OAHA1U,EAAQwY,UAAYlB,EAAG/D,iBACvBvT,EAAQtB,KAAO4Y,EAAG5Y,KAClBsB,EAAQrB,MAAQ2Y,EAAG3Y,MACZqB,CAAO,GAElB,CAEcwV,6CACZiD,EACAxb,G,0CAEA,MAAM6D,QAAe5J,KAAK0J,mBAAmB3D,GAC7C,aAAagE,QAAQC,IACnBuX,EAAU9e,KAAWwE,GAAwD,mCAC3E,MAAMgT,EAAO,IAAI2B,GAoBjB,OAnBA3B,EAAK1U,GAAK0B,EAAS1B,GACnB0U,EAAKzS,KAAOP,EAASO,KACrByS,EAAKxS,MAAQR,EAASQ,MACtBwS,EAAK7S,aAAeH,EAASG,aAC7B6S,EAAK5S,aAAeJ,EAASI,aAC7B4S,EAAKtJ,iBAAmB1J,EAAS0J,iBACjCsJ,EAAKoC,iBAAmBpV,EAASoV,iBACjCpC,EAAK8C,mBAAqB9V,EAAS8V,yBACzB/c,KAAK6H,eAAeiC,cACxB,IAAI,KAAU7C,EAAS8V,oBACvBnT,GAEF,KACJqQ,EAAK+C,mBAAqB/V,EAAS+V,yBACzBhd,KAAK6H,eAAeiC,cACxB,IAAI,KAAU7C,EAAS+V,oBACvBpT,GAEF,KACGqQ,CACT,MAEJ,G,oCA3eW2D,IAAmB,kD,sBAAnBA,GAAmB,QAAnBA,GAAmB,gBAFlB,S,+YCPF,6BAIE,iDAAiB,iFAAU,QAAA1U,OAAA,YAA0B,IACnD,mDACE,S,gBACF,QACA,mDACE,S,iBACF,QACF,qCACF,kC,mCARyD,oCAC7B,8CACtB,iFAE2B,2CAC3B,sF,yBAKJ,gBAA4C,S,gBAAsB,S,MAAtB,qC,wBAC5C,gBAA4C,S,gBAAuB,S,MAAvB,sC,wBAC5C,gBAAoC,S,gBAA2B,S,MAA3B,0C,2BAFpC,sDACA,sDACA,sDACF,2B,+BAHS,0CACA,0CACA,sC,4BAtBb,iBACE,yCACE,0CACF,gCACA,yCAA4C,SAAc,QAC1D,yCACE,iEAaA,wEAKF,iCACA,2CACE,iD,kCASF,iCACF,gC,gDAlCO,+CAEuC,uBAGvC,iCAAmB,cA0BpB,wCAFA,oCAA8B,mC,4BAhCtC,SACE,gDAqCF,6B,2BArC6B,2B,4BAD7B,qDAuCF,mB,oDAvCiB,kCAAuB,a,4BAT1C,qBACE,6BACE,kCACE,sCAAwB,SAAiB,QACzC,sCAAY,U,iBAA0B,QACxC,6BACF,2BAEA,sDAyCF,0B,qBA9C8B,8BACZ,yC,4BAiDlB,kCACE,SACF,QACF,e,qBAFI,8C,yBAKF,kCACE,kCACF,wBACF,c,CCzCO,MAAMsY,GAoBUC,SAAKlhB,GACxBP,KAAK0hB,MAAM1e,KAAKzC,EAClB,CAqDAf,YAAoBmiB,EAAkDpd,GAAlD,KAAAod,oBAAAA,EAAkD,KAAApd,MAAAA,EAlE5D,KAAAqd,uBAAyB,IAAI,MAC7B,KAAAC,qBAAuB,IAAI,MAC3B,KAAAC,qBAAuB,IAAI,MAQ3B,KAAAJ,MAAQ,IAAI3Z,GAAA,EAKd,KAAAga,UAAY,GACV,KAAAzX,UAAY,IAAI,MAAU,CAClC0X,YAAa,IAAI,MAAY,GAAI,CAAC,eAAqB,gBAAqBhiB,KAAK+hB,eAEzE,KAAAxW,SAAU,EAEV,KAAA0W,cAA6C,EAAA/c,EAAA,GAAc,CACnElF,KAAK0hB,MACL1hB,KAAKuE,MAAMa,SACV5C,MACD,EAAA2W,GAAA,IAAU,EAAEsI,EAAMrc,KAChBpF,KAAKkiB,qBAAqB9c,EAAOW,gBAAgBqJ,MAAM+S,GACrDA,EACGxd,QAAQyd,IAAOX,EAAKY,MAAMC,GAAQA,EAAI/c,KAAO6c,EAAE7c,OAC/C9C,KAAK8f,IACJ,IAAIlQ,EACAmQ,EAAWD,EAAYxd,KACvB0d,EAAYF,EAAYxd,KAgB5B,MAfyB,SAArBwd,EAAY7E,MACdrL,EAAOmP,GAAwBkB,SAC3B,wBAAyBH,EAAYxd,OACvCyd,EAAWD,EAAY5E,MACvB8E,EAAYF,EAAY5E,OAExB6E,EAAW,GAAGD,EAAYxd,SAASwd,EAAY5E,UAEnB,UAArB4E,EAAY7E,KACrBrL,EAAOmP,GAAwBmB,UACD,mBAArBJ,EAAY7E,KACrBrL,EAAOmP,GAAwBoB,mBACD,YAArBL,EAAY7E,OACrBrL,EAAOmP,GAAwBqB,aAE1B,CACLxQ,KAAMA,EACN9M,GAAIgd,EAAYhd,GAChBkd,UAAWA,EACXD,SAAUA,EACX,SAIT,EAAA/f,EAAA,IAAKqgB,GAAgBA,EAAYle,MAAK,CAACC,EAAGC,IAAMD,EAAE2d,SAASxd,cAAcF,EAAE0d,eAC3E,EAAAO,GAAA,IAAI,KACF/iB,KAAKuL,SAAU,EACfvL,KAAKsK,UAAU0Y,QACfhjB,KAAKsK,UAAUgF,QAAQ,KAEzB,EAAA8J,GAAA,MASF,KAAA/Y,OAAS,IAAY,mCAEnB,GADAL,KAAKsK,UAAUG,oBACXzK,KAAKsK,UAAUI,QAQnB,OALA1K,KAAKsK,UAAU+E,UACfrP,KAAKuL,SAAU,EAEfvL,KAAK4hB,uBAAuB9d,KAAK9D,KAAKsK,UAAU/J,MAAMyhB,cAE/C,EAAAiB,GAAA,GAAejjB,KAAKiiB,aAC7B,IAaA,KAAA9Y,OAAUmZ,GAA+B,IAAY,mCAInD,OAHAtiB,KAAKuL,SAAU,EACfvL,KAAKsK,UAAU+E,UACfrP,KAAK6hB,qBAAqB/d,KAAKwe,IACxB,EAAAW,GAAA,GAAejjB,KAAKiiB,aAC7B,GAnC8F,CAE9F/gB,WACElB,KAAKsK,UAAU+E,SACjB,CAeMnG,OAAOnG,EAAauf,G,0CACH,YAAjBvf,EAAOxC,OACT+hB,EAAI9a,MAAO,EACX8a,EAAI7a,OAAQ,GACc,iBAAjB1E,EAAOxC,QAChB+hB,EAAI9a,MAAO,EACX8a,EAAI7a,OAAQ,GAEdzH,KAAK8hB,qBAAqBhe,KAAKwe,EACjC,G,CASQJ,qBAAqBnc,GAC3B,OAAQ/F,KAAKkjB,aACX,IAAK,SACH,OAAOljB,KAAK2hB,oBAAoBV,2BAA2Blb,GAC7D,IAAK,kBACH,OAAO/F,KAAK2hB,oBAAoBR,oCAAoCpb,GACtE,IAAK,WACH,OAAO/F,KAAK2hB,oBAAoBP,6BAA6Brb,GAEnE,CAEAmO,yBAAyBiP,GACvB,OAAQA,EAAK9Q,MACX,KAAKmP,GAAwBkB,SAC3B,MAAO,OACT,KAAKlB,GAAwBmB,UAC3B,MAAO,QACT,KAAKnB,GAAwBoB,mBAC3B,MAAO,iBACT,KAAKpB,GAAwBqB,YAC3B,MAAO,UAEb,CAEA3O,+BAA+BoO,GAC7B,MAAMrI,EAAO,IAAIsB,GAIjB,OAHAtB,EAAK1U,GAAK+c,EAAIhD,eACdrF,EAAKzS,KAAO8a,EAAI9a,KAChByS,EAAKxS,MAAQ6a,EAAI7a,MACVwS,CACT,EA7IgB,GAAAyI,SAAW,WACX,GAAAC,UAAY,aACZ,GAAAC,mBAAqB,aACrB,GAAAC,YAAc,iB,kCAJnBrB,IAAuB,wB,oBAAvBA,GAAuB,20C,GAAA,MDtCpC,kBACE,0CACE,uCAAW,SAAW,QACtB,gD,iBAMA,uCAAU,UAAU,QACpB,wCACE,U,iBACF,QACF,yBACF,uBAEA,2BACE,iD,kBAkDF,uBAEA,6DAMA,6DAKA,gB,uBAhFM,+BAAuB,sBAEd,wBAIT,sDAAkC,qBAG1B,uBAER,uDAMQ,4CAAoB,a,idEG3B,MAAM4B,GACX5jB,YACS6G,EACCiF,EACAqW,EACoB1hB,GAHrB,KAAAoG,UAAAA,EACC,KAAAiF,OAAAA,EACA,KAAAqW,oBAAAA,EACoB,KAAA1hB,KAAAA,EAmB9B,KAAAojB,aAAe,IAAY,yCACnBrjB,KAAKsL,OAAOO,SAAS7L,KAAKC,KAAKqjB,aACT,WAAxBtjB,KAAKC,KAAKwL,gBACNzL,KAAK2hB,oBAAoBtC,mBAAmBrf,KAAKC,KAAK0f,OAAOL,gBACnC,UAAvBtf,KAAKC,KAAKwL,kBACbzL,KAAK2hB,oBAAoBpC,mBAC7BiC,GAAwB+B,wBAAwBvjB,KAAKC,KAAK0f,UAG9D3f,KAAKqG,UAAU1F,OACjB,IAEA,KAAA6iB,OAAS,KACe,WAAlBxjB,KAAKC,KAAKyd,KACZ1d,KAAK2hB,oBAAoBxD,oCACE,mBAAlBne,KAAKC,KAAKyd,MACnB1d,KAAK2hB,oBAAoBvD,2CAE3Bpe,KAAKqG,UAAU1F,OAAO,CApCrB,CAEHO,WAEE,KACGlB,KAAKC,KAAKwG,SACVzG,KAAKC,KAAKqG,OACVtG,KAAKC,KAAKwL,WACVzL,KAAKC,KAAKqjB,aACVtjB,KAAKC,KAAK0f,QAGX,MADA3f,KAAKqG,UAAU1F,QACT,IAAIiG,MACR,kFAGN,E,kCAtBWwc,IAA4B,yCAK7B,OAAW,E,oBALVA,GAA4B,uVCpBzC,6BACE,kCAAqB,S,gBAAuB,QAC5C,kCACE,S,gBACF,QACA,kCACE,wCACE,U,iBACF,QACA,wCACE,U,iBACF,QACF,yBACF,uBACA,gB,MAbuB,wCAEnB,0DAGoD,2CAClD,gEAEqD,qCACrD,0D,8WCgBC,MAAMK,GA4CDC,2BAA2B7P,GACnC,MAAMmL,EAA4B,IAAInD,GAuBtC,OAtBAmD,EAA0B9B,mBAAqBrJ,EAC5ClP,QAAQmO,GAAuE,SAAzD0O,GAAwBmC,kBAAkB7Q,KAChErQ,KAAKmhB,IACJ,MAAM3J,EAAO,IAAIuB,GAKjB,OAJAvB,EAAKoC,iBAAmBrc,KAAKmI,UAC7B8R,EAAKkC,mBAAqByH,EAASre,GACnC0U,EAAKzS,MAAO,EACZyS,EAAKxS,OAAQ,EACNwS,CAAI,IAGf+E,EAA0B7B,oBAAsBtJ,EAC7ClP,QAAQmO,GAAuE,UAAzD0O,GAAwBmC,kBAAkB7Q,KAChErQ,KAAKmhB,IACJ,MAAM3J,EAAO,IAAIyB,GAKjB,OAJAzB,EAAKoC,iBAAmBrc,KAAKmI,UAC7B8R,EAAKyC,QAAUkH,EAASre,GACxB0U,EAAKzS,MAAO,EACZyS,EAAKxS,OAAQ,EACNwS,CAAI,IAGRja,KAAK2hB,oBAAoB5C,4BAC9B/e,KAAK+F,eACL/F,KAAKmI,UACL6W,EAEJ,CAEgB6E,yBAAyBlE,G,0CACvC,SACQ3f,KAAK2hB,oBAAoBjC,+BAC7B1f,KAAK+F,eACL4Z,EACA3f,KAAKyhB,MAGPzhB,KAAK8jB,0BAA0BnE,QAIjC,UACQ3f,KAAK2hB,oBAAoBtC,mBAAmBM,EAAOL,e,CACzD,MAAO9e,GACPR,KAAK+jB,kBAAkBC,UAAUxjB,E,CAErC,G,CAEgByjB,yBAAyBtE,G,0CACvC,IACkB,IAAhBA,EAAOnY,OACU,IAAjBmY,EAAOlY,cACAzH,KAAK2hB,oBAAoBjC,+BAC9B1f,KAAK+F,eACL4Z,EACA3f,KAAKyhB,OAGPzhB,KAAKkkB,0BAA0BvE,QAIjC,IACE,aAAa3f,KAAK2hB,oBAAoBpC,mBACpCiC,GAAwB+B,wBAAwB5D,G,CAElD,MAAOnf,GACPR,KAAK+jB,kBAAkBC,UAAUxjB,E,CAErC,G,CAEAhB,YACU+E,EACA8F,EACA0Z,EACApC,GAHA,KAAApd,MAAAA,EACA,KAAA8F,cAAAA,EACA,KAAA0Z,kBAAAA,EACA,KAAApC,oBAAAA,EAxHF,KAAA7S,SAAW,IAAI/G,GAAA,EAKb,KAAA2Z,MACR1hB,KAAK2hB,oBAAoB3D,4BAA4Bxb,MACnD,EAAA0W,GAAA,GAAU,OACV,EAAAC,GAAA,IAAU,IACRnZ,KAAK2hB,oBAAoBhD,yBAAyB3e,KAAK+F,eAAgB/F,KAAKmI,cAE9E,EAAA1F,EAAA,IAAK+b,IACH,MAAMiD,EAAgC,GA0BtC,OAzBAjD,EAAStB,mBAAmBhZ,SAASyb,IACnC8B,EAAKzT,KAAK,CACR0P,KAAM,OACN3Y,KAAM4a,EAAOvD,qBACb7W,GAAIoa,EAAOxD,mBACXmD,eAAgBK,EAAOpa,GACvBiC,KAAMmY,EAAOnY,KACbC,MAAOkY,EAAOlY,MACd6U,OAAQqD,EAAOrD,OACfjK,KAAMmP,GAAwBkB,UAC9B,IAGJlE,EAASrB,oBAAoBjZ,SAASyb,IACpC8B,EAAKzT,KAAK,CACR0P,KAAM,QACN3Y,KAAM4a,EAAOhD,UACbpX,GAAIoa,EAAOjD,QACX4C,eAAgBK,EAAOpa,GACvBiC,KAAMmY,EAAOnY,KACbC,MAAOkY,EAAOlY,MACdmV,mBAAoB+C,EAAO/C,mBAC3BvK,KAAMmP,GAAwBmB,WAC9B,IAEGlB,CAAI,KAEb,EAAArI,GAAA,KAiFD,CAEHlY,WACElB,KAAKuE,MAAMa,OAAO5C,MAAK,EAAAkR,GAAA,GAAU1T,KAAK8O,WAAW6E,WAAWvO,IAC1DpF,KAAK+F,eAAiBX,EAAOW,eAC7B/F,KAAKmI,UAAY/C,EAAO+C,SAAS,IAGnCnI,KAAK0hB,MAAMlf,MAAK,EAAAkR,GAAA,GAAU1T,KAAK8O,WAAW6E,WAAW8N,IACnDzhB,KAAKyhB,KAAOA,CAAI,GAEpB,CAEAlS,cACEvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,CAEcsU,0BAA0BnE,G,0CACtC3f,KAAKqK,cAAc3G,KAAoC0f,GAA8B,CACnFnjB,KAAM,CACJqG,MAAO,qCACPG,QAAS,uCACTgF,UAAW,SACXiS,KAAM,UACN4F,YAAa,CAAC,KAAMtjB,KAAK+F,eAAgB,YACzC4Z,WAGN,G,CAEQuE,0BAA0BvE,GAChC3f,KAAKqK,cAAc3G,KAAoC0f,GAA8B,CACnFnjB,KAAM,CACJqG,MAAO,qCACPG,QAAS,uCACTgF,UAAW,SACXiS,KAAM,UACN4F,YAAa,CAAC,KAAMtjB,KAAK+F,eAAgB,YACzC4Z,WAGN,E,kCApKW8D,IAAsB,gD,oBAAtBA,GAAsB,2QC1BnC,iBACE,+BACE,S,gBACF,QACA,gDAOE,mDAA0B,EAAAC,2BAAA,EAAkC,GAA5D,CAA6D,2CACrC,EAAAG,yBAAA,EAAgC,GADxD,CAA6D,2CAErC,EAAAI,yBAAA,EAAgC,I,mFAE1D,yBACF,uBACA,gB,MAfI,sEAGA,0CAAsB,6BAAtB,CAAsB,6CAAtB,CAAsB,4CAAtB,CAAsB,gE,4ZCJxB,iBACE,sCAAuD,2DAAS,QAAA5L,sBAAqB,IACnF,mCACA,S,gBACF,QACF,uB,OAFI,2D,0CAJN,SACE,wCAMA,6CACE,wEAAsB,QAAAD,iBAAA,GAAwB,GAA9C,CAA+C,6DAC7B,QAAAC,sBAAqB,GADvC,CAA+C,+DAE5B,QAAAC,eAAA,GAAsB,GAFzC,CAA+C,mEAGxB,QAAAC,eAAA,GAAsB,GAH7C,CAA+C,oEAIvB,QAAAC,gBAAA,GAAuB,IAEhD,QACH,qB,wBAdQ,kCAYJ,2B,yBAKF,iCACE,iCACF,wBACF,c,CCKO,MAAM2L,GAMX3kB,YACU+E,EACA6F,EACAoE,EACAnE,EACAxK,EACAC,GALA,KAAAyE,MAAAA,EACA,KAAA6F,eAAAA,EACA,KAAAoE,cAAAA,EACA,KAAAnE,cAAAA,EACA,KAAAxK,qBAAAA,EACA,KAAAC,YAAAA,CACP,CAEHoB,WAEE,MAAMkjB,EAAuBpkB,KAAKoK,eAAepC,SAASxF,MACxD,EAAAmC,GAAA,IAAQyJ,IAAMA,aAAC,EAADA,EAAG7I,MAAOvF,KAAKmI,aAC7B,EAAA+Q,GAAA,GAAU,OAGZlZ,KAAKqZ,SAAWrZ,KAAKwO,cAAcxB,QAAQxK,MACzC,EAAA0W,GAAA,GAAU,OACV,EAAAmL,GAAA,GAAkBrkB,KAAKuE,MAAMa,OAAQgf,IACrC,EAAAjL,GAAA,IAAU,EAAQvF,EAAGxO,KAAY,mCAG/B,OAFApF,KAAK+F,eAAiBX,EAAOW,eAC7B/F,KAAKmI,UAAY/C,EAAO+C,gBACXnI,KAAKuN,qBACpB,MAEJ,CAEcA,sB,0CACZ,aAAavN,KAAKwO,cAAcjB,oBAAoBvN,KAAK+F,eAAgB/F,KAAKmI,UAChF,G,CAEAmQ,eAAepL,GACblN,KAAKqK,cAAc3G,KAA+BkL,GAAuB,CACvE3O,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,QACXyB,SAAUA,IAGhB,CAEAkL,iBAAiBxU,GACf5D,KAAKqK,cAAc3G,KAAqC6K,GAA6B,CACnFtO,KAAM,CACJyM,QAAS9I,IAGf,CAEAyU,sBACErY,KAAKqK,cAAc3G,KAA+BkL,GAAuB,CACvE3O,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,OACXtD,UAAWnI,KAAKmI,YAGtB,CAEAoQ,eAAexT,GACbkO,GAAqBsF,eAAexT,EAAM/E,KAAKH,qBAAsBG,KAAKF,YAC5E,CAEA0Y,gBAAgBjT,GACd0N,GAAqBuF,gBACnBjT,EACAvF,KAAKH,qBACLG,KAAKF,YACLE,KAAKwO,cAET,E,kCA5EW2V,IAAuB,sE,oBAAvBA,GAAuB,ijB,GAAA,MD1BpC,iC,iBAiBA,2DAKA,e,sBAtBe,oCAAuB,a,sWEqB/B,MAAMG,GAyBDZ,2BAA2B7P,GACnC,MAAMmL,EAA4B,IAAInD,GActC,OAbAmD,EAA0B5B,6BAA+BvJ,EACtDlP,QACEmO,GAAuE,mBAAzD0O,GAAwBmC,kBAAkB7Q,KAE1DrQ,KAAKmhB,IACJ,MAAM3J,EAAO,IAAI2B,GAKjB,OAJA3B,EAAKoC,iBAAmBrc,KAAKmI,UAC7B8R,EAAKtJ,iBAAmBiT,EAASre,GACjC0U,EAAKzS,MAAO,EACZyS,EAAKxS,OAAQ,EACNwS,CAAI,IAGRja,KAAK2hB,oBAAoB5C,4BAC9B/e,KAAK+F,eACL/F,KAAKmI,UACL6W,EAEJ,CAEgB6E,yBAAyBlE,G,0CACvC,UACQ3f,KAAK2hB,oBAAoBtC,mBAAmBM,EAAOL,e,CACzD,MAAO9e,GACPR,KAAK+jB,kBAAkBC,UAAUxjB,E,CAErC,G,CAEAhB,YACU+E,EACAwf,EACApC,GAFA,KAAApd,MAAAA,EACA,KAAAwf,kBAAAA,EACA,KAAApC,oBAAAA,EAzDF,KAAA7S,SAAW,IAAI/G,GAAA,EAIb,KAAA2Z,MACR1hB,KAAK2hB,oBAAoB3D,4BAA4Bxb,MACnD,EAAA0W,GAAA,GAAU,OACV,EAAAC,GAAA,IAAU,IACRnZ,KAAK2hB,oBAAoBhD,yBAAyB3e,KAAK+F,eAAgB/F,KAAKmI,cAE9E,EAAA1F,EAAA,IAAK+b,GACHA,EAASpB,6BAA6B3a,KAAKkd,IAAW,CACpDjC,KAAM,iBACN3Y,KAAM4a,EAAO5C,mBACbxX,GAAIoa,EAAOhP,iBACX2O,eAAgBK,EAAOpa,GACvBiC,KAAMmY,EAAOnY,KACbC,MAAOkY,EAAOlY,MACd4K,KAAMmP,GAAwBoB,mBAC9B1O,QAAQ,QAuCb,CAEHhT,WACElB,KAAKuE,MAAMa,OAAO5C,MAAK,EAAAkR,GAAA,GAAU1T,KAAK8O,WAAW6E,WAAWvO,IAC1DpF,KAAK+F,eAAiBX,EAAOW,eAC7B/F,KAAKmI,UAAY/C,EAAO+C,SAAS,GAErC,CAEAoH,cACEvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,E,kCAvEW8U,IAA+B,oC,oBAA/BA,GAA+B,uQCrB5C,iBACE,+BACE,S,gBACF,QACA,gDAOE,mDAA0B,EAAAZ,2BAAA,EAAkC,GAA5D,CAA6D,2CACrC,EAAAG,yBAAA,EAAgC,I,mFAE1D,yBACF,uBACA,gB,MAdI,+EAGA,0CAAsB,sCAAtB,CAAsB,sDAAtB,CAAsB,6CAAtB,CAAsB,wE,ifCCtB,SACE,8CAAmC,S,gBAAqB,QACxD,8CAA6C,S,gBAA8B,QAC7E,2B,MAFgB,oCAAqB,oCACrB,oCAA+B,6C,0CAIjD,oBAKE,2DAAS,QAAAU,iBAAgB,IAGzB,S,gBACF,O,OADE,yD,8FApBJ,uBACE,6CACE,8CAAuD,S,gBAAuB,QAChF,wBACA,6CACE,8CAAoC,U,iBAAsB,QAC1D,uDAIF,yBACA,yCACA,6CAUF,wB,oBAtB+C,sBAE3B,qCAAuC,sCAGzC,qCAAsB,sCACrB,+BAYd,8B,ECAE,MAAMC,GAQXhlB,YACU+E,EACA6F,EACAC,GAFA,KAAA9F,MAAAA,EACA,KAAA6F,eAAAA,EACA,KAAAC,cAAAA,EALF,KAAAyE,SAAW,IAAI/G,GAAA,CAMpB,CAEH7G,WAEE,MAAMkjB,EAAuBpkB,KAAKoK,eAAepC,SAASxF,MACxD,EAAAmC,GAAA,IAAQyJ,IAAMA,aAAC,EAADA,EAAG7I,MAAOvF,KAAKmI,aAC7B,EAAA+Q,GAAA,GAAU,OAGZlZ,KAAKgI,UAAW,EAAA9C,EAAA,GAAc,CAAClF,KAAKuE,MAAMa,OAAQgf,IAAuB5hB,MACvE,EAAA2W,GAAA,IAAU,EAAE/T,EAAQwO,KACX5T,KAAKoK,eAAelC,eAAe9C,EAAO+C,cAIrDnI,KAAKuE,MAAMa,OAAO5C,MAAK,EAAAkR,GAAA,GAAU1T,KAAK8O,WAAW6E,WAAWvO,IAC1DpF,KAAK+F,eAAiBX,EAAOW,eAC7B/F,KAAKmI,UAAY/C,EAAO+C,SAAS,GAErC,CAEAoH,cACEvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,CAEM+U,iB,0CACJvkB,KAAKqK,cAAc3G,KAAgC2H,GAAwB,CACzEpL,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAWL,GAAcW,KACzB5D,UAAWnI,KAAKmI,YAGtB,G,oCA9CWqc,IAAgB,oC,oBAAhBA,GAAgB,ycDlB7B,gC,iBAuBA,uCACA,e,KAxBY,mC,iYEuBL,MAAMC,GAMXjlB,YACU+E,EACA6F,EACAuX,EACAtX,GAHA,KAAA9F,MAAAA,EACA,KAAA6F,eAAAA,EACA,KAAAuX,oBAAAA,EACA,KAAAtX,cAAAA,CACP,CAEHnJ,WACElB,KAAKiZ,WAAY,EAAA/T,EAAA,GAAc,CAC7BlF,KAAKuE,MAAMa,OACXpF,KAAKoK,eAAepC,SAASxF,MAAK,EAAA0W,GAAA,GAAU,OAC5ClZ,KAAK2hB,oBAAoB3D,4BAA4Bxb,MAAK,EAAA0W,GAAA,GAAU,SACnE1W,MACD,EAAA2W,GAAA,IAAU,EAAQ/T,KAAY,mCAE5B,OADApF,KAAK+F,eAAiBX,EAAOW,qBAChB/F,KAAKwI,aACpB,MAEJ,CAEcA,c,0CACZ,aAAaxI,KAAKoK,eAAe5B,YAAYxI,KAAK+F,eACpD,G,CAEAmS,gBAAgB/P,GACdnI,KAAKqK,cAAc3G,KAAgC2H,GAAwB,CACzEpL,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAWL,GAAcW,KACzB5D,UAAWA,IAGjB,CAEA6P,uBACEhY,KAAKqK,cAAc3G,KAAgC2H,GAAwB,CACzEpL,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAWL,GAAcM,MAG/B,CAEAyM,wBAAwBvU,GACtB5D,KAAKqK,cAAc3G,KAAsCyG,GAA8B,CACrFlK,KAAM,CACJmJ,SAAUxF,IAGhB,E,kCAvDW6gB,IAAiB,8C,oBAAjBA,GAAiB,0OCvB9B,qBACE,mCAAwD,wD,gBAAxD,QACA,uCACF,sBACA,4CACE,2CAAmB,EAAAzM,sBAAsB,GAAzC,CAA0C,uCACtB,EAAAE,gBAAA,EAAuB,GAD3C,CAA0C,yCAEpB,EAAAC,wBAAA,EAA+B,I,iBAIvD,uBACA,gB,MAXkB,0DAAuC,oBAOvD,kDAA8B,mB,6ECChC,MAAM,GAAiB,CACrB,CACEgD,KAAM,GACNC,UAAWqJ,IAEb,CACEtJ,KAAM,aACNC,UAAWoJ,GACXE,SAAU,CACR,CACEvJ,KAAM,GACNwJ,UAAW,OACXC,WAAY,WAEd,CACEzJ,KAAM,UACNC,UAAW+I,IAEb,CACEhJ,KAAM,SACNC,UAAWqI,IAEb,CACEtI,KAAM,mBACNC,UAAWkJ,OAUZ,MAAMO,I,kCAAAA,GAAqB,E,oBAArBA,K,wBAHD,cAAsB,IACtB,QCbL,MAAMC,I,kCAAAA,GAAc,E,oBAAdA,K,wBAZD9jB,EAA4B6jB,GAAuB,Q,2SCUxD,MAAME,GAMXvlB,YACU+E,EACAiK,EACAnE,EACAxK,EACAC,GAJA,KAAAyE,MAAAA,EACA,KAAAiK,cAAAA,EACA,KAAAnE,cAAAA,EACA,KAAAxK,qBAAAA,EACA,KAAAC,YAAAA,CACP,CAEHoB,WACElB,KAAKqZ,SAAWrZ,KAAKwO,cAAcxB,QAAQxK,MACzC,EAAA0W,GAAA,GAAU,OACV,EAAAmL,GAAA,GAAkBrkB,KAAKuE,MAAMa,SAC7B,EAAA+T,GAAA,IAAU,EAAQvF,EAAGxO,KAAY,mCAE/B,OADApF,KAAK+F,eAAiBX,EAAOW,qBAChB/F,KAAKqN,YACpB,OAGErN,KAAKuE,MAAMygB,SAAS9iB,YAAYkR,SAClCpT,KAAKoT,OAASpT,KAAKuE,MAAMygB,SAAS9iB,YAAYkR,OAElD,CAEc/F,a,0CACZ,aAAarN,KAAKwO,cAAcnB,WAAWrN,KAAK+F,eAClD,G,CAEAuS,eAAepL,GACblN,KAAKqK,cAAc3G,KAA+BkL,GAAuB,CACvE3O,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,QACXyB,SAAUA,IAGhB,CAEAkL,iBAAiBxU,GACf5D,KAAKqK,cAAc3G,KAAqC6K,GAA6B,CACnFtO,KAAM,CACJyM,QAAS9I,IAGf,CAEAyU,sBACErY,KAAKqK,cAAc3G,KAA+BkL,GAAuB,CACvE3O,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,SAGjB,CAEA8M,eAAexT,GACbkO,GAAqBsF,eAAexT,EAAM/E,KAAKH,qBAAsBG,KAAKF,YAC5E,CAEA0Y,gBAAgBjT,GACd0N,GAAqBuF,gBACnBjT,EACAvF,KAAKH,qBACLG,KAAKF,YACLE,KAAKwO,cAET,E,kCAvEWuW,IAAgB,4D,oBAAhBA,GAAgB,mRC1B7B,qBACE,mCAAuD,wD,gBAAvD,QACA,uCACF,sBACA,2CACE,+CAAsB,EAAA3M,iBAAA,EAAwB,GAA9C,CAA+C,oCAC7B,EAAAC,qBAAqB,GADvC,CAA+C,sCAE5B,EAAAC,eAAA,EAAsB,GAFzC,CAA+C,0CAGxB,EAAAC,eAAA,EAAsB,GAH7C,CAA+C,2CAIvB,EAAAC,gBAAA,EAAuB,I,iBAGhD,QACD,gB,MAZkB,yDAAsC,oBAStD,gDAA4B,mB,6ECL9B,MAAM,GAAiB,CACrB,CACE2C,KAAM,GACNC,UAAW2J,KAQR,MAAME,I,kCAAAA,GAAoB,E,oBAApBA,K,wBAHD,cAAsB,IACtB,QCAL,MAAMC,I,kCAAAA,GAAa,E,oBAAbA,K,wBAJDlkB,EAA4BikB,M,wCCRjC,MAAME,ICFN,MAAMC,ICEN,MAAMC,WAAoC,KAQ/C7lB,YAAYyH,GACVC,MAAMD,GACNjH,KAAKuF,GAAKvF,KAAKmH,oBAAoB,MACnCnH,KAAK+E,KAAO/E,KAAKmH,oBAAoB,QACrCnH,KAAKslB,aAAetlB,KAAKmH,oBAAoB,gBAC7CnH,KAAKulB,SAAWvlB,KAAKmH,oBAAoB,YACzCnH,KAAKoH,aAAepH,KAAKmH,oBAAoB,gBAC7CnH,KAAKqH,aAAerH,KAAKmH,oBAAoB,eAC/C,EChBK,MAAMqe,WAA4B,KAQvChmB,YAAYyH,GACVC,MAAMD,GACNjH,KAAKuF,GAAKvF,KAAKmH,oBAAoB,MACnCnH,KAAK+E,KAAO/E,KAAKmH,oBAAoB,QACrCnH,KAAKylB,OAASzlB,KAAKmH,oBAAoB,UACvCnH,KAAKulB,SAAWvlB,KAAKmH,oBAAoB,YACzCnH,KAAKoH,aAAepH,KAAKmH,oBAAoB,gBAC7CnH,KAAKqH,aAAerH,KAAKmH,oBAAoB,eAC/C,EClBK,MAAMue,I,uTCqBN,MAAMC,GAMXnmB,YACUmI,EACAC,EACAge,EACA/d,GAHA,KAAAF,cAAAA,EACA,KAAAC,WAAAA,EACA,KAAAge,sBAAAA,EACA,KAAA/d,eAAAA,EATO,KAAAge,oBAAsB,IAC7B,KAAAC,aAAyC,IAAI/d,GAAA,EAEvD,KAAAge,aAAe/lB,KAAK8lB,aAAa7d,cAO9B,CAEG+d,gBACJjgB,EACA4K,G,0CAEA,MAAMvI,QAAUpI,KAAK4H,WAAWS,KAC9B,MACA,qBAAuBsI,EAAmB,iBAC1C,MACA,GACA,GAEIlI,EAAU,IAAI,GAAAC,EAAaN,EAAGod,IAEpC,aAAaxlB,KAAKimB,uBAAuBlgB,EAAgB0C,EAAQxI,KACnE,G,CAEMimB,kBACJngB,EACA4K,EACAwV,G,0CAEA,MAAMC,QAAoBpmB,KAAK4lB,sBAAsBS,YAAY,IAC3DvY,QAAY9N,KAAK4lB,sBAAsBU,KAC3CF,EACA,wBACA,kBACA,GACA,UAEIG,EAAgB,IAAI,KAAmBzY,GAEvChF,QAAgB9I,KAAKwmB,yBACzBzgB,EACAwgB,EACAJ,GAEI/d,QAAUpI,KAAK4H,WAAWS,KAC9B,OACA,qBAAuBsI,EAAmB,iBAC1C7H,GACA,GACA,GAEI2d,EAAS,IAAIpB,GAA4Bjd,GAC/CpI,KAAK8lB,aAAa9iB,KAAK,MACvB,MAAM0jB,EAAS,qBAAsBN,GACrC,MAAO,GAAGpmB,KAAK6lB,uBAAuBY,EAAOlhB,MAAMkhB,EAAOnB,gBAAgBoB,GAC5E,G,CAEMC,mBAAmBhW,EAA0BiW,G,0CACjD,MAAM9d,EAAU,IAAIsc,GACpBtc,EAAQkI,IAAM4V,QAER5mB,KAAK4H,WAAWS,KACpB,OACA,qBAAuBsI,EAAmB,wBAC1C7H,GACA,GACA,GAGF9I,KAAK8lB,aAAa9iB,KAAK,KACzB,G,CAEcwjB,yBACZzgB,EACAwgB,EACAJ,G,0CAEA,MAAMhV,QAAwBnR,KAAK0J,mBAAmB3D,GAChD8gB,EAAqB,IAAI1B,IACxBpgB,EAAM+hB,EAAkBhZ,SAAa/D,QAAQC,IAAI,OAChDhK,KAAK6H,eAAegC,QAAQsc,EAAgBphB,KAAMoM,SAClDnR,KAAK6H,eAAegC,QACxBkd,KAAKC,UAAU,CAAET,cAAepV,EAAgB8V,SAChDV,SAEIvmB,KAAK6H,eAAegC,QAAQ0c,EAAcU,OAAQ9V,KAO1D,OAJA0V,EAAmB9hB,KAAOA,EAC1B8hB,EAAmBC,iBAAmBA,EACtCD,EAAmB/Y,IAAMA,EACzB+Y,EAAmBtB,SAAWY,EAAgBZ,SACvCsB,CACT,G,CAEcnd,mBAAmB3D,G,0CAC/B,aAAa/F,KAAK2H,cAAcgC,UAAU5D,EAC5C,G,CAEckgB,uBACZlgB,EACAmhB,G,0CAEA,MAAMtd,QAAe5J,KAAK0J,mBAAmB3D,GAC7C,aAAagE,QAAQC,IACnBkd,EAAqBzkB,KAAWwH,GAAM,mCACpC,MAAMgQ,EAAO,IAAIyL,GAOjB,OANAzL,EAAK1U,GAAK0E,EAAE1E,GACZ0U,EAAKlV,WAAa/E,KAAK6H,eAAeiC,cAAc,IAAI,KAAUG,EAAElF,MAAO6E,GAC3EqQ,EAAKwL,OAASxb,EAAEwb,OAChBxL,EAAKsL,SAAWtb,EAAEsb,SAAW,IAAIlL,KAAKpQ,EAAEsb,UAAY,KACpDtL,EAAK7S,aAAe,IAAIiT,KAAKpQ,EAAE7C,cAC/B6S,EAAK5S,aAAe,IAAIgT,KAAKpQ,EAAE5C,cACxB4S,CACT,MAEJ,G,oCAzHW0L,IAAa,kD,sBAAbA,GAAa,QAAbA,GAAa,gBAFZ,SCHP,MAAMwB,GACX3nB,YACS6G,EACqBpG,EACpBJ,EACAC,GAHD,KAAAuG,UAAAA,EACqB,KAAApG,KAAAA,EACpB,KAAAJ,qBAAAA,EACA,KAAAC,YAAAA,EAERE,KAAKqG,UAAU+gB,cAAe,CAChC,CAEAlmB,WAEE,IAAKlB,KAAKC,KAAKsG,WAAavG,KAAKC,KAAKonB,YAEpC,MADArnB,KAAKqG,UAAU1F,QACT,IAAIiG,MAAM,sEAEpB,CAEA0gB,kBACEtnB,KAAKH,qBAAqBsU,gBAAgBnU,KAAKC,KAAKonB,aACpDrnB,KAAKH,qBAAqBY,UACxB,UACA,KACAT,KAAKF,YAAYY,EAAE,gCAErBV,KAAKqG,UAAU1F,OACjB,E,kCA1BWwmB,IAA0B,mBAG3B,OAAW,0B,oBAHVA,GAA0B,mcChBvC,wBACE,2BACE,kCAAM,S,gBAA6B,QACnC,oCACE,SACF,QACF,yBAEA,qCACE,6C,iBACE,U,iBAAkC,eAClC,U,mDAIF,QAEA,kDACE,2CAAW,U,iBAA0B,QACrC,4CAAqC,UAAsB,QAC7D,2BACA,U,mDAEF,QAEA,qCACE,wCAAqD,iCAAS,EAAAG,iBAAiB,IAC7E,qCACA,U,iBACF,QACF,yBACF,uBACA,gB,MA9BU,6CAEJ,oDAKuB,+DACvB,iEACA,iLAOW,2CAC0B,mCAEvC,2KAOE,8D,gZCvBA,oBACE,S,gBACF,S,yBAFiD,mBAC/C,2D,4BAKN,0BACE,uCAAW,S,gBAA6B,QACxC,qC,gBAMF,yB,qBAPa,4CAIT,iE,ECeC,MAAMC,GAOEC,YAAQ3kB,GACfA,GACF7C,KAAKynB,KAAKhd,kBAEd,CASAjL,YAAoBkoB,GAAA,KAAAA,SAAAA,EAjBZ,KAAA5Y,SAAW,IAAI/G,GAAA,EAUvB,KAAA4f,YAAc,IAAItN,KAER,KAAAoN,KAAO,IAAI,MAAU,CAC7BG,QAAS,IAAI,MAAY,QAAS,CAAC,iBACnCC,eAAgB,IAAI,MAAY,GAAI,CAAC,mBAgB/B,KAAAC,UAAaC,IAAuC,EAK5D,KAAAC,UAAY,KAAqB,CAlBQ,CAEnC9mB,W,0CACJlB,KAAKynB,KAAKQ,aAAazlB,MAAK,EAAAkR,GAAA,GAAU1T,KAAK8O,WAAW6E,WAAU,KAC9D3T,KAAK8nB,UAAU9nB,KAAKkoB,iBAAiB,GAEzC,G,CAEA3Y,cACEvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,CAGA2Y,iBAAiB/V,GACfpS,KAAK8nB,UAAY1V,CACnB,CAGAgW,kBAAkBhW,GAChBpS,KAAKgoB,UAAY5V,CACnB,CAEAiW,SAASpd,GACP,MAC8B,UAA3BjL,KAAKynB,KAAKlnB,MAAMqnB,SAAuB5nB,KAAKynB,KAAKlnB,MAAMsnB,gBAC5B,WAA5B7nB,KAAKynB,KAAKlnB,MAAMqnB,QAET,KAEF,CACLU,UAAU,EAEd,CAEAC,WAAWhoB,GACI,MAATA,GACFP,KAAKynB,KAAKxb,SAAS,CAAE2b,QAAS,QAASC,eAAgB,OAErDtnB,GACFP,KAAKynB,KAAKxb,SAAS,CACjB2b,QAAS,SACTC,eAAgB7nB,KAAK0nB,SAASc,UAAUjoB,EAAO,qBAGrD,CAEAkoB,iBAAkBC,GAChBA,EAAa1oB,KAAKynB,KAAKpY,UAAYrP,KAAKynB,KAAKnY,QAC/C,CAEQ4Y,iBACN,GAA+B,SAA3BloB,KAAKynB,KAAKlnB,MAAMqnB,QAClB,OAAO,KAET,GAA+B,UAA3B5nB,KAAKynB,KAAKlnB,MAAMqnB,QAClB,OAAO,IAAIvN,KAAKra,KAAKynB,KAAKlnB,MAAMsnB,gBAElC,MAAMF,EAAc,IAAItN,KAExB,OADAsN,EAAYgB,QAAQhB,EAAYiB,UAAYC,OAAO7oB,KAAKynB,KAAKlnB,MAAMqnB,UAC5DD,CACT,E,kCAjFWJ,IAA0B,c,oBAA1BA,GAA0B,6HAb1B,CACT,CACEuB,QAAS,MACTC,OAAO,EACPC,YAAazB,IAEf,CACEuB,QAAS,MACTC,OAAO,EACPC,YAAazB,OAEhB,0SD7BH,WACE,0CACE,uCAAW,S,gBAAsB,QACjC,sCACE,yCAAwB,U,iBAAoB,QAC5C,iDAGA,0CAAyB,U,iBAAqB,QAChD,2BACF,yBACA,qDASF,uBACA,gB,MArBc,0BAEC,qCAEe,oCACA,iDAGC,sCAGZ,uD,gaEUZ,MAAM0B,GASXzpB,YACS6G,EACqBpG,EACpBoK,EACA6e,GAHD,KAAA7iB,UAAAA,EACqB,KAAApG,KAAAA,EACpB,KAAAoK,cAAAA,EACA,KAAA6e,cAAAA,EAZA,KAAA5e,UAAY,IAAI,MAAU,CAClCvF,KAAM,IAAI,MAAY,GAAI,CAAC,eAAqB,gBAAqB,MACrEokB,sBAAuB,IAAI,MAAY,QAE/B,KAAA5d,SAAU,EAEpB,KAAA6d,qBAAuB,CAAC,EAAG,GAAI,IAsB/B,KAAA/oB,OAAS,IAAY,mCAEnB,GADAL,KAAKsK,UAAUG,mBACXzK,KAAKsK,UAAUI,QACjB,OAEF,MAAMyb,EAAkB,IAAIT,GAC5BS,EAAgBphB,KAAO/E,KAAKsK,UAAU/J,MAAMwE,KAC5CohB,EAAgBZ,SAAWvlB,KAAKsK,UAAU/J,MAAM4oB,sBAChD,MAAM9B,QAAoBrnB,KAAKkpB,cAAchD,kBAC3ClmB,KAAKC,KAAK8F,eACV/F,KAAKC,KAAK4Q,mBAAmBtL,GAC7B4gB,GAEFnmB,KAAKqpB,sBACHrpB,KAAKC,KAAK4Q,mBAAmB9L,KAC7BsiB,EACAlB,EAAgBZ,UAElBvlB,KAAKqG,UAAU1F,OACjB,GAlCG,CAEGO,W,kDACJ,IACGlB,KAAKC,KAAK8F,kBACkB,QAA5B,EAAA/F,KAAKC,KAAK4Q,0BAAkB,eAAEtL,OACF,QAA5B,EAAAvF,KAAKC,KAAK4Q,0BAAkB,eAAE9L,MAG/B,MADA/E,KAAKqG,UAAU1F,QACT,IAAIiG,MACR,uF,IA0BEyiB,sBACNtM,EACAsK,EACAiC,GAEAtpB,KAAKqK,cAAc3G,KAAkCyjB,GAA4B,CAC/ElnB,KAAM,CACJsG,SAAUwW,EACVuM,eAAgBA,EAChBjC,YAAaA,IAGnB,CAEAnT,gCACE7J,EACAsG,EACA5K,GAGA,MAAM8K,EAAqB,IAAIX,GAI/B,OAHAW,EAAmBtL,GAAKoL,EACxBE,EAAmB9L,KAAO,cAEnBsF,EAAc3G,KAAoCulB,GAAkC,CACzFhpB,KAAM,CACJ8F,eAAgBA,EAChB8K,mBAAoBA,IAG1B,E,uBCrGF,iBACE,+BACF,sB,0CAEA,wBACE,2BAA2B,S,gBAAuC,QAClE,2BAAiC,S,gBAAsC,QACvE,sCAKE,0DAAS,QAAA0Y,oBAAA,OAA0B,IAEnC,oCACA,U,iBACF,QACF,sB,OAZ6B,sDACM,qDAS/B,6D,0CAmCA,iBACE,qCACE,0CAEE,yEAAU,MAAA1W,EAAS,EAAAC,UAAA,aAA6B,KAAI,IAFtD,QAKF,4BACA,qCAAY,SAAgB,QAC5B,sCAAY,U,iBAA8B,QAC1C,uCACE,U,kCACF,QACA,uCAAY,U,iBAA0C,QACtD,uCACE,6C,kCAQF,6BAEA,oDACE,4CAAkC,uEAAS,QAAA0W,wBAAA,UAAqC,IAC9E,4CACE,2CACA,U,iBACF,QACF,+BACF,6BACF,0B,oDA5BM,uDAGQ,uBACA,4CAEV,gHAEU,qDAMR,+CAA0B,uBAC1B,2CASE,iF,4BA7BR,4CAkCF,iB,sBAlC+B,kC,2CA/BjC,qBACE,4BACE,gCACE,qCACE,0CACE,6CAEE,4DAAU,MAAA3W,EAAS,EAAAE,YAAc,KAAI,IAFvC,QAMA,U,iBACF,QACF,6BACA,uCAAY,U,iBAAmB,QAC/B,uCAAY,U,iBAA0B,QACtC,uCAAY,U,iBAAsB,QAClC,uCAAY,U,iBAAyB,QACrC,uCACE,6C,kCAQF,6BACF,2BACF,yBACA,mDAoCF,sB,oCA1DY,qEAAmD,4DAGrD,+DAGQ,oCACA,2CACA,uCACA,0CAMR,sCAA+B,gCAE/B,0C,oCDvBGkW,IAAgC,mBAWjC,OAAW,wB,oBAXVA,GAAgC,4tBErB7C,kBACE,wCACE,6BACE,oCAAM,S,gBAA6B,QACnC,uCACE,UACF,QACF,2BAEA,uCACE,gDACE,6CAAW,U,iBAAmB,QAC9B,2CACF,6BACA,uCACE,oDACE,+CAAW,U,iBAA0B,QACrC,8CACE,gDACE,U,iBACF,QACF,iCACF,+BACA,2CACE,U,iBACF,QACF,6BACA,0DAKF,2BAEA,wCACE,2CACE,U,iBACF,QACA,2CACE,U,iBACF,QACF,2BACF,yBACF,uBACA,gB,MA5CM,+BAAuB,sBAGjB,6CAEJ,uEAMW,oCAKE,4CAGP,2EAKJ,kGAKF,8DAA6C,8DAO7C,sEAGA,8D,kIC9BD,MAAMQ,GAJb,cAeY,KAAAF,oBAAsB,IAAI,MAC1B,KAAAC,wBAA0B,IAAI,MAE9B,KAAA1W,UAAY,IAAI,OAAuB,EAAM,G,CAZnD4W,aACF,OAAO1pB,KAAK2pB,OACd,CACID,WAAOhd,GACT1M,KAAK8S,UAAUK,QACfnT,KAAK2pB,QAAUjd,CACjB,CAQAoH,gBAGE,OAFoB9T,KAAK8S,UAAUe,SAASlN,SAC5B3G,KAAK0pB,OAAO/iB,MAE9B,CAEAoM,YACE/S,KAAK8T,gBACD9T,KAAK8S,UAAUK,QACfnT,KAAK8S,UAAUiB,UAAU/T,KAAK0pB,OAAOjnB,KAAKwH,GAAMA,EAAE1E,KACxD,CAEUqkB,iBACR,MAAM/V,EAAW7T,KAAK0pB,OAAO/kB,QAAQsF,GAAMjK,KAAK8S,UAAUe,SAASxF,SAASpE,EAAE1E,MAC9EvF,KAAKwpB,wBAAwB1lB,KAAK+P,EACpC,CAEUgW,WAAWC,GACnB,MAAO,SACT,E,kCAnCWL,GAAmB,E,oBAAnBA,GAAmB,ktCFThC,wBAIA,kDAeA,gDAoEA,2CACE,oCAAkC,iCAAS,EAAAG,gBAAgB,IACzD,mCACA,sCAA6B,U,iBAAiC,QAChE,yBACF,uBACA,gB,MA7FM,wBAIS,gEAeH,gEAuEqB,kD,iZGxE1B,MAAMG,GAMXvqB,YACU+E,EACA2kB,EACA7e,EACA2f,EACAnqB,GAJA,KAAA0E,MAAAA,EACA,KAAA2kB,cAAAA,EACA,KAAA7e,cAAAA,EACA,KAAA2f,aAAAA,EACA,KAAAnqB,qBAAAA,CACP,CAEHqB,WACElB,KAAKiqB,cAAgBjqB,KAAKkpB,cAAcnD,aAAavjB,MACnD,EAAA0W,GAAA,GAAU,OACV,EAAAmL,GAAA,GAAkBrkB,KAAKuE,MAAMa,SAC7B,EAAA+T,GAAA,IAAU,EAAQvF,EAAGxO,KAAY,mCAG/B,OAFApF,KAAK+F,eAAiBX,EAAOW,eAC7B/F,KAAK2Q,iBAAmBvL,EAAOuL,uBAClB3Q,KAAKgmB,iBACpB,MAEJ,CAEgBkE,OAAOR,G,iDACT1pB,KAAKM,sBAIXN,KAAKkpB,cAAcvC,mBACvB3mB,KAAK2Q,iBACL+Y,EAAOjnB,KAAK/B,GAAMA,EAAE6E,MAGtBvF,KAAKH,qBAAqBY,UAAU,UAAW,KAAM,0BACvD,G,CAEU0pB,2BACRlB,GAAiCkB,yBAC/BnqB,KAAKqK,cACLrK,KAAK2Q,iBACL3Q,KAAK+F,eAET,CAEQzF,aACN,MAAM8pB,EAAMpqB,KAAKgqB,aAAatmB,KAAK,KAAiC,CAClE2mB,qBAAqB,EACrBpqB,KAAM,CACJF,mBAAoB,wBACpBG,kBAAmB,oBACnBC,WAAY,uBAIhB,GAAW,MAAPiqB,EAIJ,OAAOA,EAAIE,iBACb,CAEctE,kB,0CACZ,aAAahmB,KAAKkpB,cAAclD,gBAAgBhmB,KAAK+F,eAAgB/F,KAAK2Q,iBAC5E,G,oCAlEWoZ,IAAoB,4D,oBAApBA,GAAoB,mJClBjC,4BAEE,+CAAuB,EAAAI,0BAA0B,GAAjD,CAAkD,8CACvB,EAAAD,OAAA,EAAc,I,iBAC1C,QACD,e,KAJE,0C,kWCoCK,MAAMK,GAgDD7G,2BAA2B7P,GACnC,MAAMsL,EAAmC,IAAIrD,GAuB7C,OAtBAqD,EAAiCjC,mBAAqBrJ,EACnDlP,QAAQmO,GAAuE,SAAzD0O,GAAwBmC,kBAAkB7Q,KAChErQ,KAAKmhB,IACJ,MAAM3J,EAAO,IAAIwB,GAKjB,OAJAxB,EAAKuC,wBAA0Bxc,KAAK2Q,iBACpCsJ,EAAKkC,mBAAqByH,EAASre,GACnC0U,EAAKzS,MAAO,EACZyS,EAAKxS,OAAQ,EACNwS,CAAI,IAGfkF,EAAiChC,oBAAsBtJ,EACpDlP,QAAQmO,GAAuE,UAAzD0O,GAAwBmC,kBAAkB7Q,KAChErQ,KAAKmhB,IACJ,MAAM3J,EAAO,IAAI0B,GAKjB,OAJA1B,EAAKuC,wBAA0Bxc,KAAK2Q,iBACpCsJ,EAAKyC,QAAUkH,EAASre,GACxB0U,EAAKzS,MAAO,EACZyS,EAAKxS,OAAQ,EACNwS,CAAI,IAGRja,KAAK2hB,oBAAoBzC,mCAC9Blf,KAAK2Q,iBACLwO,EAEJ,CAEgB0E,yBAAyBlE,G,0CACvC,SACQ3f,KAAK2hB,oBAAoBjC,+BAC7B1f,KAAK+F,eACL4Z,EACA3f,KAAKyhB,MAGPzhB,KAAK8jB,0BAA0BnE,QAIjC,UACQ3f,KAAK2hB,oBAAoBtC,mBAAmBM,EAAOL,gBACzD,MAAMkL,EAAwC,CAC5ClkB,MAAOtG,KAAKF,YAAYY,EAAE,wBAC1B+pB,QAASzqB,KAAKF,YAAYY,EAAE,0BAC5Bgd,KAAM,aACNgN,iBAAkB1qB,KAAKF,YAAYY,EAAE,SACrCiqB,iBAAkB,MAEpB3qB,KAAKqK,cAAcugB,iBAAiBJ,E,CACpC,MAAOhqB,GACPR,KAAK+jB,kBAAkBC,UAAUxjB,E,CAErC,G,CAEAhB,YACU+E,EACA8F,EACAvK,EACAikB,EACApC,GAJA,KAAApd,MAAAA,EACA,KAAA8F,cAAAA,EACA,KAAAvK,YAAAA,EACA,KAAAikB,kBAAAA,EACA,KAAApC,oBAAAA,EA7GF,KAAA7S,SAAW,IAAI/G,GAAA,EAKb,KAAA2Z,MACR1hB,KAAK2hB,oBAAoB1D,mCAAmCzb,MAC1D,EAAA0W,GAAA,GAAU,OACV,EAAAmL,GAAA,GAAkBrkB,KAAKuE,MAAMa,SAC7B,EAAA+T,GAAA,IAAU,EAAEvF,EAAGxO,KACbpF,KAAK2hB,oBAAoB9C,gCAAgCzZ,EAAOuL,qBAElE,EAAAlO,EAAA,IAAK+b,IACH,MAAMiD,EAAgC,GA6BtC,OA5BAjD,EAAStB,mBAAmBhZ,SAASyb,IACnC8B,EAAKzT,KAAK,CACR0P,KAAM,OACN3Y,KAAM4a,EAAOvD,qBACb7W,GAAIoa,EAAOxD,mBACXmD,eAAgBK,EAAOpa,GACvBiC,KAAMmY,EAAOnY,KACbC,MAAOkY,EAAOlY,MACd6U,OAAQqD,EAAOrD,OACfjK,KAAMmP,GAAwBkB,SAC9BxO,QAAQ,GACR,IAGJsK,EAASrB,oBAAoBjZ,SAASyb,IACpC8B,EAAKzT,KAAK,CACR0P,KAAM,QACN3Y,KAAM4a,EAAOhD,UACbpX,GAAIoa,EAAOjD,QACX4C,eAAgBK,EAAOpa,GACvBiC,KAAMmY,EAAOnY,KACbC,MAAOkY,EAAOlY,MACdmV,mBAAoB+C,EAAO/C,mBAC3BvK,KAAMmP,GAAwBmB,UAC9BzO,QAAQ,GACR,IAGGuN,CAAI,KAEb,EAAArI,GAAA,KAkED,CAEHlY,WACElB,KAAKuE,MAAMa,OAAO5C,MAAK,EAAAkR,GAAA,GAAU1T,KAAK8O,WAAW6E,WAAWvO,IAC1DpF,KAAK2Q,iBAAmBvL,EAAOuL,iBAC/B3Q,KAAK+F,eAAiBX,EAAOW,cAAc,IAG7C/F,KAAK0hB,MAAMlf,MAAK,EAAAkR,GAAA,GAAU1T,KAAK8O,WAAW6E,WAAW8N,IACnDzhB,KAAKyhB,KAAOA,CAAI,GAEpB,CAEAlS,cACEvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,CAEQsU,0BAA0BnE,GAChC3f,KAAKqK,cAAc3G,KAAoC0f,GAA8B,CACnFnjB,KAAM,CACJqG,MAAO,gCACPG,QAAS,kCACTgF,UAAW,SACXiS,KAAM,kBACN4F,YAAa,CAAC,KAAMtjB,KAAK+F,eAAgB,oBACzC4Z,WAGN,E,kCA5IW4K,IAA6B,4D,oBAA7BA,GAA6B,sQCrC1C,iBACE,+BACE,S,gBACF,QACA,gDAOE,mDAA0B,EAAA7G,2BAAA,EAAkC,GAA5D,CAA6D,2CACrC,EAAAG,yBAAA,EAAgC,I,mFAE1D,yBACF,uBACA,gB,MAdI,6EAGA,0CAAsB,6BAAtB,CAAsB,6CAAtB,CAAsB,4CAAtB,CAAsB,gE,2VCanB,MAAMgH,GA4BDnH,2BAA2B7P,GACnC,MAAMiX,EAAwCjX,EAC3ClP,QAAQmO,GAAuE,YAAzD0O,GAAwBmC,kBAAkB7Q,KAChErQ,KAAKmhB,IACJ,MAAM3J,EAAO,IAAI2B,GAKjB,OAJA3B,EAAKtJ,iBAAmB3Q,KAAK2Q,iBAC7BsJ,EAAKoC,iBAAmBuH,EAASre,GACjC0U,EAAKzS,MAAO,EACZyS,EAAKxS,OAAQ,EACNwS,CAAI,IAGf,OAAOja,KAAK2hB,oBAAoBpD,sBAC9Bve,KAAK+F,eACL/F,KAAK2Q,iBACLma,EAEJ,CAEgBjH,yBAAyBlE,G,0CACvC,UACQ3f,KAAK2hB,oBAAoBtC,mBAAmBM,EAAOL,e,CACzD,MAAO9e,GACPR,KAAK+jB,kBAAkBC,UAAUxjB,E,CAErC,G,CAEAhB,YACU+E,EACAwf,EACApC,GAFA,KAAApd,MAAAA,EACA,KAAAwf,kBAAAA,EACA,KAAApC,oBAAAA,EAzDF,KAAA7S,SAAW,IAAI/G,GAAA,EAIb,KAAA2Z,MACR1hB,KAAK2hB,oBAAoBzD,oCAAoC1b,MAC3D,EAAA0W,GAAA,GAAU,OACV,EAAAmL,GAAA,GAAkBrkB,KAAKuE,MAAMa,SAC7B,EAAA+T,GAAA,IAAU,EAAEvF,EAAGxO,KACbpF,KAAK2hB,oBAAoBtD,mBAAmBjZ,EAAOuL,iBAAkBvL,EAAOW,mBAE9E,EAAAtD,EAAA,IAAK+b,GACIA,EAAS/b,KAAKkd,IACZ,CACLjC,KAAM,UACN3Y,KAAM4a,EAAO3C,mBACbzX,GAAIoa,EAAOtD,iBACXiD,eAAgBK,EAAOpa,GACvBiC,KAAMmY,EAAOnY,KACbC,MAAOkY,EAAOlY,MACd4K,KAAMmP,GAAwBqB,YAC9B3O,QAAQ,QAqCf,CAEHhT,WACElB,KAAKuE,MAAMa,OAAO5C,MAAK,EAAAkR,GAAA,GAAU1T,KAAK8O,WAAW6E,WAAWvO,IAC1DpF,KAAK+F,eAAiBX,EAAOW,eAC7B/F,KAAK2Q,iBAAmBvL,EAAOuL,gBAAgB,GAEnD,CAEApB,cACEvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,E,kCAvEWqb,IAA+B,oC,oBAA/BA,GAA+B,0QClB5C,iBACE,+BACE,S,gBACF,QACA,gDAOE,mDAA0B,EAAAnH,2BAAA,EAAkC,GAA5D,CAA6D,2CACrC,EAAAG,yBAAA,EAAgC,I,mFAE1D,yBACF,uBACA,gB,MAdI,+EAGA,0CAAsB,+BAAtB,CAAsB,uCAAtB,CAAsB,sCAAtB,CAAsB,wE,6NCL1B,uBAKE,6CACE,8CAAuD,S,gBAErD,QACJ,wBACA,uCACA,+CACE,8CAAqC,U,iBAAuB,QAC5D,8CAAmC,U,iBAAqB,QACxD,8CAAmC,U,iBAA2B,QAChE,yBACA,sCAKE,0DAAS,QAAAsG,2BAA0B,IAEnC,mCACA,U,iBACF,QACF,sB,wBAxBE,sBAIkB,qCAAuC,8CAMzC,qCAAuB,wCACvB,qCAAqB,sCACrB,qCAAqB,4CAUnC,6D,ECXG,MAAMY,GAkBXvrB,YACU+E,EACAgN,EACAlH,GAFA,KAAA9F,MAAAA,EACA,KAAAgN,sBAAAA,EACA,KAAAlH,cAAAA,EAdA,KAAAkG,gBAAkBvQ,KAAKuE,MAAMa,OAAO5C,MAC5C,EAAA2W,GAAA,IAAW/T,IACTpF,KAAK2Q,iBAAmBvL,EAAOuL,iBAC/B3Q,KAAK+F,eAAiBX,EAAOW,eAEtB/F,KAAKuR,sBACTf,mBAAmBpL,EAAOW,gBAC1BqJ,MAAM4b,GAAWA,EAAO3lB,MAAM6L,GAAOA,EAAG3L,KAAOH,EAAOuL,wBAQ1D,CAEOwZ,2BACRlB,GAAiCkB,yBAC/BnqB,KAAKqK,cACLrK,KAAK2Q,iBACL3Q,KAAK+F,eAET,E,kCA9BWglB,IAAuB,oC,oBAAvBA,GAAuB,wYDbpC,gC,iBA2BA,uCACA,e,KA3BG,0C,2ZEIK,SACE,SACF,S,qBADE,0E,4BAEF,SACE,S,gBAEF,S,qBAFE,qH,ECqBH,MAAME,GAKXzrB,YACS6G,EACqBpG,EACpBsR,EACAzR,EACAD,EACAwK,GALD,KAAAhE,UAAAA,EACqB,KAAApG,KAAAA,EACpB,KAAAsR,sBAAAA,EACA,KAAAzR,YAAAA,EACA,KAAAD,qBAAAA,EACA,KAAAwK,cAAAA,EAVV,KAAAC,UAAY,IAAI,MAAU,CACxBC,cAAe,IAAI,MAAY,GAAI,CAACvK,KAAKwK,wCA4B3C,KAAAnK,OAAS,IAAY,mCACnBL,KAAKsK,UAAUG,mBAEXzK,KAAKsK,UAAUI,gBAIb1K,KAAKmJ,SACXnJ,KAAKqG,UAAU1F,QACjB,GA3BG,CAEC2F,YACF,OAA4C,IAArCtG,KAAKC,KAAK8Q,gBAAgBpK,OAC7B3G,KAAKF,YAAYY,EAAE,wBACnBV,KAAKF,YAAYY,EAAE,wBACzB,CAEIiK,oBACF,OAA4C,IAArC3K,KAAKC,KAAK8Q,gBAAgBpK,OAC7B3G,KAAKF,YAAYY,EAAE,oCAAqCV,KAAKC,KAAK8Q,gBAAgB,GAAGhM,MACrF/E,KAAKF,YAAYY,EAAE,qCACzB,CAEIkK,8BACF,OAAO5K,KAAKF,YAAYY,EAAE,0BAA2BV,KAAK6K,0BAC5D,CAaM1B,S,0CACJ,MAEM+hB,SAFsBlrB,KAAKuR,sBAAsBpI,OAAOnJ,KAAKC,KAAK8Q,kBAE3CpM,QAAQsC,GAAaA,EAASuC,eAC3D,GAAI0hB,EAAOvkB,OAAS,EAElB,YADA3G,KAAK+K,qBAAqBmgB,GAI5B,MAAMzkB,EACiC,IAArCzG,KAAKC,KAAK8Q,gBAAgBpK,OACtB,4BACA,6BACN3G,KAAKH,qBAAqBY,UAAU,UAAW,KAAMT,KAAKF,YAAYY,EAAE+F,GAC1E,G,CAEAsE,qBAAqBC,GACnBhL,KAAKqK,cAAc3G,KAAiC0C,GAA2B,CAC7EnG,KAAM,CACJqG,MAAO,wBACPC,SAAU,kBACVC,YAAa,qBACbC,QAAS,iCACTC,QAASsE,IAGf,CAEYH,gC,QACV,OAA6C,KAAb,QAAzB,EAAA7K,KAAKC,KAAK8Q,uBAAe,eAAEpK,QAC9B3G,KAAKF,YAAYY,EAAE,8BAA+BV,KAAKC,KAAK8Q,gBAAgB,GAAGhM,MAC/E/E,KAAKF,YAAYY,EACf,sCACyB,QAAzB,EAAAV,KAAKC,KAAK8Q,uBAAe,eAAEpK,OAAOnD,WAE1C,CAEQgH,oCACN,OAAQS,GACFjL,KAAK6K,0BAA0BK,eAAiBD,EAAQ1K,MAAM2K,cACzD,KAEA,CACLC,6BAA8B,CAC5B1E,QAASzG,KAAKF,YAAYY,EAAE,2BAKtC,E,uBCxHF,iBACE,+BACF,sB,0CAEA,wBACE,2BAA2B,S,gBAA0C,QACrE,4BAAiC,S,gBAA4C,QAC7E,sCAKE,0DAAS,QAAAyqB,uBAAA,OAA6B,IAEtC,oCACA,U,iBACF,QACF,sB,OAZ6B,yDACM,2DAS/B,gE,0CAkCA,iBACE,qCACE,0CAEE,yEAAU,MAAAtY,EAAS,EAAAC,UAAA,aAAsC,KAAI,IAF/D,QAKF,4BACA,qCACE,sCACF,6BACA,uCACE,wCACE,UACF,QACF,6BACA,uCACE,uBACA,wCAAO,gBAAE,QACX,6BACA,uCAAY,U,iBAAmD,QAC/D,uCACE,6C,kCAQF,6BACA,kDACE,wCACE,0CACA,U,iBACF,QACA,4CAAkC,uEAAS,QAAAsY,wBAAA,WAA+C,IACxF,0CACA,U,iBACF,QACA,4CAAkC,uEAAS,QAAAjiB,OAAA,GAAsB,IAC/D,yCACA,4CACE,U,iBACF,QACF,+BACF,6BACF,0B,oDA1CM,uDAOS,mCACT,mDAOQ,sDAMR,+CAA0B,uBAC1B,2CAK2B,kCAE3B,8EAIA,8EAKE,mF,4BA3CR,4C,iBAgDF,iB,yBAhDwC,sC,2CA9B1C,wBACE,4BACE,gCACE,qCACE,0CACE,6CAEE,4DAAU,MAAA0J,EAAS,EAAAE,YAAc,KAAI,IAFvC,QAMA,U,iBACF,QACF,6BACA,uCAAmD,U,iBAAmB,QACtE,uCAAY,U,iBAAsB,QAClC,uCAAuC,U,iBAAyB,QAChE,uCACE,6C,kCAQF,6BACF,2BACF,yBACA,mDAkDF,sB,oCA/EgD,iCAQpC,qEAAmD,4DAGrD,+DAG+C,oCACvC,uCAC2B,0CAMnC,+CAA0B,uBAC1B,0C,oCDZGkY,IAAmC,mBAOpC,OAAW,gD,oBAPVA,GAAmC,8iBD9BhD,kBACE,wCACE,6BACE,oCAAM,SAAW,QACjB,sCACE,yDAGA,yDAIF,6BACF,2BAEA,uCACE,+C,iBACE,UACF,QACA,gDACE,6CAAW,UAA6B,QACxC,2CACF,6BACF,2BAEA,uCACE,0CACE,UACF,QACA,2CACE,U,iBACF,QACF,2BACF,yBACF,uBACA,gB,MAnCM,+BAAuB,sBAGjB,wBAEW,wDAGA,uDAQW,+CAC1B,wDAGW,0CAOX,gDAGA,8D,6HGhBD,MAAMI,GAIPta,sBACF,OAAO/Q,KAAKsrB,gBACd,CACIva,oBAAgBA,GAClB/Q,KAAK8S,UAAUK,QACfnT,KAAKsrB,iBAAmBva,EACxB/Q,KAAKiS,WAAWhS,KAAO8Q,CACzB,CAIIqC,WAAOA,GACTpT,KAAKiS,WAAWtN,OAASyO,CAC3B,CAWA5T,YACUM,EACAD,GADA,KAAAC,YAAAA,EACA,KAAAD,qBAAAA,EA7BA,KAAAoS,WAAa,IAAI,KAkBjB,KAAAkZ,uBAAyB,IAAI,MAC7B,KAAAI,2BAA6B,IAAI,MACjC,KAAAC,6BAA+B,IAAI,MACnC,KAAAJ,wBAA0B,IAAI,MAEhC,KAAAtc,SAA0B,IAAI/G,GAAA,EAEtC,KAAA+K,UAAY,IAAI,OAAuB,EAAM,IAM3C9S,KAAK8S,UAAUW,QACZjR,MAAK,EAAAkR,GAAA,GAAU1T,KAAK8O,WACpB6E,WAAWC,GAAM5T,KAAKwrB,6BAA6B1nB,KAAK9D,KAAK8S,UAAUe,WAC5E,CAEAtE,cACEvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,CAEAsE,gBAGE,OAFoB9T,KAAK8S,UAAUe,SAASlN,SAC5B3G,KAAK+Q,gBAAgBpK,MAEvC,CAEAoM,YACE/S,KAAK8T,gBACD9T,KAAK8S,UAAUK,QACfnT,KAAK8S,UAAUiB,UAAU/T,KAAK+Q,gBAAgBtO,KAAKwH,GAAMA,EAAE1E,KACjE,CAEA4D,OAAO8H,GACLjR,KAAKurB,2BAA2BznB,KAAK,CAACmN,GACxC,CAEAwa,4BACMzrB,KAAK8S,UAAUe,SAASlN,QAAU,EACpC3G,KAAKurB,2BAA2BznB,KAC9B9D,KAAK+Q,gBAAgBpM,QAAQuM,GAAOlR,KAAK8S,UAAUmB,WAAW/C,EAAG3L,OAGnEvF,KAAKH,qBAAqBY,UACxB,QACAT,KAAKF,YAAYY,EAAE,iBACnBV,KAAKF,YAAYY,EAAE,mBAGzB,E,kCAtEW2qB,IAA4B,0B,oBAA5BA,GAA4B,qvDDdzC,wBAIA,kDAeA,gDAiFA,2CACE,oCAAkC,iCAAS,EAAAI,2BAA2B,IACpE,mCACA,sCACE,U,iBACF,QACF,yBACF,uBACA,gB,MA5GM,iCAIS,kFAeH,kFAqFN,yE,maEhFC,MAAMC,GAMXlsB,YACU+E,EACA8F,EACAsX,EACApQ,GAHA,KAAAhN,MAAAA,EACA,KAAA8F,cAAAA,EACA,KAAAsX,oBAAAA,EACA,KAAApQ,sBAAAA,CACP,CAEHrQ,WACElB,KAAKsZ,kBAAmB,EAAApU,EAAA,GAAc,CACpClF,KAAKuE,MAAMa,OACXpF,KAAKuR,sBAAsBhB,gBAAgB/N,MAAK,EAAA0W,GAAA,GAAU,OAC1DlZ,KAAK2hB,oBAAoB1D,mCAAmCzb,MAAK,EAAA0W,GAAA,GAAU,SAC1E1W,MACD,EAAA2W,GAAA,IAAU,EAAQ/T,KAAY,mCAE5B,OADApF,KAAK+F,eAAiBX,EAAOW,qBAChB/F,KAAKwQ,oBACpB,MAEJ,CAEAmb,8BACE3rB,KAAKqK,cAAc3G,KAAuC4N,GAA+B,CACvFrR,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB0F,UAAW,SAGjB,CAEAmgB,6BAA6Bjb,GAC3B3Q,KAAKqK,cAAc3G,KAAuC4N,GAA+B,CACvFrR,KAAM,CACJ8F,eAAgB/F,KAAK+F,eACrB4K,iBAAkBA,EAClBlF,UAAW,UAGjB,CAEAogB,iBAAiBjoB,GACf5D,KAAKqK,cAAc3G,KACjBunB,GACA,CACEhrB,KAAM,CACJ8Q,gBAAiBnN,IAIzB,CAEc4M,qB,0CACZ,aAAaxQ,KAAKuR,sBAAsBf,mBAAmBxQ,KAAK+F,eAClE,G,oCA1DW2lB,IAAwB,8C,oBAAxBA,GAAwB,+QCxBrC,qBACE,mCAGE,wD,gBAHF,QAMA,uCACF,sBACA,oDAEE,kDAA0B,EAAAC,6BAA6B,GAAvD,CAAwD,8CAC7B,EAAAC,6BAAA,EAAoC,GAD/D,CAAwD,iDAE1B,EAAAC,iBAAA,EAAwB,I,iBAEvD,QACD,gB,MAbI,iEAA8C,oBAOhD,gEAA4C,mB,6ECD9C,MAAM,GAAiB,CACrB,CACE1Q,KAAM,GACNC,UAAWsQ,IAEb,CACEvQ,KAAM,oBACNC,UAAW2P,GACXrG,SAAU,CACR,CACEvJ,KAAM,GACNwJ,UAAW,OACXC,WAAY,YAEd,CACEzJ,KAAM,SACNC,UAAW2O,IAEb,CACE5O,KAAM,SACNC,UAAWmP,IAEb,CACEpP,KAAM,WACNC,UAAWyP,OAUZ,MAAMiB,I,kCAAAA,GAA4B,E,oBAA5BA,K,wBAHD,cAAsB,IACtB,QCFL,MAAMC,I,kCAAAA,GAAqB,E,oBAArBA,K,wBAlBD/qB,EAA4B8qB,GAA8B,Q,gBCnB/D,MAAME,WAAkCplB,MAC7CpH,YAAYiH,GACVS,MAAMT,EACR,ECFK,MAAMwlB,ICDN,MAAMC,ICAN,MAAMC,ICAN,MAAMC,WAA8C,KAIzD5sB,YAAYyH,GACVC,MAAMD,GAENjH,KAAKuF,GAAKvF,KAAKmH,oBAAoB,MACnCnH,KAAK+E,KAAO/E,KAAKmH,oBAAoB,OACvC,ECTK,MAAMklB,WAA6C,KAOxD7sB,YAAYyH,GACVC,MAAMD,GAENjH,KAAKuF,GAAKvF,KAAKmH,oBAAoB,MACnCnH,KAAK8N,IAAM9N,KAAKmH,oBAAoB,OACpCnH,KAAKO,MAAQP,KAAKmH,oBAAoB,SACtCnH,KAAK6M,KAAO7M,KAAKmH,oBAAoB,QAErC,MAAMkC,EAAarJ,KAAKmH,oBAAoB,cAC5CnH,KAAKqJ,WAAaA,aAAU,EAAVA,EAAY5G,KAAK8C,GAAYA,EAAG/B,YACpD,ECdK,MAAM8oB,WAAqC,KAIhD9sB,YAAYyH,GACVC,MAAMD,GAEN,MAAMmC,EAAWpJ,KAAKmH,oBAAoB,YACpCuF,EAAU1M,KAAKmH,oBAAoB,WAEzCnH,KAAKoJ,SAAWA,aAAQ,EAARA,EAAU3G,KAAK+J,GAAW,IAAI4f,GAAsC5f,KACpFxM,KAAK0M,QAAUA,aAAO,EAAPA,EAASjK,KAAK+J,GAAW,IAAI6f,GAAqC7f,IACnF,ECjBK,MAAM+f,IAKN,MAAMC,IAKN,MAAMC,I,2SCaN,MAAMC,GACXltB,YACUoI,EACAC,EACAF,EACA7H,GAHA,KAAA8H,WAAAA,EACA,KAAAC,eAAAA,EACA,KAAAF,cAAAA,EACA,KAAA7H,YAAAA,CACP,CAEG6sB,OAAO5mB,EAAwB6mB,EAAe,Q,0CAClD,MAAM3lB,QAAiBjH,KAAK4H,WAAWS,KACrC,MACA,OAAStC,EAAiB,kBAAoB6mB,EAC9C,MACA,GACA,GAGF,OAAO7F,KAAKC,gBACJhnB,KAAK6sB,cAAc9mB,EAAgB,IAAIumB,GAA6BrlB,IAC1E,KACA,KAEJ,G,CAEM6lB,OAAO/mB,EAAwBgnB,G,0CACnC,IAAIC,EAAgB,CAAC,EAErB,IACEA,EAAgBjG,KAAKkG,MAAMF,GAC3B,MAAMG,QAAoBltB,KAAKmtB,cAAcpnB,EAAgBinB,SAEvDhtB,KAAK4H,WAAWS,KACpB,OACA,OAAStC,EAAiB,UAC1BmnB,GACA,GACA,E,CAEF,MAAOzjB,GACP,MAAM2jB,EAAgB,IAAI,KAAc3jB,EAAO,KAC/C,OAAOzJ,KAAKqtB,kBAAkBD,EAAeJ,E,CAEjD,G,CAEcG,cACZpnB,EACAunB,G,0CAEA,MAAMC,EAAkB,IAAItB,GAE5B,IACE,MAAMriB,QAAe5J,KAAK2H,cAAcgC,UAAU5D,GAClDwnB,EAAgBnkB,SAAW,GAC3BmkB,EAAgB7gB,QAAU,GAE1B6gB,EAAgBnkB,eAAiBW,QAAQC,IACvCsjB,EAAWlkB,SAAS3G,KAAW2L,GAAW,mCACxC,MAAMpF,EAAU,IAAIkjB,GAGpB,OAFAljB,EAAQzD,GAAK6I,EAAE7I,GACfyD,EAAQjE,WAAa/E,KAAK6H,eAAegC,QAAQuE,EAAErJ,KAAM6E,GAClDZ,CACT,OAGFukB,EAAgB7gB,cAAgB3C,QAAQC,IACtCsjB,EAAW5gB,QAAQjK,KAAWwH,GAAW,mCACvC,MAAM7J,EAAS,IAAI+rB,GAWnB,OATC/rB,EAAO0N,IAAK1N,EAAOG,MAAOH,EAAOyM,YAAc9C,QAAQC,IAAI,CAC1DhK,KAAK6H,eAAegC,QAAQI,EAAE6D,IAAKlE,GACnC5J,KAAK6H,eAAegC,QAAQI,EAAE1J,MAAOqJ,GACrC5J,KAAK6H,eAAegC,QAAQI,EAAE4C,KAAMjD,KAGtCxJ,EAAOmF,GAAK0E,EAAE1E,GACdnF,EAAOiJ,WAAaY,EAAEZ,WAEfjJ,CACT,M,CAEF,MAAOqJ,GACP,OAAO,I,CAGT,OAAO8jB,CACT,G,CAEcV,cACZ9mB,EACAynB,G,0CAEA,MAAM5jB,QAAe5J,KAAK2H,cAAcgC,UAAU5D,GAC5C0nB,EAAkB,IAAIlB,GA8B5B,OA7BAkB,EAAgBrkB,SAAW,GAC3BqkB,EAAgB/gB,QAAU,GAE1B+gB,EAAgBrkB,eAAiBW,QAAQC,IACvCwjB,EAAWpkB,SAAS3G,KAAW2L,GAAM,mCACnC,MAAMpF,EAAU,IAAIwjB,GAGpB,OAFAxjB,EAAQzD,GAAK6I,EAAE7I,GACfyD,EAAQjE,WAAa/E,KAAK6H,eAAeiC,cAAc,IAAI,KAAUsE,EAAErJ,MAAO6E,GACvEZ,CACT,OAGFykB,EAAgB/gB,cAAgB3C,QAAQC,IACtCwjB,EAAW9gB,QAAQjK,KAAWwH,GAAM,mCAClC,MAAM7J,EAAS,IAAIqsB,GAWnB,OATCrsB,EAAO0N,IAAK1N,EAAOG,MAAOH,EAAOyM,YAAc9C,QAAQC,IAAI,CAC1DhK,KAAK6H,eAAeiC,cAAc,IAAI,KAAUG,EAAE6D,KAAMlE,GACxD5J,KAAK6H,eAAeiC,cAAc,IAAI,KAAUG,EAAE1J,OAAQqJ,GAC1D5J,KAAK6H,eAAeiC,cAAc,IAAI,KAAUG,EAAE4C,MAAOjD,KAG3DxJ,EAAOmF,GAAK0E,EAAE1E,GACdnF,EAAOiJ,WAAaY,EAAEZ,WAEfjJ,CACT,OAGKqtB,CACT,G,CAEQJ,kBACND,EACAM,GAEA,GAAsC,MAAlCN,EAAcO,iBAChB,OAAO,IAAI3B,GAA0BoB,EAAc3mB,SAGrD,MAAMggB,EAAS,IAAIuF,GA6BnB,OA5BAvF,EAAOmH,MAAQ,GAEf1T,OAAOW,QAAQuS,EAAcO,kBAAkBzpB,SAAQ,EAAE4J,EAAKvN,GAAQstB,KACpE,IAAI1K,EACA2K,EACJ,MAAMvoB,EAAKsjB,OAAO/a,EAAIigB,MAAM,UAAU,IAEtC,OAAQjgB,EAAIigB,MAAM,QAAQ,IACxB,IAAK,WACH5K,EAAOuK,EAAatkB,SAAS7D,GAC7BuoB,EAAW,UACX,MACF,IAAK,UACH3K,EAAOuK,EAAahhB,QAAQnH,GAC5BuoB,EAAW,SACX,MACF,QACE,OAGJrH,EAAOmH,MAAM5f,KAAK,CAChBzI,GAAIA,EAAK,EACTmY,KAAkB,WAAZoQ,EAAwB,UAAY,SAC1ChgB,IAAKqV,EAAKrV,IACVtE,aAAcjJ,EAAMoG,OAAS,EAAIpG,EAAM,GAAK,IAC5C,IAGGkmB,CACT,E,kCAnKWiG,IAA+B,kD,sBAA/BA,GAA+B,QAA/BA,GAA+B,gBAF9B,S,2SCZP,MAAMsB,GACXxuB,YAAoBM,GAAA,KAAAA,YAAAA,CAA2B,CAEzCmuB,YAAYC,EAAiB,KAAMC,EAAY,Q,0CACnD,MAAMC,QAAe,EAAAnL,GAAA,GAAejjB,KAAKF,YAAYuuB,SAC/CC,GAAa,QAAW,IAAIjU,KAAQ,iBAAkB+T,GAC5D,MAAO,aAAeF,EAAS,IAAMA,EAAS,IAAM,WAAaI,EAAa,IAAMH,CACtF,G,oCAPWH,IAA4B,c,sBAA5BA,GAA4B,QAA5BA,GAA4B,gBAF3B,S,yWCKR,oBACE,SACF,S,mCAF4D,iBAC1D,8C,ECYD,MAAMO,GAWX/uB,YACU+E,EACAzE,EACA0E,EACA3E,EACA2uB,EACAC,EACAC,EACA1E,EACA2E,GARA,KAAApqB,MAAAA,EACA,KAAAzE,YAAAA,EACA,KAAA0E,oBAAAA,EACA,KAAA3E,qBAAAA,EACA,KAAA2uB,iBAAAA,EACA,KAAAC,oBAAAA,EACA,KAAAC,WAAAA,EACA,KAAA1E,aAAAA,EACA,KAAA2E,yBAAAA,EAnBF,KAAA7f,SAAW,IAAI/G,GAAA,EAIb,KAAA6mB,cAAgC,CAAC,CAAE7pB,KAAM,mBAAoB8pB,cAAe,SAE5E,KAAAvkB,UAAY,IAAI,MAAU,CAClCwkB,OAAQ,IAAI,MAAY,EAAG,CAAC,mBAkC9B,KAAAzuB,OAAS,IAAY,mCAGnB,GAFAL,KAAKsK,UAAUG,mBAEXzK,KAAKsK,UAAUI,QACjB,cAGyB1K,KAAKM,sBAK1BN,KAAK+uB,WACb,GAlCG,CAEG7tB,W,0CACJlB,KAAKuE,MAAMa,OACR5C,MACC,EAAA2W,GAAA,IAAiB/T,GAAW,gDAAMpF,KAAKwE,oBAAoBgB,IAAIJ,EAAOW,eAAe,OACrF,EAAA2N,GAAA,GAAU1T,KAAK8O,WAEhB6E,WAAWkM,IACV7f,KAAKgvB,QAAUnP,EAAa9a,KAC5B/E,KAAK8Y,MAAQ+G,EAAata,EAAE,IAGhCvF,KAAKsK,UAAU9E,IAAI,UAAU6J,SAC/B,G,CAEME,c,0CACJvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,G,CAiBcuf,W,0CACZ,MAAMF,EAAgB7uB,KAAK4uB,cAAc5uB,KAAKsK,UAAU9E,IAAI,UAAUjF,OAAOsuB,cACvErB,QAAmBxtB,KAAK2uB,yBAAyBhC,OAAO3sB,KAAK8Y,MAAO+V,SAEpE7uB,KAAKivB,aAAazB,EAAYqB,GACpC7uB,KAAKH,qBAAqBY,UAAU,UAAW,KAAMT,KAAKF,YAAYY,EAAE,qBAC1E,G,CAEcuuB,aAAahvB,EAAc6uB,G,0CACvC,MAAMI,QAAiBlvB,KAAKwuB,iBAAiBP,YAAY,KAAMa,GAC/D9uB,KAAKyuB,oBAAoBU,SAAS,CAChCD,SAAUA,EACVE,SAAUnvB,EACVovB,YAAa,CAAE3R,KAAM,eAEzB,G,CAEQpd,aACN,MAAM8pB,EAAMpqB,KAAKgqB,aAAatmB,KAAK,KAAiC,CAClE2mB,qBAAqB,EACrBpqB,KAAM,CACJF,mBAAoB,oBACpBG,kBAAmB,cACnBC,WAAY,wBAIhB,GAAW,MAAPiqB,EAIJ,OAAOA,EAAIE,iBACb,E,0BCpGM,gBACE,wCAAiC,SAAgD,QACjF,wCAAY,SAAuB,QACrC,+B,yBAFmC,oDACrB,8B,4BAFd,6CAIF,qB,qBAJ8B,sC,oCDWvBiE,IAA6B,0G,oBAA7BA,GAA6B,uVDzB1C,qBAEA,kCACE,iCACE,2C,gBACE,S,gBACF,QACF,yBAEA,gDACE,yCAAW,U,iBAAyB,QACpC,wCACE,iDAGF,2BACF,yBAEA,wCACE,U,iBACF,QACF,uBACA,gB,MApBM,wCAAuB,sBAEA,0EACvB,sGAKS,0CAEkB,0CAO7B,0D,kIGHG,MAAMe,GAGX9vB,YACS6G,EACCvG,EACoBG,GAFrB,KAAAoG,UAAAA,EACC,KAAAvG,YAAAA,EACoB,KAAAG,KAAAA,EAE5BD,KAAKuvB,WAAatvB,EAAKwJ,MAAMmkB,KAC/B,E,kCATW0B,IAAwC,+BAMzC,OAAW,E,oBANVA,GAAwC,wWDhBrD,sBACE,kCACE,S,gBACF,QACA,kCACE,iCAAK,S,iBAA+C,QACpD,yCACE,iCACE,sCACE,0CAAY,U,iBAAmB,QAC/B,0CAAY,U,iBAA0B,QACxC,+BACF,6BACA,sDAMF,2BACF,yBACA,mCACE,wCACE,U,iBACF,QACF,yBACF,uBACA,gB,MAzBI,yDAGK,+DAIa,oCACA,2CAahB,uD,2XEAC,MAAME,GAQXhwB,YACU+E,EACAzE,EACA0E,EACA3E,EACE4uB,EACFC,EACAe,EACAplB,GAPA,KAAA9F,MAAAA,EACA,KAAAzE,YAAAA,EACA,KAAA0E,oBAAAA,EACA,KAAA3E,qBAAAA,EACE,KAAA4uB,oBAAAA,EACF,KAAAC,WAAAA,EACA,KAAAe,gCAAAA,EACA,KAAAplB,cAAAA,EAfF,KAAAyE,SAAW,IAAI/G,GAAA,EACb,KAAA+Q,MAAgB,KAEhB,KAAAxO,UAAY,IAAI,MAAU,CAClColB,eAAgB,IAAI,MAAY,MAyBlC,KAAArvB,OAAS,IAAY,mC,MACnB,MAAMsvB,EAAcxuB,SAASyuB,eAAe,QACtCC,QAAuB7vB,KAAK8vB,kBAChCH,EACA3vB,KAAKsK,UAAU9E,IAAI,kBAAkBjF,MAAMwvB,QAG7C,GAAsB,MAAlBF,EASJ,IACE,MAAMpmB,QAAczJ,KAAKyvB,gCAAgC3C,OAAO9sB,KAAK8Y,MAAO+W,GAE5E,IAAgB,QAAZ,EAAApmB,aAAK,EAALA,EAAOmkB,aAAK,eAAEjnB,QAAS,EAEzB,YADA3G,KAAKgwB,sBAAsBvmB,GAEtB,GAAa,MAATA,EAMT,YALAzJ,KAAKH,qBAAqBY,UACxB,QACAT,KAAKF,YAAYY,EAAE,iBACnBV,KAAKF,YAAYY,EAAE,2BAKvBV,KAAKH,qBAAqBY,UAAU,UAAW,KAAMT,KAAKF,YAAYY,EAAE,kBACxEV,KAAKiwB,W,CACL,MAAOxmB,GACPzJ,KAAKH,qBAAqBY,UACxB,QACAT,KAAKF,YAAYY,EAAE,iBACnBV,KAAKF,YAAYY,EAAE,2BAErBV,KAAK0uB,WAAWjlB,MAAMA,E,MA/BtBzJ,KAAKH,qBAAqBY,UACxB,QACAT,KAAKF,YAAYY,EAAE,iBACnBV,KAAKF,YAAYY,EAAE,cA8BzB,GAtDG,CAEGQ,W,0CACJlB,KAAKuE,MAAMa,OAAO5C,MAAK,EAAAkR,GAAA,GAAU1T,KAAK8O,WAAW6E,WAAWvO,IAC1DpF,KAAK8Y,MAAQ1T,EAAOW,cAAc,GAEtC,G,CAEMwJ,c,0CACJvP,KAAK8O,SAAS9L,OACdhD,KAAK8O,SAASU,UAChB,G,CA6CgBsgB,kBACdH,EACAD,G,0CAEA,MAAMQ,EAAQP,EAAYO,MAE1B,KACY,MAATA,GAAkC,IAAjBA,EAAMvpB,QACL,MAAlB+oB,GAA6C,KAAnBA,GAE3B,OAAO,KAGT,IAAI3C,EAAe2C,EACnB,GAAa,MAATQ,GAAiBA,EAAMvpB,OAAS,EAClC,IACE,MAAM8jB,QAAgBzqB,KAAKmwB,gBAAgBD,EAAM,IAClC,MAAXzF,IACFsC,EAAetC,E,CAEjB,MAAOjqB,GACPR,KAAK0uB,WAAWjlB,MAAMjJ,E,CAI1B,OAAoB,MAAhBusB,GAAyC,KAAjBA,EACnB,KAGFA,CACT,G,CAEUqD,gBAAgBxsB,GACxB,MAAMysB,EAAgCzsB,EAAMb,OACtCutB,EAAOD,EAAYH,MAAMvpB,OAAS,EAAI0pB,EAAYH,MAAM,GAAK,KACnElwB,KAAKuwB,aAAeD,CACtB,CAEQL,YACL9uB,SAASyuB,eAAe,QAA6BrvB,MAAQ,GAC9DP,KAAKuwB,aAAe,KACpBvwB,KAAKsK,UAAU0Y,MAAM,CACnB0M,eAAgB,IAEpB,CAEQS,gBAAgBG,GACtB,OAAO,IAAIvmB,SAAQ,CAACymB,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,WAAWN,EAAM,SACxBI,EAAOG,OAAUC,IACfN,EAASM,EAAI/tB,OAAe0jB,OAAO,EAErCiK,EAAOK,QAAU,KACfN,GAAQ,CACT,GAEL,CAEQT,sBAAsBvmB,GAC5BzJ,KAAKqK,cAAc3G,KACjB4rB,GACA,CACErvB,KAAM,CACJwJ,MAAOA,IAIf,E,kCA7IW+lB,IAA6B,gG,oBAA7BA,GAA6B,2kB,gBCvB1C,qBAEA,kCACE,0CACE,uCAAW,S,gBAAyB,QACpC,oCACE,0CAAuD,4DAAS,gBAAoB,IAClF,U,iBACF,QACA,U,iBACF,QACA,yCAQE,mCAAU,EAAAY,gBAAA,EAAuB,IARnC,QAWA,wCAAU,U,iBAA+C,QAC3D,yBACA,mCACE,U,iBACF,QACA,4CACE,2CAAgC,U,iBAAsC,QACtE,0CAOA,wCAAU,U,iBAA+C,QAC3D,yBACA,sCACE,U,iBACF,QACF,uBACA,c,eAxCM,wCAAuB,sBAEd,yCAGP,kEAEF,uIAaQ,sEAGV,kDAGgC,uDAQtB,sEAGV,yD,kHC9BJ,MAAM,GAAiB,CACrB,CACEjV,KAAM,SACNC,UAAWoU,GACXwB,YAAa,CAAC,KACd/wB,KAAM,CACJ+U,QAAS,aACTic,wBAA0B3rB,GAAsBA,EAAIU,UAGxD,CACEmV,KAAM,SACNC,UAAWmT,GACXyC,YAAa,CAAC,KACd/wB,KAAM,CACJ+U,QAAS,aACTic,wBAA0B3rB,GAAsBA,EAAIU,WASnD,MAAMkrB,I,kCAAAA,GAAqB,E,oBAArBA,K,wBAHD,cAAsB,IACtB,QCZL,MAAMC,I,kCAAAA,GAAc,E,oBAAdA,K,yBAFA,CAACnD,GAA8BtB,IAAgC,SANhE1rB,EAA4BkwB,M,2SCRjC,MAAME,GACLJ,YAAYzsB,G,0CAEhB,OAAO,CACT,G,oCAJW6sB,GAAO,E,sBAAPA,GAAO,QAAPA,GAAO,O,2SCab,MAAMC,GACX7xB,YACS6G,EACCmI,EACA1O,EACAD,EACoBI,GAJrB,KAAAoG,UAAAA,EACC,KAAAmI,cAAAA,EACA,KAAA1O,YAAAA,EACA,KAAAD,qBAAAA,EACoB,KAAAI,KAAAA,EAW9B,KAAAkJ,OAAS,IAAY,yCACbnJ,KAAKwO,cAAcZ,cAAc5N,KAAKC,KAAK8F,eAAgB/F,KAAKC,KAAKyN,WAC3E,MAAMjH,EAC2B,IAA/BzG,KAAKC,KAAKyN,UAAU/G,OAAe,yBAA2B,0BAChE3G,KAAKqG,UAAU1F,MAAMX,KAAKC,KAAKyN,WAC/B1N,KAAKH,qBAAqBY,UAAU,UAAW,KAAMT,KAAKF,YAAYY,EAAE+F,GAC1E,GAhBG,CAECH,YACF,OAAsC,IAA/BtG,KAAKC,KAAKyN,UAAU/G,OAAe,mBAAqB,mBACjE,CAEI+H,uBACF,OAAsC,IAA/B1O,KAAKC,KAAKyN,UAAU/G,OAAe,eAAiB,eAC7D,E,kCAfW0qB,IAA+B,qDAMhC,OAAW,E,oBANVA,GAA+B,oVCjB5C,6BACE,kCAAqB,S,gBAAkB,QACvC,kCACE,S,gCAKF,QACA,mCACE,wCACE,U,iBACF,QACA,wCACE,U,iBACF,QACF,yBACF,uBACA,gB,MAjBuB,mCAEnB,iJAOqD,qCACnD,oEAGA,yD,uWCGC,MAAMC,GACX9xB,YACS6G,EACCmI,EACA1O,EACAD,EACoBI,GAJrB,KAAAoG,UAAAA,EACC,KAAAmI,cAAAA,EACA,KAAA1O,YAAAA,EACA,KAAAD,qBAAAA,EACoB,KAAAI,KAAAA,EAO9B,KAAAsxB,QAAU,IAAY,mCACpB,IAAI9qB,EAAU,SACRzG,KAAKwO,cAAcX,eAAe7N,KAAKC,KAAK8F,eAAgB/F,KAAKC,KAAKyN,WAC5EjH,EACiC,IAA/BzG,KAAKC,KAAKyN,UAAU/G,OAChB,6BACA,8BACN3G,KAAKqG,UAAU1F,MAAMX,KAAKC,KAAKyN,WAC/B1N,KAAKH,qBAAqBY,UAAU,UAAW,KAAMT,KAAKF,YAAYY,EAAE+F,GAC1E,GAfG,CAECH,YACF,OAAsC,IAA/BtG,KAAKC,KAAKyN,UAAU/G,OAAe,gBAAkB,gBAC9D,E,kCAXW2qB,IAA4B,qDAM7B,OAAW,E,oBANVA,GAA4B,gVCjBzC,6BACE,kCAAqB,S,gBAAkB,QACvC,kCACE,S,gCAGF,QACA,mCACE,wCACE,U,iBACF,QACA,wCACE,U,iBACF,QACF,yBACF,uBACA,gB,MAfuB,mCAEnB,+HAKqD,sCACnD,yDAGA,yD,uWCUC,MAAME,GAKXhyB,YACU+E,EACAiK,EACAnE,GAFA,KAAA9F,MAAAA,EACA,KAAAiK,cAAAA,EACA,KAAAnE,cAAAA,CACP,CAEHnJ,WACElB,KAAKqZ,SAAWrZ,KAAKwO,cAAcxB,QAAQxK,MACzC,EAAA0W,GAAA,GAAU,OACV,EAAAmL,GAAA,GAAkBrkB,KAAKuE,MAAMa,SAC7B,EAAA+T,GAAA,IAAU,EAAQvF,EAAGxO,KAAY,mCAE/B,OADApF,KAAK+F,eAAiBX,EAAOW,qBAChB/F,KAAKqN,YACpB,MAEJ,CAEcA,a,0CACZ,aAAarN,KAAKwO,cAAcb,kBAAkB3N,KAAK+F,eACzD,G,CAEAqS,iBAAiB1L,GACf,MAAMgB,EAAYhB,EAAQjK,KAAKrC,GAAWA,EAAOmF,KAEjDvF,KAAKqK,cAAc3G,KAAyC2tB,GAAiC,CAC3FpxB,KAAM,CACJyN,UAAWA,EACX3H,eAAgB/F,KAAK+F,iBAG3B,CAEA0rB,kBAAkB/jB,GAChB1N,KAAKqK,cAAc3G,KAAsC4tB,GAA8B,CACrFrxB,KAAM,CACJyN,UAAWA,EACX3H,eAAgB/F,KAAK+F,iBAG3B,E,kCA5CWyrB,IAAc,oC,oBAAdA,GAAc,8KCtB3B,qBACE,uCACF,sBACA,uC,gBAAuD,S,gBAErD,QACF,4CACE,+CAAsB,EAAApZ,iBAAA,EAAwB,GAA9C,CAA+C,0CACxB,EAAAqZ,kBAAA,EAAyB,I,kBAGjD,QACD,gB,MAT4B,6CAA2B,iDAMrD,iDAA4B,Y,2DCJ9B,MAAM,GAAiB,CACrB,CACEtW,KAAM,GACNC,UAAWoW,KAQR,MAAME,I,kCAAAA,GAAkB,E,oBAAlBA,K,wBAHD,cAAsB,IACtB,QCAL,MAAMC,I,kCAAAA,GAAW,E,oBAAXA,K,wBAJD3wB,EAA4B0wB,MCQxC,MAAM,GAAiB,EACrB,OAAkB,iBAAkB,CAClCvW,KAAM,kBACNC,UAAWna,EACX+vB,YAAa,CAAC,IAAW,IAA8BI,IACvDnxB,KAAM,CACJgxB,wBAA0B3rB,GAAsBA,EAAIO,yBAEtD6e,SAAU,CACR,CACEvJ,KAAM,GACNC,UAAW1V,GACXksB,OAAQ,WAEV,CACEzW,KAAM,UACN0W,aAAc,IAAM3M,GACpBjlB,KAAM,CACJ+U,QAAS,YAGb,CACEmG,KAAM,WACN0W,aAAc,IAAM/M,GACpB7kB,KAAM,CACJ+U,QAAS,aAGb,CACEmG,KAAM,mBACN0W,aAAc,IAAM9F,GACpB9rB,KAAM,CACJ+U,QAAS,oBAGb,CACEmG,KAAM,QACN0W,aAAc,IAAMF,GACpB1xB,KAAM,CACJ+U,QAAS,UAGb,CACEmG,KAAM,WACN0W,aAAc,IAAMV,IAEtB,CACEhW,KAAM,GACN0W,aAAc,IAAMvW,GACpBqJ,UAAW,YAUZ,MAAMmN,I,kCAAAA,GAA2B,E,oBAA3BA,K,wBAHD,cAAsB,IACtB,QC9DL,MAAMC,I,kCAAAA,GAAoB,E,oBAApBA,K,yBAFA,CAACX,IAAQ,SADV,IAAcpwB,EAA4B8wB,GAA6BhxB,I","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/auth/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/navigation.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.module.ts","webpack://@bitwarden/web-vault/../../libs/components/src/no-items/no-items.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/sm-shared.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/secrets-manager-logo.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-base.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/progress/progress.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-status-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-status-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/requests/project.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-project.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/requests/secret.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-with-projects-list.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secret.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/service-account.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/service-account.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/service-account.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/table/sortable.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/no-items/no-items.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/no-items/no-items.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/header.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/header.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/new-menu.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/projects-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/new-menu.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/projects-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding-task.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding-task.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/progress/progress.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/progress/progress.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/section.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/section.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/access-policy.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/potential-grantee.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policies-create.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/access-policy.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/project-access-policies.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/service-accounts-access-policies.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policy-update.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policy.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/granted-policy.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/potential-grantee.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-policy.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-selector.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-selector.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/dialogs/access-removal-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/dialogs/access-removal-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-people.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-people.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-service-accounts.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-service-accounts.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/access-token.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/revoke-access-tokens.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-token-creation.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-tokens.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/view/access-token.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/people/service-account-people.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/people/service-account-people.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/projects/service-account-projects.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/projects/service-account-projects.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-delete-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-delete-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/error/sm-import-error.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-import.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-imported-project.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-imported-secret.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-exported-project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-exported-secret.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-export.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/sm-export.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/services/sm-porting-api.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/services/sm-porting.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-export.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-export.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/dialog/sm-import-error-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/dialog/sm-import-error-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-import.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-import.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/settings-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/settings.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/sm.guard.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-hard-delete.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-hard-delete.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-restore.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-restore.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/sm-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets-manager.module.ts"],"sourcesContent":["import { Directive } from \"@angular/core\";\nimport { FormBuilder, FormControl } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\n\nimport { ModalRef } from \"../../components/modal/modal.ref\";\nimport { ModalConfig } from \"../../services/modal.service\";\n\n/**\n * Used to verify the user's identity (using their master password or email-based OTP for Key Connector users). You can customize all of the text in the modal.\n */\n@Directive()\nexport class UserVerificationPromptComponent {\n  confirmDescription = this.config.data.confirmDescription;\n  confirmButtonText = this.config.data.confirmButtonText;\n  modalTitle = this.config.data.modalTitle;\n  secret = new FormControl();\n\n  constructor(\n    private modalRef: ModalRef,\n    protected config: ModalConfig,\n    protected userVerificationService: UserVerificationService,\n    private formBuilder: FormBuilder,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  async submit() {\n    try {\n      //Incorrect secret will throw an invalid password error.\n      await this.userVerificationService.verifyUser(this.secret.value);\n    } catch (e) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"error\"),\n        this.i18nService.t(\"invalidMasterPassword\")\n      );\n      return;\n    }\n\n    this.modalRef.close(true);\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { UserVerificationPromptComponent as BaseUserVerificationPrompt } from \"@bitwarden/angular/auth/components/user-verification-prompt.component\";\n\n@Component({\n  templateUrl: \"user-verification-prompt.component.html\",\n})\nexport class UserVerificationPromptComponent extends BaseUserVerificationPrompt {}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"confirmUserTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\">\n      <h2 class=\"tw-my-6 tw-px-3.5 tw-font-semibold\" id=\"modalTitle | i18n \">\n        {{ modalTitle | i18n | uppercase }}\n      </h2>\n      <div class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-p-3.5\">\n        {{ confirmDescription | i18n }}\n      </div>\n      <div class=\"tw-p-3.5\">\n        <app-user-verification ngDefaultControl [formControl]=\"secret\" name=\"secret\">\n        </app-user-verification>\n      </div>\n      <div\n        class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-p-3.5\"\n      >\n        <button bitButton buttonType=\"primary\" type=\"submit\" appBlurClick>\n          <span>{{ confirmButtonText | i18n }}</span>\n        </button>\n        <button bitButton buttonType=\"secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { OverlayModule } from \"@angular/cdk/overlay\";\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { IconButtonModule } from \"../icon-button/icon-button.module\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { NavDividerComponent } from \"./nav-divider.component\";\nimport { NavGroupComponent } from \"./nav-group.component\";\nimport { NavItemComponent } from \"./nav-item.component\";\n\n@NgModule({\n  imports: [CommonModule, SharedModule, IconButtonModule, OverlayModule, RouterModule],\n  declarations: [NavDividerComponent, NavGroupComponent, NavItemComponent],\n  exports: [NavDividerComponent, NavGroupComponent, NavItemComponent],\n})\nexport class NavigationModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { NavigationModule } from \"@bitwarden/components\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared/shared.module\";\n\nimport { LayoutComponent } from \"./layout.component\";\nimport { NavigationComponent } from \"./navigation.component\";\nimport { OrgSwitcherComponent } from \"./org-switcher.component\";\n\n@NgModule({\n  imports: [SharedModule, NavigationModule],\n  declarations: [LayoutComponent, NavigationComponent, OrgSwitcherComponent],\n})\nexport class LayoutModule {}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { IconModule } from \"../icon\";\n\nimport { NoItemsComponent } from \"./no-items.component\";\n\n@NgModule({\n  imports: [CommonModule, IconModule],\n  exports: [NoItemsComponent],\n  declarations: [NoItemsComponent],\n})\nexport class NoItemsModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { MultiSelectModule, NoItemsModule } from \"@bitwarden/components\";\nimport { CoreOrganizationModule } from \"@bitwarden/web-vault/app/admin-console/organizations/core\";\nimport { ProductSwitcherModule } from \"@bitwarden/web-vault/app/layouts/product-switcher/product-switcher.module\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { AccessSelectorComponent } from \"./access-policies/access-selector.component\";\nimport { AccessRemovalDialogComponent } from \"./access-policies/dialogs/access-removal-dialog.component\";\nimport { BulkStatusDialogComponent } from \"./dialogs/bulk-status-dialog.component\";\nimport { HeaderComponent } from \"./header.component\";\nimport { NewMenuComponent } from \"./new-menu.component\";\nimport { ProjectsListComponent } from \"./projects-list.component\";\nimport { SecretsListComponent } from \"./secrets-list.component\";\n\n@NgModule({\n  imports: [\n    SharedModule,\n    ProductSwitcherModule,\n    MultiSelectModule,\n    CoreOrganizationModule,\n    NoItemsModule,\n  ],\n  exports: [\n    SharedModule,\n    NoItemsModule,\n    AccessRemovalDialogComponent,\n    BulkStatusDialogComponent,\n    HeaderComponent,\n    NewMenuComponent,\n    ProjectsListComponent,\n    SecretsListComponent,\n    AccessSelectorComponent,\n  ],\n  declarations: [\n    AccessRemovalDialogComponent,\n    BulkStatusDialogComponent,\n    HeaderComponent,\n    NewMenuComponent,\n    ProjectsListComponent,\n    SecretsListComponent,\n    AccessSelectorComponent,\n  ],\n  providers: [],\n  bootstrap: [],\n})\nexport class SecretsManagerSharedModule {}\n","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-layout\",\n  templateUrl: \"./layout.component.html\",\n})\nexport class LayoutComponent implements OnInit {\n  ngOnInit() {\n    document.body.classList.remove(\"layout_frontend\");\n  }\n}\n","<div class=\"tw-flex tw-w-full\">\n  <nav\n    class=\"tw-fixed tw-max-h-screen tw-min-h-screen tw-w-60 tw-overflow-auto tw-bg-background-alt3\"\n  >\n    <router-outlet name=\"sidebar\"></router-outlet>\n  </nav>\n  <main class=\"tw-ml-60 tw-min-h-screen tw-min-w-0 tw-flex-1 tw-p-6\">\n    <router-outlet></router-outlet>\n  </main>\n</div>\n","import { svgIcon } from \"@bitwarden/components\";\n\nexport const SecretsManagerLogo = svgIcon`\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 580 104\" fill=\"none\"><path fill=\"#fff\" d=\"M102.539 52.27c0 28.315-22.954 51.269-51.27 51.269C22.955 103.539 0 80.585 0 52.269 0 23.955 22.954 1 51.27 1c28.315 0 51.269 22.954 51.269 51.27Z\"/><path fill=\"#175DDC\" fill-rule=\"evenodd\" d=\"M75.971 26.765c-.516-.49-1.111-.777-1.786-.777H28.39c-.675 0-1.31.287-1.786.777-.516.49-.754 1.145-.754 1.84v31.47c0 2.371.437 4.66 1.31 6.95.873 2.288 1.984 4.332 3.294 6.13s2.897 3.515 4.682 5.232a62.036 62.036 0 0 0 5 4.25 82.731 82.731 0 0 0 4.802 3.188c1.667.981 2.857 1.676 3.572 2.003.714.368 1.27.613 1.706.817a2.26 2.26 0 0 0 1.032.246 2.26 2.26 0 0 0 1.032-.246c.436-.204.992-.45 1.706-.817.715-.368 1.905-1.022 3.572-2.003a54.848 54.848 0 0 0 4.801-3.188c1.548-1.103 3.215-2.534 5.04-4.25 1.826-1.717 3.373-3.434 4.683-5.232 1.31-1.798 2.42-3.842 3.294-6.13.912-2.29 1.31-4.62 1.31-6.95v-31.47c.04-.695-.239-1.309-.715-1.84Zm-5.913 33.597c0 11.403-18.77 21.172-18.77 21.172V32.732h18.77v27.63Z\" clip-rule=\"evenodd\"/><path fill=\"#fff\" d=\"M142.208 70.81c-2.804 0-5.243-.511-7.319-1.533-2.075-1.023-3.678-2.447-4.806-4.272-1.129-1.826-1.694-3.943-1.694-6.353h4.807c0 1.497.346 2.884 1.038 4.162.692 1.241 1.693 2.246 3.004 3.012 1.347.73 3.004 1.096 4.97 1.096 2.585 0 4.588-.621 6.008-1.862 1.42-1.242 2.13-2.794 2.13-4.656 0-1.533-.327-2.756-.983-3.669-.655-.95-1.547-1.716-2.676-2.3-1.092-.585-2.367-1.096-3.823-1.534a126.43 126.43 0 0 1-4.479-1.479c-2.95-1.022-5.134-2.281-6.555-3.778-1.42-1.534-2.13-3.524-2.13-5.97-.036-2.045.437-3.852 1.42-5.422.984-1.607 2.367-2.848 4.151-3.724 1.821-.913 3.969-1.37 6.446-1.37 2.439 0 4.551.457 6.335 1.37 1.821.913 3.223 2.172 4.206 3.779 1.02 1.606 1.548 3.432 1.584 5.476h-4.806c0-1.058-.274-2.099-.82-3.121-.546-1.06-1.383-1.917-2.512-2.574-1.093-.658-2.476-.986-4.151-.986-2.076-.037-3.787.493-5.135 1.588-1.31 1.095-1.966 2.61-1.966 4.546 0 1.643.455 2.903 1.366 3.779.946.876 2.257 1.606 3.932 2.19 1.675.548 3.605 1.187 5.79 1.917 1.821.657 3.459 1.424 4.916 2.3 1.456.877 2.585 2.009 3.386 3.396.838 1.388 1.256 3.158 1.256 5.313 0 1.825-.473 3.56-1.42 5.203-.946 1.606-2.385 2.92-4.315 3.943-1.893 1.022-4.278 1.533-7.155 1.533ZM172.42 70.81c-2.586 0-4.88-.584-6.882-1.752-2.003-1.205-3.587-2.867-4.752-4.984-1.129-2.118-1.694-4.619-1.694-7.503 0-2.848.565-5.331 1.694-7.449 1.128-2.154 2.694-3.815 4.697-4.983 2.039-1.205 4.388-1.808 7.046-1.808 2.622 0 4.879.603 6.773 1.807 1.93 1.169 3.404 2.72 4.424 4.656a13.201 13.201 0 0 1 1.529 6.243c0 .402-.018.803-.054 1.205v1.37h-21.575c.109 2.08.582 3.815 1.42 5.202.874 1.351 1.948 2.373 3.222 3.067a8.754 8.754 0 0 0 4.152 1.04c1.893 0 3.477-.437 4.751-1.314 1.275-.876 2.203-2.063 2.786-3.56h4.533c-.728 2.52-2.13 4.62-4.205 6.299-2.039 1.643-4.661 2.464-7.865 2.464Zm0-24.59c-2.185 0-4.133.675-5.845 2.026-1.675 1.314-2.64 3.25-2.895 5.805h17.042c-.11-2.446-.947-4.363-2.513-5.75-1.566-1.388-3.495-2.081-5.789-2.081ZM202.697 70.81c-2.585 0-4.916-.584-6.991-1.752-2.039-1.205-3.66-2.867-4.861-4.984-1.166-2.154-1.748-4.655-1.748-7.503s.582-5.331 1.748-7.449c1.201-2.154 2.822-3.815 4.861-4.983 2.075-1.205 4.406-1.808 6.991-1.808 3.204 0 5.899.84 8.084 2.52 2.221 1.679 3.623 3.924 4.206 6.736h-4.698c-.364-1.68-1.256-2.976-2.676-3.889-1.42-.949-3.077-1.424-4.97-1.424-1.53 0-2.968.384-4.315 1.15-1.348.767-2.44 1.917-3.278 3.45-.837 1.534-1.256 3.433-1.256 5.697 0 2.263.419 4.162 1.256 5.696.838 1.533 1.93 2.701 3.278 3.505a8.584 8.584 0 0 0 4.315 1.15c1.893 0 3.55-.457 4.97-1.37 1.42-.949 2.312-2.282 2.676-3.998h4.698c-.547 2.739-1.93 4.966-4.152 6.682-2.221 1.716-4.934 2.574-8.138 2.574ZM220.302 70.153V42.988h4.151l.382 5.203c.838-1.789 2.112-3.213 3.823-4.272 1.712-1.058 3.824-1.588 6.336-1.588v4.82h-1.256c-1.602 0-3.077.292-4.424.876-1.347.548-2.422 1.497-3.223 2.848-.801 1.35-1.201 3.213-1.201 5.586v13.692h-4.588ZM250.218 70.81c-2.585 0-4.879-.584-6.882-1.752-2.003-1.205-3.587-2.867-4.752-4.984-1.129-2.118-1.693-4.619-1.693-7.503 0-2.848.564-5.331 1.693-7.449 1.129-2.154 2.695-3.815 4.698-4.983 2.039-1.205 4.387-1.808 7.045-1.808 2.622 0 4.88.603 6.773 1.807 1.93 1.169 3.405 2.72 4.424 4.656 1.02 1.935 1.53 4.016 1.53 6.243 0 .402-.018.803-.055 1.205v1.37h-21.575c.11 2.08.583 3.815 1.421 5.202.874 1.351 1.948 2.373 3.222 3.067a8.753 8.753 0 0 0 4.151 1.04c1.894 0 3.478-.437 4.752-1.314 1.275-.876 2.203-2.063 2.786-3.56h4.533c-.728 2.52-2.13 4.62-4.206 6.299-2.039 1.643-4.66 2.464-7.865 2.464Zm0-24.59c-2.185 0-4.133.675-5.844 2.026-1.675 1.314-2.64 3.25-2.895 5.805h17.041c-.109-2.446-.946-4.363-2.512-5.75-1.566-1.388-3.496-2.081-5.79-2.081ZM277.841 70.153c-2.476 0-4.424-.603-5.844-1.807-1.42-1.205-2.13-3.378-2.13-6.518V46.877h-4.698v-3.889h4.698l.601-6.517h3.987v6.517h7.974v3.889h-7.974v14.951c0 1.716.346 2.885 1.038 3.505.691.585 1.911.877 3.659.877h2.84v3.943h-4.151ZM297.544 70.81c-3.241 0-5.936-.821-8.084-2.464-2.149-1.643-3.405-3.87-3.769-6.682h4.697c.292 1.424 1.038 2.665 2.24 3.724 1.238 1.022 2.895 1.534 4.97 1.534 1.93 0 3.35-.402 4.26-1.205.911-.84 1.366-1.826 1.366-2.958 0-1.643-.601-2.738-1.803-3.286-1.165-.547-2.822-1.04-4.97-1.478a28.114 28.114 0 0 1-4.369-1.26c-1.457-.548-2.677-1.315-3.66-2.3-.983-1.023-1.475-2.355-1.475-3.998 0-2.373.874-4.309 2.622-5.806 1.784-1.533 4.188-2.3 7.21-2.3 2.876 0 5.225.73 7.046 2.19 1.857 1.425 2.931 3.47 3.222 6.135h-4.533c-.182-1.388-.783-2.465-1.803-3.231-.983-.804-2.312-1.205-3.987-1.205-1.638 0-2.913.346-3.823 1.04-.874.694-1.311 1.607-1.311 2.739 0 1.095.564 1.953 1.693 2.574 1.165.62 2.731 1.15 4.697 1.588 1.675.365 3.259.821 4.752 1.37 1.53.51 2.768 1.295 3.714 2.354.984 1.022 1.475 2.52 1.475 4.491.037 2.446-.892 4.473-2.785 6.08-1.857 1.57-4.388 2.354-7.592 2.354ZM327.019 70.153V31.816h5.353l13.764 26.726 13.655-26.726h5.407v38.337h-4.588V40.031l-12.781 24.645h-3.441l-12.781-24.59v30.067h-4.588ZM380.911 70.81c-2.258 0-4.133-.383-5.626-1.15-1.493-.767-2.604-1.789-3.332-3.067a8.266 8.266 0 0 1-1.092-4.162c0-2.775 1.056-4.911 3.168-6.408 2.112-1.497 4.988-2.245 8.63-2.245h7.319v-.33c0-2.372-.619-4.161-1.857-5.366-1.238-1.242-2.895-1.862-4.971-1.862-1.784 0-3.332.456-4.642 1.369-1.275.876-2.076 2.172-2.404 3.888h-4.697c.182-1.971.838-3.633 1.966-4.983 1.166-1.352 2.604-2.374 4.315-3.068 1.712-.73 3.532-1.095 5.462-1.095 3.787 0 6.627 1.022 8.521 3.067 1.93 2.008 2.895 4.692 2.895 8.05v16.705h-4.097l-.273-4.874c-.765 1.533-1.893 2.848-3.386 3.943-1.457 1.059-3.423 1.588-5.899 1.588Zm.71-3.888c1.748 0 3.241-.457 4.479-1.37a8.66 8.66 0 0 0 2.895-3.56c.655-1.46.983-2.993.983-4.6v-.055h-6.937c-2.695 0-4.606.475-5.735 1.424-1.092.913-1.639 2.063-1.639 3.45 0 1.425.51 2.575 1.53 3.451 1.056.84 2.53 1.26 4.424 1.26ZM400.356 70.153V42.988h4.151l.273 4.875a9.86 9.86 0 0 1 3.769-4.053c1.639-.986 3.496-1.479 5.571-1.479 3.205 0 5.754.986 7.647 2.958 1.93 1.935 2.895 4.929 2.895 8.981v15.883h-4.588v-15.39c0-5.659-2.331-8.489-6.991-8.489-2.331 0-4.279.858-5.845 2.575-1.529 1.679-2.294 4.089-2.294 7.229v14.075h-4.588ZM439.533 70.81c-2.258 0-4.133-.383-5.626-1.15-1.493-.767-2.603-1.789-3.332-3.067a8.266 8.266 0 0 1-1.092-4.162c0-2.775 1.056-4.911 3.168-6.408 2.112-1.497 4.988-2.245 8.63-2.245h7.319v-.33c0-2.372-.619-4.161-1.857-5.366-1.238-1.242-2.895-1.862-4.971-1.862-1.784 0-3.331.456-4.642 1.369-1.275.876-2.076 2.172-2.404 3.888h-4.697c.182-1.971.838-3.633 1.966-4.983 1.166-1.352 2.604-2.374 4.315-3.068 1.712-.73 3.532-1.095 5.462-1.095 3.787 0 6.627 1.022 8.521 3.067 1.93 2.008 2.895 4.692 2.895 8.05v16.705h-4.097l-.273-4.874c-.764 1.533-1.893 2.848-3.386 3.943-1.457 1.059-3.423 1.588-5.899 1.588Zm.71-3.888c1.748 0 3.241-.457 4.479-1.37a8.66 8.66 0 0 0 2.895-3.56c.655-1.46.983-2.993.983-4.6v-.055h-6.937c-2.694 0-4.606.475-5.735 1.424-1.092.913-1.639 2.063-1.639 3.45 0 1.425.51 2.575 1.53 3.451 1.056.84 2.531 1.26 4.424 1.26ZM469.684 61.61c-1.53 0-2.931-.202-4.206-.603l-2.731 2.574c.401.292.892.548 1.475.767.619.182 1.493.365 2.622.547 1.128.146 2.712.31 4.751.493 3.642.256 6.245 1.096 7.811 2.52 1.566 1.424 2.349 3.286 2.349 5.586 0 1.57-.437 3.067-1.311 4.49-.838 1.425-2.149 2.593-3.933 3.506-1.748.913-4.005 1.369-6.773 1.369-2.439 0-4.606-.329-6.499-.986-1.894-.62-3.369-1.588-4.425-2.903-1.055-1.277-1.583-2.902-1.583-4.874 0-1.022.273-2.136.819-3.34.546-1.169 1.566-2.282 3.059-3.341a13.725 13.725 0 0 1-2.076-1.041 13.173 13.173 0 0 1-1.529-1.314V63.8l4.642-4.6c-2.148-1.826-3.222-4.236-3.222-7.23 0-1.789.418-3.414 1.256-4.874.837-1.46 2.057-2.61 3.66-3.45 1.602-.877 3.55-1.315 5.844-1.315 1.566 0 2.986.22 4.26.657h9.995v3.45l-5.079.22c1.056 1.533 1.584 3.304 1.584 5.312 0 1.79-.437 3.414-1.311 4.874-.838 1.461-2.057 2.63-3.66 3.506-1.565.84-3.495 1.26-5.789 1.26Zm0-3.78c1.93 0 3.459-.493 4.588-1.478 1.165-1.023 1.748-2.483 1.748-4.382 0-1.862-.583-3.286-1.748-4.272-1.129-1.022-2.658-1.533-4.588-1.533-1.967 0-3.532.511-4.698 1.533-1.128.986-1.693 2.41-1.693 4.272 0 1.899.565 3.36 1.693 4.382 1.166.985 2.731 1.478 4.698 1.478Zm-7.975 15.828c0 1.826.765 3.177 2.294 4.053 1.53.913 3.441 1.37 5.735 1.37 2.258 0 4.06-.494 5.408-1.48 1.383-.986 2.075-2.3 2.075-3.943 0-1.168-.473-2.19-1.42-3.067-.947-.84-2.694-1.332-5.243-1.479-2.003-.146-3.733-.328-5.189-.547-1.493.803-2.476 1.661-2.95 2.574-.473.95-.71 1.789-.71 2.52ZM499.136 70.81c-2.585 0-4.879-.584-6.882-1.752-2.003-1.205-3.587-2.867-4.752-4.984-1.129-2.118-1.693-4.619-1.693-7.503 0-2.848.564-5.331 1.693-7.449 1.129-2.154 2.695-3.815 4.697-4.983 2.04-1.205 4.388-1.808 7.046-1.808 2.622 0 4.88.603 6.773 1.807 1.93 1.169 3.405 2.72 4.424 4.656 1.02 1.935 1.53 4.016 1.53 6.243 0 .402-.019.803-.055 1.205v1.37h-21.575c.11 2.08.583 3.815 1.42 5.202.874 1.351 1.949 2.373 3.223 3.067a8.753 8.753 0 0 0 4.151 1.04c1.894 0 3.478-.437 4.752-1.314 1.274-.876 2.203-2.063 2.786-3.56h4.533c-.728 2.52-2.13 4.62-4.206 6.299-2.039 1.643-4.661 2.464-7.865 2.464Zm0-24.59c-2.185 0-4.133.675-5.844 2.026-1.675 1.314-2.64 3.25-2.895 5.805h17.041c-.109-2.446-.947-4.363-2.512-5.75-1.566-1.388-3.496-2.081-5.79-2.081ZM516.96 70.153V42.988h4.151l.383 5.203c.837-1.789 2.112-3.213 3.823-4.272 1.712-1.058 3.824-1.588 6.336-1.588v4.82h-1.256c-1.602 0-3.077.292-4.424.876-1.348.548-2.422 1.497-3.223 2.848-.801 1.35-1.202 3.213-1.202 5.586v13.692h-4.588Z\"/></svg>\n`;\n","import { Directive, EventEmitter, Input, Output } from \"@angular/core\";\n\n/**\n * Base class used in `NavGroupComponent` and `NavItemComponent`\n */\n@Directive()\nexport abstract class NavBaseComponent {\n  /**\n   * Text to display in main content\n   */\n  @Input() text: string;\n\n  /**\n   * `aria-label` for main content\n   */\n  @Input() ariaLabel: string;\n\n  /**\n   * Optional icon, e.g. `\"bwi-collection\"`\n   */\n  @Input() icon: string;\n\n  /**\n   * Route to be passed to internal `routerLink`\n   */\n  @Input() route: string | any[];\n\n  /**\n   * If this item is used within a tree, set `variant` to `\"tree\"`\n   */\n  @Input() variant: \"default\" | \"tree\" = \"default\";\n\n  /**\n   * Depth level when nested inside of a `'tree'` variant\n   */\n  @Input() treeDepth = 0;\n\n  /**\n   * If `true`, do not change styles when nav item is active.\n   */\n  @Input() hideActiveStyles = false;\n\n  /**\n   * Fires when main content is clicked\n   */\n  @Output() mainContentClicked: EventEmitter<MouseEvent> = new EventEmitter();\n}\n","<div\n  class=\"tw-relative\"\n  [ngClass]=\"[\n    showActiveStyles ? 'tw-bg-background-alt4' : 'tw-bg-background-alt3',\n    fvwStyles$ | async\n  ]\"\n>\n  <div\n    [ngStyle]=\"{\n      'padding-left': (variant === 'tree' ? 2.5 : 1) + treeDepth * 1.5 + 'rem'\n    }\"\n    class=\"tw-relative tw-flex tw-items-center tw-pr-4\"\n    [ngClass]=\"[variant === 'tree' ? 'tw-py-1' : 'tw-py-2']\"\n  >\n    <div\n      #slotStart\n      class=\"[&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*:hover]:!tw-border-text-alt2 [&>*]:!tw-text-alt2\"\n    >\n      <ng-content select=\"[slot-start]\"></ng-content>\n    </div>\n    <!-- Default content for #slotStart (for consistent sizing) -->\n    <div\n      *ngIf=\"slotStart.childElementCount === 0\"\n      [ngClass]=\"{\n        'tw-w-0': variant !== 'tree'\n      }\"\n    >\n      <button\n        type=\"button\"\n        class=\"tw-invisible\"\n        [bitIconButton]=\"'bwi-angle-down'\"\n        size=\"small\"\n        aria-hidden=\"true\"\n      ></button>\n    </div>\n\n    <ng-container *ngIf=\"route; then isAnchor; else isButton\"></ng-container>\n\n    <!-- Main content of `NavItem` -->\n    <ng-template #anchorAndButtonContent>\n      <i class=\"bwi bwi-fw tw-text-alt2 tw-mx-1 {{ icon }}\"></i\n      ><span [ngClass]=\"showActiveStyles ? 'tw-font-bold' : 'tw-font-semibold'\">{{ text }}</span>\n    </ng-template>\n\n    <!-- Show if a value was passed to `this.to` -->\n    <ng-template #isAnchor>\n      <!-- The `fvw` class passes focus to `this.focusVisibleWithin$` -->\n      <!-- The following `class` field should match the `#isButton` class field below -->\n      <a\n        class=\"fvw tw-w-full tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        [routerLink]=\"route\"\n        [attr.aria-label]=\"ariaLabel || text\"\n        routerLinkActive\n        [routerLinkActiveOptions]=\"rlaOptions\"\n        [ariaCurrentWhenActive]=\"'page'\"\n        (isActiveChange)=\"setActive($event)\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </a>\n    </ng-template>\n\n    <!-- Show if `this.to` is falsy -->\n    <ng-template #isButton>\n      <!-- Class field should match `#isAnchor` class field above -->\n      <button\n        type=\"button\"\n        class=\"fvw tw-w-full tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </button>\n    </ng-template>\n\n    <div\n      class=\"tw-flex tw-gap-1 [&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*:hover]:!tw-border-text-alt2 [&>*]:!tw-text-alt2\"\n    >\n      <ng-content select=\"[slot-end]\"></ng-content>\n    </div>\n  </div>\n</div>\n","import { Component, HostListener, Input } from \"@angular/core\";\nimport { IsActiveMatchOptions } from \"@angular/router\";\nimport { BehaviorSubject, map } from \"rxjs\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\n\n@Component({\n  selector: \"bit-nav-item\",\n  templateUrl: \"./nav-item.component.html\",\n})\nexport class NavItemComponent extends NavBaseComponent {\n  /**\n   * Is `true` if `to` matches the current route\n   */\n  private _active = false;\n  protected setActive(isActive: boolean) {\n    this._active = isActive;\n  }\n  protected get showActiveStyles() {\n    return this._active && !this.hideActiveStyles;\n  }\n  protected rlaOptions: IsActiveMatchOptions = {\n    paths: \"subset\",\n    queryParams: \"exact\",\n    fragment: \"ignored\",\n    matrixParams: \"ignored\",\n  };\n\n  /**\n   * if `true`, use `exact` match for path instead of `subset`.\n   */\n  @Input() set exactMatch(val: boolean) {\n    this.rlaOptions.paths = val ? \"exact\" : \"subset\";\n  }\n\n  /**\n   * The design spec calls for the an outline to wrap the entire element when the template's anchor/button has :focus-visible.\n   * Usually, we would use :focus-within for this. However, that matches when a child element has :focus instead of :focus-visible.\n   *\n   * Currently, the browser does not have a pseudo selector that combines these two, e.g. :focus-visible-within (WICG/focus-visible#151)\n   * To make our own :focus-visible-within functionality, we use event delegation on the host and manually check if the focus target (denoted with the .fvw class) matches :focus-visible. We then map that state to some styles, so the entire component can have an outline.\n   */\n  protected focusVisibleWithin$ = new BehaviorSubject(false);\n  protected fvwStyles$ = this.focusVisibleWithin$.pipe(\n    map((value) => (value ? \"tw-z-10 tw-rounded tw-outline-none tw-ring tw-ring-text-alt2\" : \"\"))\n  );\n  @HostListener(\"focusin\", [\"$event.target\"])\n  onFocusIn(target: HTMLElement) {\n    this.focusVisibleWithin$.next(target.matches(\".fvw:focus-visible\"));\n  }\n  @HostListener(\"focusout\")\n  onFocusOut() {\n    this.focusVisibleWithin$.next(false);\n  }\n}\n","<!-- This a higher order component that composes `NavItemComponent`  -->\n<bit-nav-item\n  [text]=\"text\"\n  [icon]=\"icon\"\n  [route]=\"route\"\n  [variant]=\"variant\"\n  (mainContentClicked)=\"toggle()\"\n  [treeDepth]=\"treeDepth\"\n  (mainContentClicked)=\"mainContentClicked.emit()\"\n  [ariaLabel]=\"ariaLabel\"\n  [exactMatch]=\"exactMatch\"\n>\n  <ng-template #button>\n    <button\n      type=\"button\"\n      class=\"tw-ml-auto\"\n      [bitIconButton]=\"\n        open ? 'bwi-angle-up' : variant === 'tree' ? 'bwi-angle-right' : 'bwi-angle-down'\n      \"\n      [buttonType]=\"'main'\"\n      (click)=\"toggle($event)\"\n      size=\"small\"\n      [title]=\"'toggleCollapse' | i18n\"\n      aria-haspopup=\"true\"\n      [attr.aria-expanded]=\"open.toString()\"\n      [attr.aria-controls]=\"contentId\"\n      [attr.aria-label]=\"['toggleCollapse' | i18n, text].join(' ')\"\n    ></button>\n  </ng-template>\n\n  <!-- Show toggle to the left for trees otherwise to the right -->\n  <ng-container slot-start *ngIf=\"variant === 'tree'\">\n    <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n  </ng-container>\n  <ng-container slot-end *ngIf=\"variant !== 'tree'\">\n    <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n  </ng-container>\n</bit-nav-item>\n\n<!-- [attr.aria-controls] of the above button expects a unique ID on the controlled element -->\n<div\n  *ngIf=\"open\"\n  [attr.id]=\"contentId\"\n  [attr.aria-label]=\"[text, 'submenu' | i18n].join(' ')\"\n  role=\"group\"\n>\n  <ng-content></ng-content>\n</div>\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  QueryList,\n} from \"@angular/core\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\nimport { NavItemComponent } from \"./nav-item.component\";\n\n@Component({\n  selector: \"bit-nav-group\",\n  templateUrl: \"./nav-group.component.html\",\n})\nexport class NavGroupComponent extends NavBaseComponent implements AfterContentInit {\n  @ContentChildren(forwardRef(() => NavGroupComponent), {\n    descendants: true,\n  })\n  nestedGroups!: QueryList<NavGroupComponent>;\n\n  @ContentChildren(NavItemComponent, {\n    descendants: true,\n  })\n  nestedItems!: QueryList<NavItemComponent>;\n\n  /**\n   * UID for `[attr.aria-controls]`\n   */\n  protected contentId = Math.random().toString(36).substring(2);\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n\n  /**\n   * if `true`, use `exact` match for path instead of `subset`.\n   */\n  @Input() exactMatch: boolean;\n\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n\n  /**\n   * - For any nested NavGroupComponents or NavItemComponents, increment the `treeDepth` by 1.\n   */\n  private initNestedStyles() {\n    if (this.variant !== \"tree\") {\n      return;\n    }\n    [...this.nestedGroups, ...this.nestedItems].forEach((navGroupOrItem) => {\n      navGroupOrItem.treeDepth += 1;\n    });\n  }\n\n  ngAfterContentInit(): void {\n    this.initNestedStyles();\n  }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-nav-divider\",\n  templateUrl: \"./nav-divider.component.html\",\n})\nexport class NavDividerComponent {}\n","<div class=\"tw-h-px tw-w-full tw-bg-secondary-300\"></div>\n","<bit-nav-group\n  *ngIf=\"activeOrganization$ | async as activeOrganization\"\n  [text]=\"activeOrganization.name\"\n  [ariaLabel]=\"['organization' | i18n, activeOrganization.name].join(' ')\"\n  icon=\"bwi-business\"\n  [route]=\"['../', activeOrganization.id]\"\n  [(open)]=\"open\"\n  [exactMatch]=\"true\"\n>\n  <ng-container *ngIf=\"organizations$ | async as organizations\">\n    <bit-nav-item\n      *ngFor=\"let org of organizations\"\n      [text]=\"org.name\"\n      [ariaLabel]=\"['organization' | i18n, org.name].join(' ')\"\n      [route]=\"['../', org.id]\"\n      (mainContentClicked)=\"toggle()\"\n      [hideActiveStyles]=\"true\"\n    >\n    </bit-nav-item>\n  </ng-container>\n  <bit-nav-item\n    *ngIf=\"!hideNewButton\"\n    icon=\"bwi-plus\"\n    [text]=\"'newOrganization' | i18n\"\n    route=\"/create-organization\"\n  ></bit-nav-item>\n  <bit-nav-divider></bit-nav-divider>\n</bit-nav-group>\n","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport type { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\n\n@Component({\n  selector: \"org-switcher\",\n  templateUrl: \"org-switcher.component.html\",\n})\nexport class OrgSwitcherComponent {\n  protected organizations$: Observable<Organization[]> =\n    this.organizationService.organizations$.pipe(\n      map((orgs) => orgs.filter(this.filter).sort((a, b) => a.name.localeCompare(b.name)))\n    );\n  protected activeOrganization$: Observable<Organization> = combineLatest([\n    this.route.paramMap,\n    this.organizations$,\n  ]).pipe(map(([params, orgs]) => orgs.find((org) => org.id === params.get(\"organizationId\"))));\n\n  /**\n   * Filter function for displayed organizations in the `org-switcher`\n   * @example\n   * const smFilter = (org: Organization) => org.canAccessSecretsManager\n   * // <org-switcher [filter]=\"smFilter\">\n   */\n  @Input()\n  filter: (org: Organization) => boolean = () => true;\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  /**\n   * Visibility of the New Organization button\n   * (Temporary; will be removed when ability to create organizations is added to SM.)\n   */\n  @Input()\n  hideNewButton = false;\n\n  constructor(private route: ActivatedRoute, private organizationService: OrganizationService) {}\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n}\n","<a routerLink=\".\" class=\"tw-m-5 tw-mt-7 tw-block\">\n  <bit-icon [icon]=\"logo\"></bit-icon>\n</a>\n\n<org-switcher [filter]=\"orgFilter\" [hideNewButton]=\"true\"></org-switcher>\n<bit-nav-item icon=\"bwi-collection\" [text]=\"'projects' | i18n\" route=\"projects\"></bit-nav-item>\n<bit-nav-item icon=\"bwi-key\" [text]=\"'secrets' | i18n\" route=\"secrets\"></bit-nav-item>\n<bit-nav-item\n  icon=\"bwi-wrench\"\n  [text]=\"'serviceAccounts' | i18n\"\n  route=\"service-accounts\"\n></bit-nav-item>\n<bit-nav-item\n  icon=\"bwi-trash\"\n  [text]=\"'trash' | i18n\"\n  route=\"trash\"\n  *ngIf=\"isAdmin$ | async\"\n></bit-nav-item>\n<bit-nav-group icon=\"bwi-cog\" [text]=\"'settings' | i18n\" *ngIf=\"isAdmin$ | async\">\n  <bit-nav-item [text]=\"'importData' | i18n\" route=\"settings/import\"></bit-nav-item>\n  <bit-nav-item [text]=\"'exportData' | i18n\" route=\"settings/export\"></bit-nav-item>\n</bit-nav-group>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\n\nimport { SecretsManagerLogo } from \"./secrets-manager-logo\";\n\n@Component({\n  selector: \"sm-navigation\",\n  templateUrl: \"./navigation.component.html\",\n})\nexport class NavigationComponent {\n  protected readonly logo = SecretsManagerLogo;\n  protected orgFilter = (org: Organization) => org.canAccessSecretsManager;\n  protected isAdmin$ = this.route.params.pipe(\n    map((params) => this.organizationService.get(params.organizationId)?.isAdmin)\n  );\n\n  constructor(private route: ActivatedRoute, private organizationService: OrganizationService) {}\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { ProgressComponent } from \"./progress.component\";\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [ProgressComponent],\n  declarations: [ProgressComponent],\n})\nexport class ProgressModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { ProgressModule } from \"@bitwarden/components\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { OnboardingTaskComponent } from \"./onboarding-task.component\";\nimport { OnboardingComponent } from \"./onboarding.component\";\n\n@NgModule({\n  imports: [SharedModule, ProgressModule],\n  exports: [OnboardingComponent, OnboardingTaskComponent],\n  declarations: [OnboardingComponent, OnboardingTaskComponent],\n})\nexport class OnboardingModule {}\n","<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ data.title | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.details.length }}\n      {{ data.subTitle | i18n }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    {{ data.message | i18n }}\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ data.columnTitle | i18n }}</th>\n          <th bitCell>{{ \"error\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let detail of data.details\">\n          <td bitCell>{{ detail.name }}</td>\n          <td bitCell>{{ detail.errorMessage }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button bitButton buttonType=\"primary\" bitDialogClose type=\"button\">\n      {{ \"close\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nexport interface BulkStatusDetails {\n  title: string;\n  subTitle: string;\n  columnTitle: string;\n  message: string;\n  details: BulkOperationStatus[];\n}\n\nexport class BulkOperationStatus {\n  id: string;\n  name: string;\n  errorMessage?: string;\n}\n\n@Component({\n  selector: \"sm-bulk-status-dialog\",\n  templateUrl: \"./bulk-status-dialog.component.html\",\n})\nexport class BulkStatusDialogComponent implements OnInit {\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: BulkStatusDetails) {}\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.title ||\n      !this.data.subTitle ||\n      !this.data.columnTitle ||\n      !this.data.message ||\n      !(this.data.details?.length >= 1)\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The bulk status dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n}\n","export class ProjectListView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n","export class ProjectView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n\nexport class ProjectPermissionDetailsView extends ProjectView {\n  read: boolean;\n  write: boolean;\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class ProjectRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n\nexport class ProjectPermissionDetailsResponse extends ProjectResponse {\n  read: boolean;\n  write: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\nimport { ProjectPermissionDetailsView, ProjectView } from \"../models/view/project.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { ProjectRequest } from \"./models/requests/project.request\";\nimport { ProjectListItemResponse } from \"./models/responses/project-list-item.response\";\nimport {\n  ProjectPermissionDetailsResponse,\n  ProjectResponse,\n} from \"./models/responses/project.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProjectService {\n  protected _project = new Subject<ProjectView>();\n  project$ = this._project.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getByProjectId(projectId: string): Promise<ProjectPermissionDetailsView> {\n    const r = await this.apiService.send(\"GET\", \"/projects/\" + projectId, null, true, true);\n    const projectResponse = new ProjectPermissionDetailsResponse(r);\n    return await this.createProjectPermissionDetailsView(projectResponse);\n  }\n\n  async getProjects(organizationId: string): Promise<ProjectListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ProjectListItemResponse);\n    return await this.createProjectsListView(organizationId, results.data);\n  }\n\n  async create(organizationId: string, projectView: ProjectView): Promise<ProjectView> {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      request,\n      true,\n      true\n    );\n\n    const project = await this.createProjectView(new ProjectResponse(r));\n    this._project.next(project);\n    return project;\n  }\n\n  async update(organizationId: string, projectView: ProjectView) {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\"PUT\", \"/projects/\" + projectView.id, request, true, true);\n    this._project.next(await this.createProjectView(new ProjectResponse(r)));\n  }\n\n  async delete(projects: ProjectListView[]): Promise<BulkOperationStatus[]> {\n    const projectIds = projects.map((project) => project.id);\n    const r = await this.apiService.send(\"POST\", \"/projects/delete\", projectIds, true, true);\n    this._project.next(null);\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = projects.find((project) => project.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getProjectRequest(\n    organizationId: string,\n    projectView: ProjectView\n  ): Promise<ProjectRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new ProjectRequest();\n    request.name = await this.encryptService.encrypt(projectView.name, orgKey);\n\n    return request;\n  }\n\n  private async createProjectView(\n    projectResponse: ProjectResponse | ProjectPermissionDetailsResponse\n  ) {\n    const orgKey = await this.getOrganizationKey(projectResponse.organizationId);\n\n    const projectView = new ProjectView();\n    projectView.id = projectResponse.id;\n    projectView.organizationId = projectResponse.organizationId;\n    projectView.creationDate = projectResponse.creationDate;\n    projectView.revisionDate = projectResponse.revisionDate;\n    projectView.name = await this.encryptService.decryptToUtf8(\n      new EncString(projectResponse.name),\n      orgKey\n    );\n    return projectView;\n  }\n\n  private async createProjectPermissionDetailsView(\n    projectResponse: ProjectPermissionDetailsResponse\n  ): Promise<ProjectPermissionDetailsView> {\n    return {\n      ...(await this.createProjectView(projectResponse)),\n      read: projectResponse.read,\n      write: projectResponse.write,\n    };\n  }\n\n  private async createProjectsListView(\n    organizationId: string,\n    projects: ProjectListItemResponse[]\n  ): Promise<ProjectListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      projects.map(async (s: ProjectListItemResponse) => {\n        const projectListView = new ProjectListView();\n        projectListView.id = s.id;\n        projectListView.organizationId = s.organizationId;\n        projectListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        projectListView.creationDate = s.creationDate;\n        projectListView.revisionDate = s.revisionDate;\n        return projectListView;\n      })\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>\n      <span>{{ title | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        <ng-container *ngIf=\"data.projects.length == 1\">\n          {{ data.projects[0].name }}\n        </ng-container>\n        <ng-container *ngIf=\"data.projects.length > 1\">\n          {{ data.projects.length }}\n          {{ \"projects\" | i18n }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-callout type=\"warning\" [title]=\"'warning' | i18n\">\n        {{ dialogContent }}\n      </bit-callout>\n      <bit-form-field>\n        <bit-label>{{ dialogConfirmationLabel }}</bit-label>\n        <input bitInput formControlName=\"confirmDelete\" />\n      </bit-form-field>\n    </div>\n\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"danger\" bitFormButton>\n        {{ title | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  AbstractControl,\n} from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\nexport interface ProjectDeleteOperation {\n  projects: ProjectListView[];\n}\n\n@Component({\n  selector: \"sm-project-delete-dialog\",\n  templateUrl: \"./project-delete-dialog.component.html\",\n})\nexport class ProjectDeleteDialogComponent implements OnInit {\n  formGroup = new FormGroup({\n    confirmDelete: new FormControl(\"\", [this.matchConfirmationMessageValidator()]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: ProjectDeleteOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit(): void {\n    if (!(this.data.projects?.length >= 1)) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The project delete dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n\n  get title() {\n    return this.data.projects.length === 1 ? \"deleteProject\" : \"deleteProjects\";\n  }\n\n  get dialogContent() {\n    return this.data.projects.length === 1\n      ? this.i18nService.t(\"deleteProjectDialogMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsDialogMessage\");\n  }\n\n  get dialogConfirmationLabel() {\n    return this.i18nService.t(\"deleteProjectInputLabel\", this.dialogConfirmationMessage);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    await this.delete();\n    this.dialogRef.close();\n  };\n\n  async delete() {\n    const bulkResponses = await this.projectService.delete(this.data.projects);\n\n    if (bulkResponses.find((response) => response.errorMessage)) {\n      this.openBulkStatusDialog(bulkResponses.filter((response) => response.errorMessage));\n      return;\n    }\n\n    const message = this.data.projects.length === 1 ? \"deleteProjectToast\" : \"deleteProjectsToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  }\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteProjects\",\n        subTitle: \"projects\",\n        columnTitle: \"projectName\",\n        message: \"bulkDeleteProjectsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n\n  private get dialogConfirmationMessage() {\n    return this.data.projects?.length === 1\n      ? this.i18nService.t(\"deleteProjectConfirmMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsConfirmMessage\", this.data.projects?.length.toString());\n  }\n\n  private matchConfirmationMessageValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (this.dialogConfirmationMessage.toLowerCase() == control.value.toLowerCase()) {\n        return null;\n      } else {\n        return {\n          confirmationDoesntMatchError: {\n            message: this.i18nService.t(\"smConfirmationRequired\"),\n          },\n        };\n      }\n    };\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { ProjectService } from \"../../projects/project.service\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface ProjectOperation {\n  organizationId: string;\n  operation: OperationType;\n  projectId?: string;\n}\n\n@Component({\n  selector: \"sm-project-dialog\",\n  templateUrl: \"./project-dialog.component.html\",\n})\nexport class ProjectDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required]),\n  });\n  protected loading = false;\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ProjectOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private router: Router\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation === OperationType.Edit && this.data.projectId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The project dialog was not called with the appropriate operation values.`);\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const project: ProjectView = await this.projectService.getByProjectId(this.data.projectId);\n    this.loading = false;\n    this.formGroup.setValue({ name: project.name });\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newProject\" : \"editProject\";\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const projectView = this.getProjectView();\n    if (this.data.operation === OperationType.Add) {\n      const newProject = await this.createProject(projectView);\n      this.router.navigate([\"sm\", this.data.organizationId, \"projects\", newProject.id]);\n    } else {\n      projectView.id = this.data.projectId;\n      await this.updateProject(projectView);\n    }\n    this.dialogRef.close();\n  };\n\n  private async createProject(projectView: ProjectView) {\n    const newProject = await this.projectService.create(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectCreated\"));\n    return newProject;\n  }\n\n  private async updateProject(projectView: ProjectView) {\n    await this.projectService.update(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectSaved\"));\n  }\n\n  private getProjectView() {\n    const projectView = new ProjectView();\n    projectView.organizationId = this.data.organizationId;\n    projectView.name = this.formGroup.value.name;\n    return projectView;\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <span bitDialogTitle>{{ title | i18n }}</span>\n    <span bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <bit-form-field *ngIf=\"!loading\">\n        <bit-label>{{ \"projectName\" | i18n }}</bit-label>\n        <input formControlName=\"name\" maxlength=\"1000\" bitInput />\n      </bit-form-field>\n    </span>\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretListView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n  read: boolean;\n  write: boolean;\n}\n","export class SecretProjectView {\n  id: string;\n  name: string;\n}\n","import { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretView {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n\n  read: boolean;\n  write: boolean;\n}\n","export class SecretRequest {\n  key: string;\n  value: string;\n  note: string;\n  projectIds?: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretProjectResponse extends BaseResponse {\n  id: string;\n  name: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectResponse[];\n  read: boolean;\n  write: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n\n    const project = this.getResponseProperty(\"projects\");\n    this.projects = project == null ? null : project.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretListItemResponse } from \"./secret-list-item.response\";\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretWithProjectsListResponse extends BaseResponse {\n  secrets: SecretListItemResponse[];\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const secrets = this.getResponseProperty(\"secrets\");\n    const projects = this.getResponseProperty(\"projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n    this.secrets = secrets == null ? [] : secrets.map((dr: any) => new SecretListItemResponse(dr));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n\n  read: boolean;\n  write: boolean;\n\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.note = this.getResponseProperty(\"Note\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n\n    const projects = this.getResponseProperty(\"Projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretProjectView } from \"../models/view/secret-project.view\";\nimport { SecretView } from \"../models/view/secret.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { SecretRequest } from \"./requests/secret.request\";\nimport { SecretListItemResponse } from \"./responses/secret-list-item.response\";\nimport { SecretProjectResponse } from \"./responses/secret-project.response\";\nimport { SecretWithProjectsListResponse } from \"./responses/secret-with-projects-list.response\";\nimport { SecretResponse } from \"./responses/secret.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretService {\n  protected _secret: Subject<SecretView> = new Subject();\n\n  secret$ = this._secret.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getBySecretId(secretId: string): Promise<SecretView> {\n    const r = await this.apiService.send(\"GET\", \"/secrets/\" + secretId, null, true, true);\n    const secretResponse = new SecretResponse(r);\n\n    return await this.createSecretView(secretResponse);\n  }\n\n  async getSecrets(organizationId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      null,\n      true,\n      true\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async getSecretsByProject(organizationId: string, projectId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/secrets\",\n      null,\n      true,\n      true\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async create(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      request,\n      true,\n      true\n    );\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async update(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\"PUT\", \"/secrets/\" + secretView.id, request, true, true);\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async delete(secrets: SecretListView[]): Promise<BulkOperationStatus[]> {\n    const secretIds = secrets.map((secret) => secret.id);\n    const r = await this.apiService.send(\"POST\", \"/secrets/delete\", secretIds, true, true);\n\n    this._secret.next(null);\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = secrets.find((secret) => secret.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  async getTrashedSecrets(organizationId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/secrets/\" + organizationId + \"/trash\",\n      null,\n      true,\n      true\n    );\n\n    return await this.createSecretsListView(organizationId, new SecretWithProjectsListResponse(r));\n  }\n\n  async deleteTrashed(organizationId: string, secretIds: string[]) {\n    await this.apiService.send(\n      \"POST\",\n      \"/secrets/\" + organizationId + \"/trash/empty\",\n      secretIds,\n      true,\n      true\n    );\n\n    this._secret.next(null);\n  }\n\n  async restoreTrashed(organizationId: string, secretIds: string[]) {\n    await this.apiService.send(\n      \"POST\",\n      \"/secrets/\" + organizationId + \"/trash/restore\",\n      secretIds,\n      true,\n      true\n    );\n\n    this._secret.next(null);\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getSecretRequest(\n    organizationId: string,\n    secretView: SecretView\n  ): Promise<SecretRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new SecretRequest();\n    const [key, value, note] = await Promise.all([\n      this.encryptService.encrypt(secretView.name, orgKey),\n      this.encryptService.encrypt(secretView.value, orgKey),\n      this.encryptService.encrypt(secretView.note, orgKey),\n    ]);\n    request.key = key.encryptedString;\n    request.value = value.encryptedString;\n    request.note = note.encryptedString;\n    request.projectIds = [];\n\n    secretView.projects?.forEach((e) => request.projectIds.push(e.id));\n\n    return request;\n  }\n\n  private async createSecretView(secretResponse: SecretResponse): Promise<SecretView> {\n    const orgKey = await this.getOrganizationKey(secretResponse.organizationId);\n\n    const secretView = new SecretView();\n    secretView.id = secretResponse.id;\n    secretView.organizationId = secretResponse.organizationId;\n    secretView.creationDate = secretResponse.creationDate;\n    secretView.revisionDate = secretResponse.revisionDate;\n\n    const [name, value, note] = await Promise.all([\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.name), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.value), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.note), orgKey),\n    ]);\n    secretView.name = name;\n    secretView.value = value;\n    secretView.note = note;\n\n    secretView.read = secretResponse.read;\n    secretView.write = secretResponse.write;\n\n    if (secretResponse.projects != null) {\n      secretView.projects = await this.decryptProjectsMappedToSecrets(\n        orgKey,\n        secretResponse.projects\n      );\n    }\n\n    return secretView;\n  }\n\n  private async createSecretsListView(\n    organizationId: string,\n    secrets: SecretWithProjectsListResponse\n  ): Promise<SecretListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n\n    const projectsMappedToSecretsView = await this.decryptProjectsMappedToSecrets(\n      orgKey,\n      secrets.projects\n    );\n\n    return await Promise.all(\n      secrets.secrets.map(async (s: SecretListItemResponse) => {\n        const secretListView = new SecretListView();\n        secretListView.id = s.id;\n        secretListView.organizationId = s.organizationId;\n        secretListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        secretListView.creationDate = s.creationDate;\n        secretListView.revisionDate = s.revisionDate;\n\n        const projectIds = s.projects?.map((p) => p.id);\n        secretListView.projects = projectsMappedToSecretsView.filter((p) =>\n          projectIds.includes(p.id)\n        );\n\n        secretListView.read = s.read;\n        secretListView.write = s.write;\n\n        return secretListView;\n      })\n    );\n  }\n\n  private async decryptProjectsMappedToSecrets(\n    orgKey: SymmetricCryptoKey,\n    projects: SecretProjectResponse[]\n  ): Promise<SecretProjectView[]> {\n    return await Promise.all(\n      projects.map(async (s: SecretProjectResponse) => {\n        const projectsMappedToSecretView = new SecretProjectView();\n        projectsMappedToSecretView.id = s.id;\n        projectsMappedToSecretView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        return projectsMappedToSecretView;\n      })\n    );\n  }\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    <div *ngIf=\"showSoftDeleteSecretWarning\">\n      {{ \"softDeleteSecretWarning\" | i18n }}\n    </div>\n    {{ \"deleteItemConfirmation\" | i18n }}\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"delete\">\n      {{ submitButtonText | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </div>\n</bit-simple-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { SecretService } from \"../secret.service\";\n\nexport interface SecretDeleteOperation {\n  secrets: SecretListView[];\n}\n\n@Component({\n  selector: \"sm-secret-delete-dialog\",\n  templateUrl: \"./secret-delete.component.html\",\n})\nexport class SecretDeleteDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) private data: SecretDeleteOperation,\n    private dialogService: DialogService\n  ) {}\n\n  showSoftDeleteSecretWarning = this.data.secrets.length === 1;\n\n  get title() {\n    return this.data.secrets.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  get submitButtonText() {\n    return this.data.secrets.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  delete = async () => {\n    const bulkResponses = await this.secretService.delete(this.data.secrets);\n\n    if (bulkResponses.find((response) => response.errorMessage)) {\n      this.openBulkStatusDialog(bulkResponses.filter((response) => response.errorMessage));\n      this.dialogRef.close(true);\n      return;\n    }\n\n    const message =\n      this.data.secrets.length === 1 ? \"softDeleteSuccessToast\" : \"softDeletesSuccessToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n\n    this.dialogRef.close(true);\n  };\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteSecrets\",\n        subTitle: \"secrets\",\n        columnTitle: \"name\",\n        message: \"bulkDeleteSecretsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { lastValueFrom, Subject } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport { SecretProjectView } from \"../../models/view/secret-project.view\";\nimport { SecretView } from \"../../models/view/secret.view\";\nimport { ProjectService } from \"../../projects/project.service\";\nimport { SecretService } from \"../secret.service\";\n\nimport { SecretDeleteDialogComponent, SecretDeleteOperation } from \"./secret-delete.component\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface SecretOperation {\n  organizationId: string;\n  operation: OperationType;\n  projectId?: string;\n  secretId?: string;\n}\n\n@Component({\n  selector: \"sm-secret-dialog\",\n  templateUrl: \"./secret-dialog.component.html\",\n})\nexport class SecretDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required]),\n    value: new FormControl(\"\", [Validators.required]),\n    notes: new FormControl(\"\"),\n    project: new FormControl(\"\", [Validators.required]),\n  });\n\n  private destroy$ = new Subject<void>();\n  private loading = true;\n  projects: ProjectListView[];\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: SecretOperation,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private projectService: ProjectService,\n    private dialogService: DialogService,\n    private organizationService: OrganizationService\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation === OperationType.Edit && this.data.secretId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The secret dialog was not called with the appropriate operation values.`);\n    }\n\n    if (this.data.projectId) {\n      this.formGroup.get(\"project\").setValue(this.data.projectId);\n    }\n\n    if (this.organizationService.get(this.data.organizationId)?.isAdmin) {\n      this.formGroup.get(\"project\").removeValidators(Validators.required);\n      this.formGroup.get(\"project\").updateValueAndValidity();\n    }\n\n    this.projects = await this.projectService\n      .getProjects(this.data.organizationId)\n      .then((projects) => projects.sort((a, b) => a.name.localeCompare(b.name)));\n  }\n\n  async loadData() {\n    this.formGroup.disable();\n    const secret: SecretView = await this.secretService.getBySecretId(this.data.secretId);\n    this.formGroup.setValue({\n      name: secret.name,\n      value: secret.value,\n      notes: secret.note,\n      project: secret.projects[0]?.id ?? \"\",\n    });\n\n    this.loading = false;\n\n    if (secret.write) {\n      this.formGroup.enable();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newSecret\" : \"editSecret\";\n  }\n\n  get showSpinner() {\n    return this.data.operation === OperationType.Edit && this.loading;\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const secretView = this.getSecretView();\n    if (this.data.operation === OperationType.Add) {\n      await this.createSecret(secretView);\n    } else {\n      secretView.id = this.data.secretId;\n      await this.updateSecret(secretView);\n    }\n    this.dialogRef.close();\n  };\n\n  get deleteButtonIsVisible(): boolean {\n    return this.data.operation === OperationType.Edit;\n  }\n\n  protected openDeleteSecretDialog() {\n    const secretListView: SecretListView[] = this.getSecretListView();\n\n    const dialogRef = this.dialogService.open<unknown, SecretDeleteOperation>(\n      SecretDeleteDialogComponent,\n      {\n        data: {\n          secrets: secretListView,\n        },\n      }\n    );\n\n    // If the secret is deleted, chain close this dialog after the delete dialog\n    lastValueFrom(dialogRef.closed).then(\n      (closeData) => closeData !== undefined && this.dialogRef.close()\n    );\n  }\n\n  private async createSecret(secretView: SecretView) {\n    await this.secretService.create(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretCreated\"));\n  }\n\n  private async updateSecret(secretView: SecretView) {\n    await this.secretService.update(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretEdited\"));\n  }\n\n  private getSecretView() {\n    const secretView = new SecretView();\n    secretView.organizationId = this.data.organizationId;\n    secretView.name = this.formGroup.value.name;\n    secretView.value = this.formGroup.value.value;\n    secretView.note = this.formGroup.value.notes;\n\n    const project = this.projects.find((p) => p.id == this.formGroup.value.project);\n    secretView.projects = project != undefined ? [project] : [];\n\n    return secretView;\n  }\n\n  private getSecretListView() {\n    const secretListViews: SecretListView[] = [];\n    const emptyProjects: SecretProjectView[] = [];\n\n    const secretListView = new SecretListView();\n\n    if (this.formGroup.value.project) {\n      secretListView.projects = [this.projects.find((p) => p.id == this.formGroup.value.project)];\n    } else {\n      secretListView.projects = emptyProjects;\n    }\n\n    secretListView.organizationId = this.data.organizationId;\n    secretListView.id = this.data.secretId;\n    secretListView.name = this.formGroup.value.name;\n    secretListViews.push(secretListView);\n    return secretListViews;\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>{{ title | i18n }}</ng-container>\n    <div bitDialogContent class=\"tw-relative\">\n      <div\n        *ngIf=\"showSpinner\"\n        class=\"tw-absolute tw-flex tw-h-full tw-w-full tw-items-center tw-justify-center tw-bg-text-contrast\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <div class=\"tw-flex tw-gap-4 tw-pt-4\">\n        <bit-form-field class=\"tw-w-1/3\">\n          <bit-label for=\"secret-name\">{{ \"name\" | i18n }}</bit-label>\n          <input formControlName=\"name\" bitInput />\n        </bit-form-field>\n        <bit-form-field class=\"tw-w-full\">\n          <bit-label>{{ \"value\" | i18n }}</bit-label>\n          <textarea bitInput rows=\"4\" formControlName=\"value\"></textarea>\n        </bit-form-field>\n      </div>\n      <bit-form-field>\n        <bit-label>{{ \"notes\" | i18n }}</bit-label>\n        <textarea bitInput rows=\"4\" formControlName=\"notes\"></textarea>\n      </bit-form-field>\n\n      <hr />\n\n      <bit-form-field class=\"tw-mt-3 tw-mb-0\">\n        <bit-label>{{ \"project\" | i18n }}</bit-label>\n        <select bitInput name=\"project\" formControlName=\"project\">\n          <option value=\"\">{{ \"selectPlaceholder\" | i18n }}</option>\n          <option *ngFor=\"let f of projects\" [value]=\"f.id\">\n            {{ f.name }}\n          </option>\n        </select>\n      </bit-form-field>\n    </div>\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button\n        type=\"button\"\n        bitButton\n        buttonType=\"secondary\"\n        bitFormButton\n        bitDialogClose\n        [disabled]=\"false\"\n      >\n        {{ \"cancel\" | i18n }}\n      </button>\n      <button\n        *ngIf=\"deleteButtonIsVisible\"\n        class=\"tw-ml-auto\"\n        type=\"button\"\n        bitIconButton=\"bwi-trash\"\n        buttonType=\"danger\"\n        bitFormButton\n        (click)=\"openDeleteSecretDialog()\"\n      ></button>\n    </div>\n  </bit-dialog>\n</form>\n","export class ServiceAccountView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class ServiceAccountRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ServiceAccountResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { ServiceAccountRequest } from \"./models/requests/service-account.request\";\nimport { ServiceAccountResponse } from \"./models/responses/service-account.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ServiceAccountService {\n  protected _serviceAccount: Subject<ServiceAccountView> = new Subject();\n\n  serviceAccount$ = this._serviceAccount.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getServiceAccounts(organizationId: string): Promise<ServiceAccountView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/service-accounts\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ServiceAccountResponse);\n    return await this.createServiceAccountViews(organizationId, results.data);\n  }\n\n  async getByServiceAccountId(\n    serviceAccountId: string,\n    organizationId: string\n  ): Promise<ServiceAccountView> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId,\n      null,\n      true,\n      true\n    );\n\n    return await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r));\n  }\n\n  async update(\n    serviceAccountId: string,\n    organizationId: string,\n    serviceAccountView: ServiceAccountView\n  ) {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = await this.getServiceAccountRequest(orgKey, serviceAccountView);\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/service-accounts/\" + serviceAccountId,\n      request,\n      true,\n      true\n    );\n    this._serviceAccount.next(\n      await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r))\n    );\n  }\n\n  async create(organizationId: string, serviceAccountView: ServiceAccountView) {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = await this.getServiceAccountRequest(orgKey, serviceAccountView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/service-accounts\",\n      request,\n      true,\n      true\n    );\n    this._serviceAccount.next(\n      await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r))\n    );\n  }\n\n  async delete(serviceAccounts: ServiceAccountView[]): Promise<BulkOperationStatus[]> {\n    const ids = serviceAccounts.map((serviceAccount) => serviceAccount.id);\n    const r = await this.apiService.send(\"POST\", \"/service-accounts/delete\", ids, true, true);\n\n    this._serviceAccount.next(null);\n\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = serviceAccounts.find((sa) => sa.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getServiceAccountRequest(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountView: ServiceAccountView\n  ) {\n    const request = new ServiceAccountRequest();\n    request.name = await this.encryptService.encrypt(serviceAccountView.name, organizationKey);\n    return request;\n  }\n\n  private async createServiceAccountView(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountResponse: ServiceAccountResponse\n  ): Promise<ServiceAccountView> {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.id = serviceAccountResponse.id;\n    serviceAccountView.organizationId = serviceAccountResponse.organizationId;\n    serviceAccountView.creationDate = serviceAccountResponse.creationDate;\n    serviceAccountView.revisionDate = serviceAccountResponse.revisionDate;\n    serviceAccountView.name = await this.encryptService.decryptToUtf8(\n      new EncString(serviceAccountResponse.name),\n      organizationKey\n    );\n    return serviceAccountView;\n  }\n\n  private async createServiceAccountViews(\n    organizationId: string,\n    serviceAccountResponses: ServiceAccountResponse[]\n  ): Promise<ServiceAccountView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      serviceAccountResponses.map(async (s: ServiceAccountResponse) => {\n        return await this.createServiceAccountView(orgKey, s);\n      })\n    );\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface ServiceAccountOperation {\n  organizationId: string;\n  serviceAccountId?: string;\n  operation: OperationType;\n}\n\n@Component({\n  selector: \"sm-service-account-dialog\",\n  templateUrl: \"./service-account-dialog.component.html\",\n})\nexport class ServiceAccountDialogComponent {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required]),\n  });\n\n  protected loading = false;\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ServiceAccountOperation,\n    private serviceAccountService: ServiceAccountService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation == OperationType.Edit) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const serviceAccount: ServiceAccountView =\n      await this.serviceAccountService.getByServiceAccountId(\n        this.data.serviceAccountId,\n        this.data.organizationId\n      );\n    this.formGroup.patchValue({ name: serviceAccount.name });\n    this.loading = false;\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const serviceAccountView = this.getServiceAccountView();\n    let serviceAccountMessage: string;\n\n    if (this.data.operation == OperationType.Add) {\n      await this.serviceAccountService.create(this.data.organizationId, serviceAccountView);\n      serviceAccountMessage = this.i18nService.t(\"serviceAccountCreated\");\n    } else {\n      await this.serviceAccountService.update(\n        this.data.serviceAccountId,\n        this.data.organizationId,\n        serviceAccountView\n      );\n      serviceAccountMessage = this.i18nService.t(\"serviceAccountUpdated\");\n    }\n\n    this.platformUtilsService.showToast(\"success\", null, serviceAccountMessage);\n    this.dialogRef.close();\n  };\n\n  private getServiceAccountView() {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.organizationId = this.data.organizationId;\n    serviceAccountView.name = this.formGroup.value.name;\n    return serviceAccountView;\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newServiceAccount\" : \"editServiceAccount\";\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>{{ title | i18n }}</ng-container>\n    <div bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <div *ngIf=\"!loading\">\n        <bit-form-field>\n          <bit-label>{{ \"serviceAccountName\" | i18n }}</bit-label>\n          <input formControlName=\"name\" maxlength=\"1000\" bitInput />\n        </bit-form-field>\n      </div>\n    </div>\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { Component, HostBinding, Input, OnInit } from \"@angular/core\";\n\nimport type { SortFn } from \"./table-data-source\";\nimport { TableComponent } from \"./table.component\";\n\n@Component({\n  selector: \"th[bitSortable]\",\n  template: `\n    <button [ngClass]=\"classList\" [attr.aria-pressed]=\"isActive\" (click)=\"setActive()\">\n      <ng-content></ng-content>\n      <i class=\"bwi tw-ml-2\" [ngClass]=\"icon\"></i>\n    </button>\n  `,\n})\nexport class SortableComponent implements OnInit {\n  /**\n   * Mark the column as sortable and specify the key to sort by\n   */\n  @Input() bitSortable: string;\n\n  private _default: boolean;\n  /**\n   * Mark the column as the default sort column\n   */\n  @Input() set default(value: boolean | \"\") {\n    this._default = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Custom sorting function\n   *\n   * @example\n   * fn = (a, b) => a.name.localeCompare(b.name)\n   */\n  @Input() fn: SortFn;\n\n  constructor(private table: TableComponent) {}\n\n  ngOnInit(): void {\n    if (this._default && !this.isActive) {\n      this.setActive();\n    }\n  }\n\n  @HostBinding(\"attr.aria-sort\") get ariaSort() {\n    if (!this.isActive) {\n      return undefined;\n    }\n    return this.sort.direction === \"asc\" ? \"ascending\" : \"descending\";\n  }\n\n  protected setActive() {\n    if (this.table.dataSource) {\n      const direction = this.isActive && this.direction === \"asc\" ? \"desc\" : \"asc\";\n      this.table.dataSource.sort = { column: this.bitSortable, direction: direction, fn: this.fn };\n    }\n  }\n\n  private get sort() {\n    return this.table.dataSource?.sort;\n  }\n\n  get isActive() {\n    return this.sort?.column === this.bitSortable;\n  }\n\n  get direction() {\n    return this.sort?.direction;\n  }\n\n  get icon() {\n    if (!this.isActive) {\n      return \"bwi-up-down-btn\";\n    }\n    return this.direction === \"asc\" ? \"bwi-up-solid\" : \"bwi-down-solid\";\n  }\n\n  get classList() {\n    return [\n      \"tw-group\",\n      \"tw-min-w-max\",\n\n      // Offset to border and padding\n      \"-tw-m-1.5\",\n      \"tw-font-bold\",\n\n      // Below is copied from BitIconButtonComponent\n      \"tw-border\",\n      \"tw-border-solid\",\n      \"tw-rounded\",\n      \"tw-transition\",\n      \"hover:tw-no-underline\",\n      \"focus:tw-outline-none\",\n\n      \"tw-bg-transparent\",\n      \"!tw-text-muted\",\n      \"tw-border-transparent\",\n      \"hover:tw-bg-transparent-hover\",\n      \"hover:tw-border-primary-700\",\n      \"focus-visible:before:tw-ring-primary-700\",\n      \"disabled:tw-opacity-60\",\n      \"disabled:hover:tw-border-transparent\",\n      \"disabled:hover:tw-bg-transparent\",\n\n      // Workaround for box-shadow with transparent offset issue:\n      // https://github.com/tailwindlabs/tailwindcss/issues/3595\n      // Remove `before:` and use regular `tw-ring` when browser no longer has bug, or better:\n      // switch to `outline` with `outline-offset` when Safari supports border radius on outline.\n      // Using `box-shadow` to create outlines is a hack and as such `outline` should be preferred.\n      \"tw-relative\",\n      \"before:tw-content-['']\",\n      \"before:tw-block\",\n      \"before:tw-absolute\",\n      \"before:-tw-inset-[3px]\",\n      \"before:tw-rounded-md\",\n      \"before:tw-transition\",\n      \"before:tw-ring\",\n      \"before:tw-ring-transparent\",\n      \"focus-visible:tw-z-10\",\n    ];\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { Icons } from \"..\";\n\n/**\n * Component for displaying a message when there are no items to display. Expects title, description and button slots.\n */\n@Component({\n  selector: \"bit-no-items\",\n  templateUrl: \"./no-items.component.html\",\n})\nexport class NoItemsComponent {\n  protected icon = Icons.Search;\n}\n","<div\n  class=\"tw-mx-auto tw-flex tw-flex-col tw-items-center tw-justify-center tw-pt-6 tw-text-center\"\n>\n  <div class=\"tw-max-w-sm\">\n    <bit-icon [icon]=\"icon\" aria-hidden=\"true\"></bit-icon>\n    <h3 class=\"tw-font-semibold\">\n      <ng-content select=\"[slot=title]\"></ng-content>\n    </h3>\n    <p>\n      <ng-content select=\"[slot=description]\"></ng-content>\n    </p>\n  </div>\n  <div class=\"tw-space-x-2\">\n    <ng-content select=\"[slot=button]\"></ng-content>\n  </div>\n</div>\n","<div *ngIf=\"!secrets\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<ng-container *ngIf=\"secrets?.length == 0\">\n  <bit-no-items *ngIf=\"trash\">\n    <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n    <ng-container slot=\"description\">{{ \"secretsTrashNoItemsMessage\" | i18n }}</ng-container>\n  </bit-no-items>\n  <bit-no-items *ngIf=\"!trash\">\n    <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n    <ng-container slot=\"description\">{{ \"secretsNoItemsMessage\" | i18n }}</ng-container>\n    <button\n      type=\"button\"\n      slot=\"button\"\n      bitButton\n      buttonType=\"secondary\"\n      (click)=\"newSecretEvent.emit()\"\n    >\n      <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n      {{ \"newSecret\" | i18n }}\n    </button>\n  </bit-no-items>\n</ng-container>\n\n<bit-table *ngIf=\"secrets?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell bitSortable=\"projects\" [fn]=\"sortProjects\">{{ \"project\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let secret of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(secret.id) : null\"\n          [checked]=\"selection.isSelected(secret.id)\"\n        />\n      </td>\n      <td bitCell>\n        <div class=\"tw-flex tw-items-center tw-gap-4 tw-break-all\">\n          <i class=\"bwi bwi-key tw-text-muted\" aria-hidden=\"true\"></i>\n          <button type=\"button\" bitLink (click)=\"editSecretEvent.emit(secret.id)\" *ngIf=\"!trash\">\n            {{ secret.name }}\n          </button>\n          <div *ngIf=\"trash\">{{ secret.name }}</div>\n        </div>\n      </td>\n      <td bitCell>\n        <span\n          *ngFor=\"let project of secret.projects\"\n          bitBadge\n          badgeType=\"secondary\"\n          class=\"tw-ml-1\"\n          [title]=\"project.name\"\n        >\n          {{ project.name | ellipsis : 32 }}\n        </span>\n        <span *ngIf=\"secret.projects.length === 0\" bitBadge badgeType=\"warning\" class=\"tw-ml-1\"\n          ><i class=\"bwi bwi-fw bwi-exclamation-triangle tw-mr-1\" aria-hidden=\"true\"></i\n          >{{ \"unassigned\" | i18n }}</span\n        >\n      </td>\n      <td bitCell class=\"tw-whitespace-nowrap\">{{ secret.revisionDate | date : \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"secretMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #secretMenu>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"editSecretEvent.emit(secret.id)\"\n          *ngIf=\"secret.write && !trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editSecret\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"copySecretNameEvent.emit(secret.name)\"\n          *ngIf=\"!trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-clone\" aria-hidden=\"true\"></i>\n          {{ \"copySecretName\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"copySecretValueEvent.emit(secret.id)\"\n          *ngIf=\"!trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-clone\" aria-hidden=\"true\"></i>\n          {{ \"copySecretValue\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"restoreSecretsEvent.emit([secret.id])\"\n          *ngIf=\"trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-refresh\" aria-hidden=\"true\"></i>\n          {{ \"restoreSecret\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"deleteSecretsEvent.emit([secret])\"\n          *ngIf=\"secret.write\"\n        >\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{\n            (trash ? \"permanentlyDelete\" : \"deleteSecret\") | i18n\n          }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkRestoreSecrets()\" *ngIf=\"trash\">\n    <i class=\"bwi bwi-fw bwi-refresh\" aria-hidden=\"true\"></i>\n    <span>{{ \"restoreSelected\" | i18n }}</span>\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteSecrets()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteSecrets\" | i18n }}</span>\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretService } from \"../secrets/secret.service\";\n\n@Component({\n  selector: \"sm-secrets-list\",\n  templateUrl: \"./secrets-list.component.html\",\n})\nexport class SecretsListComponent implements OnDestroy {\n  protected dataSource = new TableDataSource<SecretListView>();\n\n  @Input()\n  get secrets(): SecretListView[] {\n    return this._secrets;\n  }\n  set secrets(secrets: SecretListView[]) {\n    this.selection.clear();\n    this._secrets = secrets;\n    this.dataSource.data = secrets;\n  }\n  private _secrets: SecretListView[];\n\n  @Input()\n  set search(search: string) {\n    this.dataSource.filter = search;\n  }\n\n  @Input() trash: boolean;\n\n  @Output() editSecretEvent = new EventEmitter<string>();\n  @Output() copySecretNameEvent = new EventEmitter<string>();\n  @Output() copySecretValueEvent = new EventEmitter<string>();\n  @Output() onSecretCheckedEvent = new EventEmitter<string[]>();\n  @Output() deleteSecretsEvent = new EventEmitter<SecretListView[]>();\n  @Output() newSecretEvent = new EventEmitter();\n  @Output() restoreSecretsEvent = new EventEmitter();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onSecretCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.secrets.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.secrets.map((s) => s.id));\n  }\n\n  bulkDeleteSecrets() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteSecretsEvent.emit(\n        this.secrets.filter((secret) => this.selection.isSelected(secret.id))\n      );\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n    }\n  }\n\n  bulkRestoreSecrets() {\n    if (this.selection.selected.length >= 1) {\n      this.restoreSecretsEvent.emit(this.selection.selected);\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n    }\n  }\n\n  sortProjects = (a: SecretListView, b: SecretListView): number => {\n    const aProjects = a.projects;\n    const bProjects = b.projects;\n    if (aProjects.length !== bProjects.length) {\n      return aProjects.length - bProjects.length;\n    }\n\n    return aProjects[0]?.name.localeCompare(bProjects[0].name);\n  };\n\n  /**\n   * TODO: Refactor to smart component and remove\n   */\n  static copySecretName(\n    name: string,\n    platformUtilsService: PlatformUtilsService,\n    i18nService: I18nService\n  ) {\n    platformUtilsService.copyToClipboard(name);\n    platformUtilsService.showToast(\n      \"success\",\n      null,\n      i18nService.t(\"valueCopied\", i18nService.t(\"name\"))\n    );\n  }\n\n  /**\n   * TODO: Refactor to smart component and remove\n   */\n  static copySecretValue(\n    id: string,\n    platformUtilsService: PlatformUtilsService,\n    i18nService: I18nService,\n    secretService: SecretService\n  ) {\n    const value = secretService.getBySecretId(id).then((secret) => secret.value);\n    SecretsListComponent.copyToClipboardAsync(value, platformUtilsService).then(() => {\n      platformUtilsService.showToast(\n        \"success\",\n        null,\n        i18nService.t(\"valueCopied\", i18nService.t(\"value\"))\n      );\n    });\n  }\n\n  /**\n   * TODO: Remove in favor of updating `PlatformUtilsService.copyToClipboard`\n   */\n  private static copyToClipboardAsync(\n    text: Promise<string>,\n    platformUtilsService: PlatformUtilsService\n  ) {\n    if (platformUtilsService.isSafari()) {\n      return navigator.clipboard.write([\n        new ClipboardItem({\n          [\"text/plain\"]: text,\n        }),\n      ]);\n    }\n\n    return text.then((t) => platformUtilsService.copyToClipboard(t));\n  }\n}\n","<header\n  *ngIf=\"routeData$ | async as routeData\"\n  class=\"-tw-m-6 tw-mb-3 tw-flex tw-flex-col tw-p-6\"\n  [ngClass]=\"{\n    'tw-border-0 tw-border-b tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-pb-0':\n      tabsContainer.childElementCount !== 0\n  }\"\n>\n  <div class=\"tw-flex\">\n    <div class=\"tw-flex tw-min-w-0 tw-flex-1 tw-flex-col tw-gap-2\">\n      <ng-content select=\"[slot=breadcrumbs]\"></ng-content>\n      <div #titleContainer [ngClass]=\"{ 'tw-hidden': titleContainer.childElementCount === 0 }\">\n        <ng-content select=\"[slot=title]\"></ng-content>\n      </div>\n      <h1\n        *ngIf=\"titleContainer.childElementCount === 0\"\n        bitTypography=\"h1\"\n        noMargin\n        class=\"tw-m-0 tw-mr-2 tw-truncate tw-leading-10\"\n        [title]=\"title || (routeData.titleId | i18n)\"\n      >\n        <i *ngIf=\"icon\" class=\"bwi {{ icon }}\" aria-hidden=\"true\"></i>\n        {{ title || (routeData.titleId | i18n) }}\n      </h1>\n    </div>\n    <div class=\"tw-ml-auto tw-flex tw-flex-col tw-gap-4\">\n      <div class=\"tw-flex tw-min-w-max tw-items-center tw-justify-end tw-gap-2\">\n        <ng-content></ng-content>\n        <product-switcher></product-switcher>\n        <ng-container *ngIf=\"account$ | async as account\">\n          <button\n            type=\"button\"\n            [bitMenuTriggerFor]=\"accountMenu\"\n            class=\"tw-border-0 tw-bg-transparent tw-p-0\"\n          >\n            <bit-avatar [id]=\"account.userId\" [text]=\"account | userName\"></bit-avatar>\n          </button>\n\n          <bit-menu #accountMenu>\n            <div class=\"tw-flex tw-min-w-52 tw-max-w-72 tw-flex-col\">\n              <div\n                class=\"tw-flex tw-items-center tw-py-1 tw-px-4 tw-leading-tight tw-text-info\"\n                appStopProp\n              >\n                <bit-avatar [text]=\"account | userName\" [id]=\"account.userId\"></bit-avatar>\n                <div class=\"tw-ml-2 tw-block tw-overflow-hidden tw-whitespace-nowrap\">\n                  <span>{{ \"loggedInAs\" | i18n }}</span>\n                  <small class=\"tw-block tw-overflow-hidden tw-whitespace-nowrap tw-text-muted\">\n                    {{ account | userName }}\n                  </small>\n                </div>\n              </div>\n\n              <bit-menu-divider></bit-menu-divider>\n\n              <a bitMenuItem routerLink=\"/settings/account\">\n                <i class=\"bwi bwi-fw bwi-user\" aria-hidden=\"true\"></i>\n                {{ \"accountSettings\" | i18n }}\n              </a>\n              <a bitMenuItem href=\"https://bitwarden.com/help/\" target=\"_blank\" rel=\"noopener\">\n                <i class=\"bwi bwi-fw bwi-question-circle\" aria-hidden=\"true\"></i>\n                {{ \"getHelp\" | i18n }}\n              </a>\n              <a bitMenuItem href=\"https://bitwarden.com/download/\" target=\"_blank\" rel=\"noopener\">\n                <i class=\"bwi bwi-fw bwi-download\" aria-hidden=\"true\"></i>\n                {{ \"getApps\" | i18n }}\n              </a>\n\n              <bit-menu-divider></bit-menu-divider>\n\n              <button bitMenuItem type=\"button\" (click)=\"lock()\">\n                <i class=\"bwi bwi-fw bwi-lock\" aria-hidden=\"true\"></i>\n                {{ \"lockNow\" | i18n }}\n              </button>\n              <button bitMenuItem type=\"button\" (click)=\"logout()\">\n                <i class=\"bwi bwi-fw bwi-sign-out\" aria-hidden=\"true\"></i>\n                {{ \"logOut\" | i18n }}\n              </button>\n            </div>\n          </bit-menu>\n        </ng-container>\n      </div>\n      <div\n        class=\"tw-ml-auto\"\n        #contentContainer\n        [ngClass]=\"{ 'tw-hidden': contentContainer.childElementCount === 0 }\"\n      >\n        <ng-content select=\"[slot=secondary]\"></ng-content>\n      </div>\n    </div>\n  </div>\n  <div\n    #tabsContainer\n    class=\"-tw-mx-4 -tw-mb-px\"\n    [ngClass]=\"{ 'tw-hidden': tabsContainer.childElementCount === 0 }\"\n  >\n    <ng-content select=\"[slot=tabs]\"></ng-content>\n  </div>\n</header>\n","import { Component, Input } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { AccountProfile } from \"@bitwarden/common/models/domain/account\";\n\n@Component({\n  selector: \"sm-header\",\n  templateUrl: \"./header.component.html\",\n})\nexport class HeaderComponent {\n  /**\n   * Custom title that overrides the route data `titleId`\n   */\n  @Input() title: string;\n\n  /**\n   * Icon to show before the title\n   */\n  @Input() icon: string;\n\n  protected routeData$: Observable<{ titleId: string }>;\n  protected account$: Observable<AccountProfile>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private stateService: StateService,\n    private messagingService: MessagingService\n  ) {\n    this.routeData$ = this.route.data.pipe(\n      map((params) => {\n        return {\n          titleId: params.titleId,\n        };\n      })\n    );\n\n    this.account$ = combineLatest([\n      this.stateService.activeAccount$,\n      this.stateService.accounts$,\n    ]).pipe(\n      map(([activeAccount, accounts]) => {\n        return accounts[activeAccount]?.profile;\n      })\n    );\n  }\n\n  protected lock() {\n    this.messagingService.send(\"lockVault\");\n  }\n\n  protected logout() {\n    this.messagingService.send(\"logout\");\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport {\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../projects/dialog/project-dialog.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../secrets/dialog/secret-dialog.component\";\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"../service-accounts/dialog/service-account-dialog.component\";\n\n@Component({\n  selector: \"sm-new-menu\",\n  templateUrl: \"./new-menu.component.html\",\n})\nexport class NewMenuComponent implements OnInit, OnDestroy {\n  private organizationId: string;\n  private destroy$: Subject<void> = new Subject<void>();\n\n  constructor(private route: ActivatedRoute, private dialogService: DialogService) {}\n\n  ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params: any) => {\n      this.organizationId = params.organizationId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  openSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n}\n","<div *ngIf=\"!projects\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<bit-no-items *ngIf=\"projects?.length == 0\">\n  <ng-container slot=\"title\">{{ \"projectsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"projectsNoItemsMessage\" | i18n }}</ng-container>\n  <button\n    type=\"button\"\n    slot=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newProjectEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newProject\" | i18n }}\n  </button>\n</bit-no-items>\n\n<bit-table *ngIf=\"projects?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let project of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(project.id) : null\"\n          [checked]=\"selection.isSelected(project.id)\"\n        />\n      </td>\n      <td bitCell>\n        <div class=\"tw-flex tw-items-center tw-gap-4 tw-break-all\">\n          <i class=\"bwi bwi-collection tw-text-muted\" aria-hidden=\"true\"></i>\n          <a bitLink [routerLink]=\"['/sm', project.organizationId, 'projects', project.id]\">{{\n            project.name\n          }}</a>\n        </div>\n      </td>\n      <td bitCell class=\"tw-whitespace-nowrap\">{{ project.revisionDate | date : \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"projectMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </td>\n      <bit-menu #projectMenu>\n        <button type=\"button\" bitMenuItem (click)=\"editProjectEvent.emit(project.id)\">\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editProject\" | i18n }}\n        </button>\n        <a bitMenuItem [routerLink]=\"['/sm', project.organizationId, 'projects', project.id]\">\n          <i class=\"bwi bwi-fw bwi-eye\" aria-hidden=\"true\"></i>\n          {{ \"viewProject\" | i18n }}\n        </a>\n        <button type=\"button\" bitMenuItem (click)=\"deleteProject(project.id)\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{ \"deleteProject\" | i18n }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteProjects()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteProjects\" | i18n }}</span>\n  </button>\n</bit-menu>\n","<button\n  type=\"button\"\n  bitButton\n  class=\"tw-min-w-max\"\n  buttonType=\"primary\"\n  [bitMenuTriggerFor]=\"newMenu\"\n>\n  {{ \"new\" | i18n }} <i class=\"bwi bwi-angle-down\" aria-hidden=\"true\"></i>\n</button>\n\n<bit-menu #newMenu>\n  <button type=\"button\" bitMenuItem (click)=\"openProjectDialog()\">\n    <i class=\"bwi bwi-fw bwi-sitemap\" aria-hidden=\"true\"></i>\n    {{ \"project\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openSecretDialog()\">\n    <i class=\"bwi bwi-fw bwi-key\" aria-hidden=\"true\"></i>\n    {{ \"secret\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openServiceAccountDialog()\">\n    <i class=\"bwi bwi-fw bwi-wrench\" aria-hidden=\"true\"></i>\n    {{ \"serviceAccount\" | i18n }}\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\n\n@Component({\n  selector: \"sm-projects-list\",\n  templateUrl: \"./projects-list.component.html\",\n})\nexport class ProjectsListComponent implements OnDestroy {\n  protected dataSource = new TableDataSource<ProjectListView>();\n\n  @Input()\n  get projects(): ProjectListView[] {\n    return this._projects;\n  }\n  set projects(projects: ProjectListView[]) {\n    this.selection.clear();\n    this._projects = projects;\n    this.dataSource.data = projects;\n  }\n  private _projects: ProjectListView[];\n\n  @Input()\n  set search(search: string) {\n    this.dataSource.filter = search;\n  }\n\n  @Output() editProjectEvent = new EventEmitter<string>();\n  @Output() deleteProjectEvent = new EventEmitter<ProjectListView[]>();\n  @Output() onProjectCheckedEvent = new EventEmitter<string[]>();\n  @Output() newProjectEvent = new EventEmitter();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onProjectCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.projects.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.projects.map((s) => s.id));\n  }\n\n  deleteProject(projectId: string) {\n    this.deleteProjectEvent.emit(this.projects.filter((p) => p.id == projectId));\n  }\n\n  bulkDeleteProjects() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteProjectEvent.emit(\n        this.projects.filter((project) => this.selection.isSelected(project.id))\n      );\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n    }\n  }\n}\n","<ng-template #content>\n  <i class=\"bwi bwi-fw !tw-mr-4\" [ngClass]=\"completed ? 'bwi-check tw-text-success' : icon\"></i\n  ><span\n    [ngClass]=\"{\n      'tw-text-primary-700 tw-line-through tw-decoration-primary-700 tw-opacity-50': completed\n    }\"\n    >{{ title }}<i class=\"bwi bwi-angle-right tw-ml-1\"></i\n  ></span>\n</ng-template>\n\n<li class=\"tw-list-none\">\n  <a bitLink *ngIf=\"route\" [routerLink]=\"route\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </a>\n  <button type=\"button\" bitLink *ngIf=\"!route\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </button>\n  <div\n    class=\"tw-ml-8 tw-mt-1 tw-text-sm\"\n    [ngClass]=\"{ 'tw-opacity-50': completed }\"\n    (click)=\"handleClick($event)\"\n  >\n    <ng-content></ng-content>\n  </div>\n</li>\n","import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-onboarding-task\",\n  templateUrl: \"./onboarding-task.component.html\",\n  host: {\n    class: \"tw-max-w-max\",\n  },\n})\nexport class OnboardingTaskComponent {\n  @Input()\n  completed = false;\n\n  @Input()\n  icon = \"bwi-info-circle\";\n\n  @Input()\n  title: string;\n\n  @Input()\n  route: string | any[];\n\n  handleClick(ev: MouseEvent) {\n    /**\n     * If the main `ng-content` is clicked, we don't want to trigger the task's click handler.\n     */\n    ev.stopPropagation();\n  }\n}\n","<div [ngClass]=\"outerBarStyles\">\n  <div\n    [ngClass]=\"innerBarStyles\"\n    role=\"progressbar\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n    attr.aria-valuenow=\"{{ barWidth }}\"\n    [ngStyle]=\"{ width: barWidth + '%' }\"\n  >\n    <div\n      *ngIf=\"displayText\"\n      class=\"tw-flex tw-h-full tw-flex-wrap tw-items-center tw-overflow-hidden\"\n    >\n      <!-- If text is too long to fit, wrap it below to hide -->\n      <div class=\"tw-h-full\">&nbsp;</div>\n      <div class=\"tw-pr-1\">{{ textContent }}</div>\n    </div>\n  </div>\n</div>\n","import { Component, Input } from \"@angular/core\";\n\ntype SizeTypes = \"small\" | \"default\" | \"large\";\ntype BackgroundTypes = \"danger\" | \"primary\" | \"success\" | \"warning\";\n\nconst SizeClasses: Record<SizeTypes, string[]> = {\n  small: [\"tw-h-1\"],\n  default: [\"tw-h-4\"],\n  large: [\"tw-h-6\"],\n};\n\nconst BackgroundClasses: Record<BackgroundTypes, string[]> = {\n  danger: [\"tw-bg-danger-500\"],\n  primary: [\"tw-bg-primary-500\"],\n  success: [\"tw-bg-success-500\"],\n  warning: [\"tw-bg-warning-500\"],\n};\n\n@Component({\n  selector: \"bit-progress\",\n  templateUrl: \"./progress.component.html\",\n})\nexport class ProgressComponent {\n  @Input() barWidth = 0;\n  @Input() bgColor: BackgroundTypes = \"primary\";\n  @Input() showText = true;\n  @Input() size: SizeTypes = \"default\";\n  @Input() text?: string;\n\n  get displayText() {\n    return this.showText && this.size !== \"small\";\n  }\n\n  get outerBarStyles() {\n    return [\"tw-overflow-hidden\", \"tw-rounded\", \"tw-bg-secondary-100\"].concat(\n      SizeClasses[this.size]\n    );\n  }\n\n  get innerBarStyles() {\n    return [\n      \"tw-flex\",\n      \"tw-justify-center\",\n      \"tw-items-center\",\n      \"tw-whitespace-nowrap\",\n      \"tw-text-xs\",\n      \"tw-font-semibold\",\n      \"tw-text-contrast\",\n      \"tw-transition-all\",\n    ]\n      .concat(SizeClasses[this.size])\n      .concat(BackgroundClasses[this.bgColor]);\n  }\n\n  get textContent() {\n    return this.text || this.barWidth + \"%\";\n  }\n}\n","<details #details class=\"tw-rounded-sm tw-bg-background-alt tw-text-main\" (toggle)=\"toggle()\" open>\n  <summary class=\"tw-list-none tw-p-2 tw-px-4\">\n    <div class=\"tw-flex tw-select-none tw-items-center tw-gap-4\">\n      <i class=\"bwi bwi-dashboard tw-text-3xl tw-text-primary-500\" aria-hidden=\"true\"></i>\n      <div class=\"tw-text-lg\">{{ title }}</div>\n      <bit-progress class=\"tw-flex-1\" [showText]=\"false\" [barWidth]=\"barWidth\"></bit-progress>\n      <span *ngIf=\"tasks.length > 0; else spinner\">\n        {{ \"complete\" | i18n : amountCompleted : tasks.length }}\n      </span>\n      <i\n        class=\"bwi tw-my-auto\"\n        [ngClass]=\"open ? 'bwi-angle-down' : 'bwi-angle-up'\"\n        aria-hidden=\"true\"\n      ></i>\n    </div>\n  </summary>\n  <ul class=\"tw-ml-6 tw-mb-0 tw-flex tw-flex-col tw-gap-4\">\n    <ng-content></ng-content>\n  </ul>\n  <div class=\"tw-p-4 tw-pt-0\">\n    <button bitLink type=\"button\" class=\"tw-ml-auto tw-block\" (click)=\"dismiss.emit()\">\n      {{ \"dismiss\" | i18n }}\n    </button>\n  </div>\n</details>\n\n<ng-template #spinner>\n  <i class=\"bwi bwi-spinner bwi-spin\"></i>\n</ng-template>\n","import { Component, ContentChildren, EventEmitter, Input, Output, QueryList } from \"@angular/core\";\n\nimport { OnboardingTaskComponent } from \"./onboarding-task.component\";\n\n@Component({\n  selector: \"sm-onboarding\",\n  templateUrl: \"./onboarding.component.html\",\n})\nexport class OnboardingComponent {\n  @ContentChildren(OnboardingTaskComponent) tasks: QueryList<OnboardingTaskComponent>;\n  @Input() title: string;\n\n  @Output() dismiss = new EventEmitter<void>();\n\n  protected open = true;\n  protected visible = false;\n\n  protected get amountCompleted(): number {\n    return this.tasks.filter((task) => task.completed).length;\n  }\n\n  protected get barWidth(): number {\n    return this.tasks.length === 0 ? 0 : (this.amountCompleted / this.tasks.length) * 100;\n  }\n\n  protected toggle() {\n    this.open = !this.open;\n  }\n}\n","<section>\n  <header class=\"tw-flex tw-max-w-min tw-items-center tw-gap-2\">\n    <div><ng-content select=\"[slot=summary]\"></ng-content></div>\n    <button\n      type=\"button\"\n      [bitIconButton]=\"open ? 'bwi-angle-up' : 'bwi-angle-down'\"\n      (click)=\"toggle()\"\n      [attr.aria-expanded]=\"open\"\n      [attr.aria-controls]=\"contentId\"\n    ></button>\n  </header>\n  <div *ngIf=\"open\" [attr.id]=\"contentId\" class=\"tw-mt-4\">\n    <ng-content></ng-content>\n  </div>\n</section>\n","import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-section\",\n  templateUrl: \"./section.component.html\",\n})\nexport class SectionComponent {\n  @Input() open = true;\n\n  /**\n   * UID for `[attr.aria-controls]`\n   */\n  protected contentId = Math.random().toString(36).substring(2);\n\n  protected toggle() {\n    this.open = !this.open;\n  }\n}\n","<sm-header [title]=\"organizationName\">\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n\n<div *ngIf=\"!loading && view$ | async as view; else spinner\">\n  <sm-onboarding [title]=\"'getStarted' | i18n\" *ngIf=\"showOnboarding\" (dismiss)=\"hideOnboarding()\">\n    <sm-onboarding-task\n      [title]=\"'createServiceAccount' | i18n\"\n      (click)=\"openServiceAccountDialog()\"\n      icon=\"bwi-cli\"\n      [completed]=\"view.tasks.createServiceAccount\"\n    >\n      <span class=\"tw-pl-1\">\n        {{ \"downloadThe\" | i18n }}\n        <a bitLink href=\"https://bitwarden.com/help/secrets-manager-cli/\" target=\"_blank\">{{\n          \"smCLI\" | i18n\n        }}</a>\n      </span>\n    </sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"userIsAdmin\"\n      [title]=\"'createProject' | i18n\"\n      (click)=\"openNewProjectDialog()\"\n      icon=\"bwi-collection\"\n      [completed]=\"view.tasks.createProject\"\n    ></sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"userIsAdmin\"\n      [title]=\"'importSecrets' | i18n\"\n      [route]=\"['settings', 'import']\"\n      icon=\"bwi-download\"\n      [completed]=\"view.tasks.importSecrets\"\n    ></sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"view.tasks.createProject\"\n      [title]=\"'createSecret' | i18n\"\n      (click)=\"openSecretDialog()\"\n      icon=\"bwi-key\"\n      [completed]=\"view.tasks.createSecret\"\n    ></sm-onboarding-task>\n  </sm-onboarding>\n\n  <div class=\"tw-mt-6 tw-flex tw-flex-col tw-gap-6\">\n    <sm-section>\n      <h2 slot=\"summary\" class=\"tw-mb-0\" bitTypography=\"h2\" noMargin>{{ \"projects\" | i18n }}</h2>\n      <sm-projects-list\n        (newProjectEvent)=\"openNewProjectDialog()\"\n        (editProjectEvent)=\"openEditProject($event)\"\n        (deleteProjectEvent)=\"openDeleteProjectDialog($event)\"\n        [projects]=\"view.latestProjects\"\n      ></sm-projects-list>\n      <div *ngIf=\"view.allProjects.length > 0\" class=\"tw-ml-auto tw-mt-4 tw-max-w-max\">\n        {{ \"showingPortionOfTotal\" | i18n : view.latestProjects.length : view.allProjects.length }}\n        <a bitLink routerLink=\"projects\" class=\"tw-ml-2\">{{ \"viewAll\" | i18n }}</a>\n      </div>\n    </sm-section>\n    <sm-section>\n      <h2 slot=\"summary\" class=\"tw-mb-0\" bitTypography=\"h2\" noMargin>{{ \"secrets\" | i18n }}</h2>\n      <sm-secrets-list\n        baseRoute=\"secrets\"\n        (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n        (newSecretEvent)=\"openNewSecretDialog()\"\n        (editSecretEvent)=\"openEditSecret($event)\"\n        (copySecretNameEvent)=\"copySecretName($event)\"\n        (copySecretValueEvent)=\"copySecretValue($event)\"\n        [secrets]=\"view.latestSecrets\"\n      ></sm-secrets-list>\n      <div *ngIf=\"view.allSecrets.length > 0\" class=\"tw-ml-auto tw-mt-4 tw-max-w-max\">\n        {{ \"showingPortionOfTotal\" | i18n : view.latestSecrets.length : view.allSecrets.length }}\n        <a bitLink routerLink=\"secrets\" class=\"tw-ml-2\">{{ \"viewAll\" | i18n }}</a>\n      </div>\n    </sm-section>\n  </div>\n</div>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  map,\n  Observable,\n  switchMap,\n  Subject,\n  takeUntil,\n  combineLatest,\n  startWith,\n  distinctUntilChanged,\n  take,\n  share,\n} from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport {\n  ProjectDeleteDialogComponent,\n  ProjectDeleteOperation,\n} from \"../projects/dialog/project-delete-dialog.component\";\nimport {\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../projects/dialog/project-dialog.component\";\nimport { ProjectService } from \"../projects/project.service\";\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"../secrets/dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../secrets/dialog/secret-dialog.component\";\nimport { SecretService } from \"../secrets/secret.service\";\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"../service-accounts/dialog/service-account-dialog.component\";\nimport { ServiceAccountService } from \"../service-accounts/service-account.service\";\nimport { SecretsListComponent } from \"../shared/secrets-list.component\";\n\ntype Tasks = {\n  [organizationId: string]: OrganizationTasks;\n};\n\ntype OrganizationTasks = {\n  importSecrets: boolean;\n  createSecret: boolean;\n  createProject: boolean;\n  createServiceAccount: boolean;\n};\n\n@Component({\n  selector: \"sm-overview\",\n  templateUrl: \"./overview.component.html\",\n})\nexport class OverviewComponent implements OnInit, OnDestroy {\n  private destroy$: Subject<void> = new Subject<void>();\n  private tableSize = 10;\n  private organizationId: string;\n  protected organizationName: string;\n  protected userIsAdmin: boolean;\n  protected showOnboarding = false;\n  protected loading = true;\n\n  protected view$: Observable<{\n    allProjects: ProjectListView[];\n    allSecrets: SecretListView[];\n    latestProjects: ProjectListView[];\n    latestSecrets: SecretListView[];\n    tasks: OrganizationTasks;\n  }>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private secretService: SecretService,\n    private serviceAccountService: ServiceAccountService,\n    private dialogService: DialogService,\n    private organizationService: OrganizationService,\n    private stateService: StateService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    const orgId$ = this.route.params.pipe(\n      map((p) => p.organizationId),\n      distinctUntilChanged()\n    );\n\n    orgId$\n      .pipe(\n        map((orgId) => this.organizationService.get(orgId)),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((org) => {\n        this.organizationId = org.id;\n        this.organizationName = org.name;\n        this.userIsAdmin = org.isAdmin;\n        this.loading = true;\n      });\n\n    const projects$ = combineLatest([\n      orgId$,\n      this.projectService.project$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.projectService.getProjects(orgId)),\n      share()\n    );\n\n    const secrets$ = combineLatest([\n      orgId$,\n      this.secretService.secret$.pipe(startWith(null)),\n      this.projectService.project$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.secretService.getSecrets(orgId)),\n      share()\n    );\n\n    const serviceAccounts$ = combineLatest([\n      orgId$,\n      this.serviceAccountService.serviceAccount$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.serviceAccountService.getServiceAccounts(orgId)),\n      share()\n    );\n\n    this.view$ = orgId$.pipe(\n      switchMap((orgId) =>\n        combineLatest([projects$, secrets$, serviceAccounts$]).pipe(\n          switchMap(async ([projects, secrets, serviceAccounts]) => ({\n            latestProjects: this.getRecentItems(projects, this.tableSize),\n            latestSecrets: this.getRecentItems(secrets, this.tableSize),\n            allProjects: projects,\n            allSecrets: secrets,\n            tasks: await this.saveCompletedTasks(orgId, {\n              importSecrets: secrets.length > 0,\n              createSecret: secrets.length > 0,\n              createProject: projects.length > 0,\n              createServiceAccount: serviceAccounts.length > 0,\n            }),\n          }))\n        )\n      )\n    );\n\n    // Refresh onboarding status when orgId changes by fetching the first value from view$.\n    orgId$\n      .pipe(\n        switchMap(() => this.view$.pipe(take(1))),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((view) => {\n        this.showOnboarding = Object.values(view.tasks).includes(false);\n        this.loading = false;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private getRecentItems<T extends { revisionDate: string }[]>(items: T, length: number): T {\n    return items\n      .sort((a, b) => {\n        return new Date(b.revisionDate).getTime() - new Date(a.revisionDate).getTime();\n      })\n      .slice(0, length) as T;\n  }\n\n  private async saveCompletedTasks(\n    organizationId: string,\n    orgTasks: OrganizationTasks\n  ): Promise<OrganizationTasks> {\n    const prevTasks = ((await this.stateService.getSMOnboardingTasks()) || {}) as Tasks;\n    const newlyCompletedOrgTasks = Object.fromEntries(\n      Object.entries(orgTasks).filter(([_k, v]) => v === true)\n    );\n    const nextOrgTasks = {\n      importSecrets: false,\n      createSecret: false,\n      createProject: false,\n      createServiceAccount: false,\n      ...prevTasks[organizationId],\n      ...newlyCompletedOrgTasks,\n    };\n    this.stateService.setSMOnboardingTasks({\n      ...prevTasks,\n      [organizationId]: nextOrgTasks,\n    });\n    return nextOrgTasks as OrganizationTasks;\n  }\n\n  // Projects ---\n\n  openEditProject(projectId: string) {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        projectId: projectId,\n      },\n    });\n  }\n\n  openNewProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openDeleteProjectDialog(event: ProjectListView[]) {\n    this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n      data: {\n        projects: event,\n      },\n    });\n  }\n\n  // Secrets ---\n\n  openSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    SecretsListComponent.copySecretName(name, this.platformUtilsService, this.i18nService);\n  }\n\n  copySecretValue(id: string) {\n    SecretsListComponent.copySecretValue(\n      id,\n      this.platformUtilsService,\n      this.i18nService,\n      this.secretService\n    );\n  }\n\n  protected hideOnboarding() {\n    this.showOnboarding = false;\n    this.saveCompletedTasks(this.organizationId, {\n      importSecrets: true,\n      createSecret: true,\n      createProject: true,\n      createServiceAccount: true,\n    });\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { OverviewComponent } from \"./overview.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: OverviewComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OverviewRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { OnboardingModule } from \"./onboarding.module\";\nimport { OverviewRoutingModule } from \"./overview-routing.module\";\nimport { OverviewComponent } from \"./overview.component\";\nimport { SectionComponent } from \"./section.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, OverviewRoutingModule, OnboardingModule],\n  declarations: [OverviewComponent, SectionComponent],\n  providers: [],\n})\nexport class OverviewModule {}\n","export class BaseAccessPolicyView {\n  id: string;\n  read: boolean;\n  write: boolean;\n  creationDate: string;\n  revisionDate: string;\n}\n\nexport class UserProjectAccessPolicyView extends BaseAccessPolicyView {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedProjectId: string;\n  userId: string;\n}\n\nexport class UserServiceAccountAccessPolicyView extends BaseAccessPolicyView {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedServiceAccountId: string;\n  userId: string;\n}\n\nexport class GroupProjectAccessPolicyView extends BaseAccessPolicyView {\n  groupId: string;\n  groupName: string;\n  grantedProjectId: string;\n  currentUserInGroup: boolean;\n}\n\nexport class GroupServiceAccountAccessPolicyView extends BaseAccessPolicyView {\n  groupId: string;\n  groupName: string;\n  grantedServiceAccountId: string;\n  currentUserInGroup: boolean;\n}\n\nexport class ServiceAccountProjectAccessPolicyView extends BaseAccessPolicyView {\n  serviceAccountId: string;\n  serviceAccountName: string;\n  grantedProjectId: string;\n  grantedProjectName: string;\n}\n\nexport class ProjectAccessPoliciesView {\n  userAccessPolicies: UserProjectAccessPolicyView[];\n  groupAccessPolicies: GroupProjectAccessPolicyView[];\n  serviceAccountAccessPolicies: ServiceAccountProjectAccessPolicyView[];\n}\n\nexport class ServiceAccountAccessPoliciesView {\n  userAccessPolicies: UserServiceAccountAccessPolicyView[];\n  groupAccessPolicies: GroupServiceAccountAccessPolicyView[];\n}\n","export class PotentialGranteeView {\n  id: string;\n  name: string;\n  type: string;\n  email: string;\n}\n","import { AccessPolicyRequest } from \"./access-policy.request\";\n\nexport class AccessPoliciesCreateRequest {\n  userAccessPolicyRequests?: AccessPolicyRequest[];\n  groupAccessPolicyRequests?: AccessPolicyRequest[];\n  serviceAccountAccessPolicyRequests?: AccessPolicyRequest[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class BaseAccessPolicyResponse extends BaseResponse {\n  id: string;\n  read: boolean;\n  write: boolean;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n\nexport class UserProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedProjectId: string;\n  userId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.organizationUserName = this.getResponseProperty(\"OrganizationUserName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.userId = this.getResponseProperty(\"UserId\");\n  }\n}\n\nexport class UserServiceAccountAccessPolicyResponse extends BaseAccessPolicyResponse {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedServiceAccountId: string;\n  userId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.organizationUserName = this.getResponseProperty(\"OrganizationUserName\");\n    this.grantedServiceAccountId = this.getResponseProperty(\"GrantedServiceAccountId\");\n    this.userId = this.getResponseProperty(\"UserId\");\n  }\n}\n\nexport class GroupProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  groupId: string;\n  groupName: string;\n  grantedProjectId: string;\n  currentUserInGroup: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.groupName = this.getResponseProperty(\"GroupName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.currentUserInGroup = this.getResponseProperty(\"CurrentUserInGroup\");\n  }\n}\n\nexport class GroupServiceAccountAccessPolicyResponse extends BaseAccessPolicyResponse {\n  groupId: string;\n  groupName: string;\n  grantedServiceAccountId: string;\n  currentUserInGroup: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.groupName = this.getResponseProperty(\"GroupName\");\n    this.grantedServiceAccountId = this.getResponseProperty(\"GrantedServiceAccountId\");\n    this.currentUserInGroup = this.getResponseProperty(\"CurrentUserInGroup\");\n  }\n}\n\nexport class ServiceAccountProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  serviceAccountId: string;\n  serviceAccountName: string;\n  grantedProjectId: string;\n  grantedProjectName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.serviceAccountId = this.getResponseProperty(\"ServiceAccountId\");\n    this.serviceAccountName = this.getResponseProperty(\"ServiceAccountName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.grantedProjectName = this.getResponseProperty(\"GrantedProjectName\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport {\n  GroupProjectAccessPolicyResponse,\n  ServiceAccountProjectAccessPolicyResponse,\n  UserProjectAccessPolicyResponse,\n} from \"./access-policy.response\";\n\nexport class ProjectAccessPoliciesResponse extends BaseResponse {\n  userAccessPolicies: UserProjectAccessPolicyResponse[];\n  groupAccessPolicies: GroupProjectAccessPolicyResponse[];\n  serviceAccountAccessPolicies: ServiceAccountProjectAccessPolicyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const userAccessPolicies = this.getResponseProperty(\"UserAccessPolicies\");\n    this.userAccessPolicies = userAccessPolicies.map(\n      (k: any) => new UserProjectAccessPolicyResponse(k)\n    );\n    const groupAccessPolicies = this.getResponseProperty(\"GroupAccessPolicies\");\n    this.groupAccessPolicies = groupAccessPolicies.map(\n      (k: any) => new GroupProjectAccessPolicyResponse(k)\n    );\n    const serviceAccountAccessPolicies = this.getResponseProperty(\"ServiceAccountAccessPolicies\");\n    this.serviceAccountAccessPolicies = serviceAccountAccessPolicies.map(\n      (k: any) => new ServiceAccountProjectAccessPolicyResponse(k)\n    );\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport {\n  GroupServiceAccountAccessPolicyResponse,\n  UserServiceAccountAccessPolicyResponse,\n} from \"./access-policy.response\";\n\nexport class ServiceAccountAccessPoliciesResponse extends BaseResponse {\n  userAccessPolicies: UserServiceAccountAccessPolicyResponse[];\n  groupAccessPolicies: GroupServiceAccountAccessPolicyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const userAccessPolicies = this.getResponseProperty(\"UserAccessPolicies\");\n    this.userAccessPolicies = userAccessPolicies.map(\n      (k: any) => new UserServiceAccountAccessPolicyResponse(k)\n    );\n    const groupAccessPolicies = this.getResponseProperty(\"GroupAccessPolicies\");\n    this.groupAccessPolicies = groupAccessPolicies.map(\n      (k: any) => new GroupServiceAccountAccessPolicyResponse(k)\n    );\n  }\n}\n","export class AccessPolicyUpdateRequest {\n  read: boolean;\n  write: boolean;\n}\n","export class AccessPolicyRequest {\n  granteeId: string;\n  read: boolean;\n  write: boolean;\n}\n","export class GrantedPolicyRequest {\n  grantedId: string;\n  read: boolean;\n  write: boolean;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class PotentialGranteeResponse extends BaseResponse {\n  id: string;\n  name: string;\n  type: string;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport {\n  BaseAccessPolicyView,\n  GroupProjectAccessPolicyView,\n  GroupServiceAccountAccessPolicyView,\n  ProjectAccessPoliciesView,\n  ServiceAccountAccessPoliciesView,\n  ServiceAccountProjectAccessPolicyView,\n  UserProjectAccessPolicyView,\n  UserServiceAccountAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { PotentialGranteeView } from \"../../models/view/potential-grantee.view\";\nimport { AccessPoliciesCreateRequest } from \"../../shared/access-policies/models/requests/access-policies-create.request\";\nimport { ProjectAccessPoliciesResponse } from \"../../shared/access-policies/models/responses/project-access-policies.response\";\nimport { ServiceAccountAccessPoliciesResponse } from \"../../shared/access-policies/models/responses/service-accounts-access-policies.response\";\n\nimport { AccessSelectorRowView } from \"./access-selector.component\";\nimport { AccessPolicyUpdateRequest } from \"./models/requests/access-policy-update.request\";\nimport { AccessPolicyRequest } from \"./models/requests/access-policy.request\";\nimport { GrantedPolicyRequest } from \"./models/requests/granted-policy.request\";\nimport {\n  GroupServiceAccountAccessPolicyResponse,\n  UserServiceAccountAccessPolicyResponse,\n  GroupProjectAccessPolicyResponse,\n  ServiceAccountProjectAccessPolicyResponse,\n  UserProjectAccessPolicyResponse,\n} from \"./models/responses/access-policy.response\";\nimport { PotentialGranteeResponse } from \"./models/responses/potential-grantee.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessPolicyService {\n  private _projectAccessPolicyChanges$ = new Subject<ProjectAccessPoliciesView>();\n  private _serviceAccountAccessPolicyChanges$ = new Subject<ServiceAccountAccessPoliciesView>();\n  private _serviceAccountGrantedPolicyChanges$ = new Subject<\n    ServiceAccountProjectAccessPolicyView[]\n  >();\n\n  /**\n   * Emits when a project access policy is created or deleted.\n   */\n  readonly projectAccessPolicyChanges$ = this._projectAccessPolicyChanges$.asObservable();\n\n  /**\n   * Emits when a service account access policy is created or deleted.\n   */\n  readonly serviceAccountAccessPolicyChanges$ =\n    this._serviceAccountAccessPolicyChanges$.asObservable();\n\n  /**\n   * Emits when a service account granted policy is created or deleted.\n   */\n  readonly serviceAccountGrantedPolicyChanges$ =\n    this._serviceAccountGrantedPolicyChanges$.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private organizationService: OrganizationService,\n    protected apiService: ApiService,\n    protected encryptService: EncryptService\n  ) {}\n\n  refreshProjectAccessPolicyChanges() {\n    this._projectAccessPolicyChanges$.next(null);\n  }\n\n  refreshServiceAccountAccessPolicyChanges() {\n    this._serviceAccountAccessPolicyChanges$.next(null);\n  }\n\n  async getGrantedPolicies(\n    serviceAccountId: string,\n    organizationId: string\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/granted-policies\",\n      null,\n      true,\n      true\n    );\n\n    const results = new ListResponse(r, ServiceAccountProjectAccessPolicyResponse);\n    return await this.createServiceAccountProjectAccessPolicyViews(results.data, organizationId);\n  }\n\n  async createGrantedPolicies(\n    organizationId: string,\n    serviceAccountId: string,\n    policies: ServiceAccountProjectAccessPolicyView[]\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const request = this.getGrantedPoliciesCreateRequest(policies);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/granted-policies\",\n      request,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ServiceAccountProjectAccessPolicyResponse);\n    const views = await this.createServiceAccountProjectAccessPolicyViews(\n      results.data,\n      organizationId\n    );\n    this._serviceAccountGrantedPolicyChanges$.next(views);\n    return views;\n  }\n\n  async getProjectAccessPolicies(\n    organizationId: string,\n    projectId: string\n  ): Promise<ProjectAccessPoliciesView> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/access-policies\",\n      null,\n      true,\n      true\n    );\n\n    const results = new ProjectAccessPoliciesResponse(r);\n    return await this.createProjectAccessPoliciesView(organizationId, results);\n  }\n\n  async getServiceAccountAccessPolicies(\n    serviceAccountId: string\n  ): Promise<ServiceAccountAccessPoliciesView> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-policies\",\n      null,\n      true,\n      true\n    );\n\n    const results = new ServiceAccountAccessPoliciesResponse(r);\n    return await this.createServiceAccountAccessPoliciesView(results);\n  }\n\n  async createProjectAccessPolicies(\n    organizationId: string,\n    projectId: string,\n    projectAccessPoliciesView: ProjectAccessPoliciesView\n  ): Promise<ProjectAccessPoliciesView> {\n    const request = this.getAccessPoliciesCreateRequest(projectAccessPoliciesView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/projects/\" + projectId + \"/access-policies\",\n      request,\n      true,\n      true\n    );\n    const results = new ProjectAccessPoliciesResponse(r);\n    const view = await this.createProjectAccessPoliciesView(organizationId, results);\n    this._projectAccessPolicyChanges$.next(view);\n    return view;\n  }\n\n  async createServiceAccountAccessPolicies(\n    serviceAccountId: string,\n    serviceAccountAccessPoliciesView: ServiceAccountAccessPoliciesView\n  ): Promise<ServiceAccountAccessPoliciesView> {\n    const request = this.getServiceAccountAccessPoliciesCreateRequest(\n      serviceAccountAccessPoliciesView\n    );\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-policies\",\n      request,\n      true,\n      true\n    );\n    const results = new ServiceAccountAccessPoliciesResponse(r);\n    const view = await this.createServiceAccountAccessPoliciesView(results);\n    this._serviceAccountAccessPolicyChanges$.next(view);\n    return view;\n  }\n\n  async deleteAccessPolicy(accessPolicyId: string): Promise<void> {\n    await this.apiService.send(\"DELETE\", \"/access-policies/\" + accessPolicyId, null, true, false);\n    this._projectAccessPolicyChanges$.next(null);\n    this._serviceAccountAccessPolicyChanges$.next(null);\n    this._serviceAccountGrantedPolicyChanges$.next(null);\n  }\n\n  async updateAccessPolicy(baseAccessPolicyView: BaseAccessPolicyView): Promise<void> {\n    const payload = new AccessPolicyUpdateRequest();\n    payload.read = baseAccessPolicyView.read;\n    payload.write = baseAccessPolicyView.write;\n    await this.apiService.send(\n      \"PUT\",\n      \"/access-policies/\" + baseAccessPolicyView.id,\n      payload,\n      true,\n      true\n    );\n  }\n\n  async needToShowAccessRemovalWarning(\n    organizationId: string,\n    policy: AccessSelectorRowView,\n    currentPolicies: AccessSelectorRowView[]\n  ): Promise<boolean> {\n    const organization = this.organizationService.get(organizationId);\n    if (organization.isOwner || organization.isAdmin) {\n      return false;\n    }\n    const currentUserId = organization.userId;\n    const readWriteGroupPolicies = currentPolicies\n      .filter((x) => x.accessPolicyId != policy.accessPolicyId)\n      .filter((x) => x.currentUserInGroup && x.read && x.write).length;\n    const readWriteUserPolicies = currentPolicies\n      .filter((x) => x.accessPolicyId != policy.accessPolicyId)\n      .filter((x) => x.userId == currentUserId && x.read && x.write).length;\n\n    if (policy.type === \"user\" && policy.userId == currentUserId && readWriteGroupPolicies == 0) {\n      return true;\n    } else if (\n      policy.type === \"group\" &&\n      policy.currentUserInGroup &&\n      readWriteUserPolicies == 0 &&\n      readWriteGroupPolicies == 0\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  private async createProjectAccessPoliciesView(\n    organizationId: string,\n    projectAccessPoliciesResponse: ProjectAccessPoliciesResponse\n  ): Promise<ProjectAccessPoliciesView> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const view = new ProjectAccessPoliciesView();\n\n    view.userAccessPolicies = projectAccessPoliciesResponse.userAccessPolicies.map((ap) => {\n      return this.createUserProjectAccessPolicyView(ap);\n    });\n    view.groupAccessPolicies = projectAccessPoliciesResponse.groupAccessPolicies.map((ap) => {\n      return this.createGroupProjectAccessPolicyView(ap);\n    });\n    view.serviceAccountAccessPolicies = await Promise.all(\n      projectAccessPoliciesResponse.serviceAccountAccessPolicies.map(async (ap) => {\n        return await this.createServiceAccountProjectAccessPolicyView(orgKey, ap);\n      })\n    );\n    return view;\n  }\n\n  private getAccessPoliciesCreateRequest(\n    projectAccessPoliciesView: ProjectAccessPoliciesView\n  ): AccessPoliciesCreateRequest {\n    const createRequest = new AccessPoliciesCreateRequest();\n\n    if (projectAccessPoliciesView.userAccessPolicies?.length > 0) {\n      createRequest.userAccessPolicyRequests = projectAccessPoliciesView.userAccessPolicies.map(\n        (ap) => {\n          return this.getAccessPolicyRequest(ap.organizationUserId, ap);\n        }\n      );\n    }\n\n    if (projectAccessPoliciesView.groupAccessPolicies?.length > 0) {\n      createRequest.groupAccessPolicyRequests = projectAccessPoliciesView.groupAccessPolicies.map(\n        (ap) => {\n          return this.getAccessPolicyRequest(ap.groupId, ap);\n        }\n      );\n    }\n\n    if (projectAccessPoliciesView.serviceAccountAccessPolicies?.length > 0) {\n      createRequest.serviceAccountAccessPolicyRequests =\n        projectAccessPoliciesView.serviceAccountAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.serviceAccountId, ap);\n        });\n    }\n    return createRequest;\n  }\n\n  private createUserProjectAccessPolicyView(\n    response: UserProjectAccessPolicyResponse\n  ): UserProjectAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      organizationUserId: response.organizationUserId,\n      organizationUserName: response.organizationUserName,\n      userId: response.userId,\n    };\n  }\n\n  private createGroupProjectAccessPolicyView(\n    response: GroupProjectAccessPolicyResponse\n  ): GroupProjectAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      groupId: response.groupId,\n      groupName: response.groupName,\n      currentUserInGroup: response.currentUserInGroup,\n    };\n  }\n\n  private async createServiceAccountProjectAccessPolicyView(\n    organizationKey: SymmetricCryptoKey,\n    response: ServiceAccountProjectAccessPolicyResponse\n  ): Promise<ServiceAccountProjectAccessPolicyView> {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      serviceAccountId: response.serviceAccountId,\n      grantedProjectName: response.grantedProjectName\n        ? await this.encryptService.decryptToUtf8(\n            new EncString(response.grantedProjectName),\n            organizationKey\n          )\n        : null,\n      serviceAccountName: await this.encryptService.decryptToUtf8(\n        new EncString(response.serviceAccountName),\n        organizationKey\n      ),\n    };\n  }\n\n  private getServiceAccountAccessPoliciesCreateRequest(\n    serviceAccountAccessPoliciesView: ServiceAccountAccessPoliciesView\n  ): AccessPoliciesCreateRequest {\n    const createRequest = new AccessPoliciesCreateRequest();\n\n    if (serviceAccountAccessPoliciesView.userAccessPolicies?.length > 0) {\n      createRequest.userAccessPolicyRequests =\n        serviceAccountAccessPoliciesView.userAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.organizationUserId, ap);\n        });\n    }\n\n    if (serviceAccountAccessPoliciesView.groupAccessPolicies?.length > 0) {\n      createRequest.groupAccessPolicyRequests =\n        serviceAccountAccessPoliciesView.groupAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.groupId, ap);\n        });\n    }\n\n    return createRequest;\n  }\n\n  private async createServiceAccountAccessPoliciesView(\n    serviceAccountAccessPoliciesResponse: ServiceAccountAccessPoliciesResponse\n  ): Promise<ServiceAccountAccessPoliciesView> {\n    const view = new ServiceAccountAccessPoliciesView();\n    view.userAccessPolicies = serviceAccountAccessPoliciesResponse.userAccessPolicies.map((ap) => {\n      return this.createUserServiceAccountAccessPolicyView(ap);\n    });\n    view.groupAccessPolicies = serviceAccountAccessPoliciesResponse.groupAccessPolicies.map(\n      (ap) => {\n        return this.createGroupServiceAccountAccessPolicyView(ap);\n      }\n    );\n    return view;\n  }\n\n  private createUserServiceAccountAccessPolicyView(\n    response: UserServiceAccountAccessPolicyResponse\n  ): UserServiceAccountAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedServiceAccountId: response.grantedServiceAccountId,\n      organizationUserId: response.organizationUserId,\n      organizationUserName: response.organizationUserName,\n      userId: response.userId,\n    };\n  }\n\n  private createGroupServiceAccountAccessPolicyView(\n    response: GroupServiceAccountAccessPolicyResponse\n  ): GroupServiceAccountAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedServiceAccountId: response.grantedServiceAccountId,\n      groupId: response.groupId,\n      groupName: response.groupName,\n      currentUserInGroup: response.currentUserInGroup,\n    };\n  }\n\n  async getPeoplePotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/people/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  async getServiceAccountsPotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/service-accounts/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  async getProjectsPotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/projects/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  protected async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  protected getAccessPolicyRequest(\n    granteeId: string,\n    view:\n      | UserProjectAccessPolicyView\n      | UserServiceAccountAccessPolicyView\n      | GroupProjectAccessPolicyView\n      | GroupServiceAccountAccessPolicyView\n      | ServiceAccountProjectAccessPolicyView\n  ) {\n    const request = new AccessPolicyRequest();\n    request.granteeId = granteeId;\n    request.read = view.read;\n    request.write = view.write;\n    return request;\n  }\n\n  protected createBaseAccessPolicyView(\n    response:\n      | UserProjectAccessPolicyResponse\n      | UserServiceAccountAccessPolicyResponse\n      | GroupProjectAccessPolicyResponse\n      | GroupServiceAccountAccessPolicyResponse\n      | ServiceAccountProjectAccessPolicyResponse\n  ) {\n    return {\n      id: response.id,\n      read: response.read,\n      write: response.write,\n      creationDate: response.creationDate,\n      revisionDate: response.revisionDate,\n    };\n  }\n\n  private async createPotentialGranteeViews(\n    organizationId: string,\n    results: PotentialGranteeResponse[]\n  ): Promise<PotentialGranteeView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      results.map(async (r) => {\n        const view = new PotentialGranteeView();\n        view.id = r.id;\n        view.type = r.type;\n        view.email = r.email;\n\n        if (r.type === \"serviceAccount\" || r.type === \"project\") {\n          view.name = await this.encryptService.decryptToUtf8(new EncString(r.name), orgKey);\n        } else {\n          view.name = r.name;\n        }\n        return view;\n      })\n    );\n  }\n\n  private getGrantedPoliciesCreateRequest(\n    policies: ServiceAccountProjectAccessPolicyView[]\n  ): GrantedPolicyRequest[] {\n    return policies.map((ap) => {\n      const request = new GrantedPolicyRequest();\n      request.grantedId = ap.grantedProjectId;\n      request.read = ap.read;\n      request.write = ap.write;\n      return request;\n    });\n  }\n\n  private async createServiceAccountProjectAccessPolicyViews(\n    responses: ServiceAccountProjectAccessPolicyResponse[],\n    organizationId: string\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      responses.map(async (response: ServiceAccountProjectAccessPolicyResponse) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.id = response.id;\n        view.read = response.read;\n        view.write = response.write;\n        view.creationDate = response.creationDate;\n        view.revisionDate = response.revisionDate;\n        view.serviceAccountId = response.serviceAccountId;\n        view.grantedProjectId = response.grantedProjectId;\n        view.serviceAccountName = response.serviceAccountName\n          ? await this.encryptService.decryptToUtf8(\n              new EncString(response.serviceAccountName),\n              orgKey\n            )\n          : null;\n        view.grantedProjectName = response.grantedProjectName\n          ? await this.encryptService.decryptToUtf8(\n              new EncString(response.grantedProjectName),\n              orgKey\n            )\n          : null;\n        return view;\n      })\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" class=\"tw-mt-5\">\n  <bit-form-field>\n    <bit-label>{{ label }}</bit-label>\n    <bit-multi-select\n      class=\"tw-mr-4 tw-w-full\"\n      formControlName=\"multiSelect\"\n      [baseItems]=\"selectItems$ | async\"\n      [loading]=\"loading\"\n    ></bit-multi-select>\n    <bit-hint>{{ hint }}</bit-hint>\n    <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n      {{ \"add\" | i18n }}\n    </button>\n  </bit-form-field>\n</form>\n\n<ng-container>\n  <bit-table *ngIf=\"rows$ | async as rows; else spinner\">\n    <ng-container header>\n      <tr>\n        <th bitCell colspan=\"2\">{{ columnTitle }}</th>\n        <th bitCell>{{ \"permissions\" | i18n }}</th>\n      </tr>\n    </ng-container>\n\n    <ng-template body>\n      <ng-container *ngIf=\"rows.length > 0; else empty\">\n        <tr bitRow *ngFor=\"let row of rows\">\n          <td bitCell class=\"tw-w-0 tw-pr-0\">\n            <i class=\"bwi {{ row.icon }} tw-text-muted\" aria-hidden=\"true\"></i>\n          </td>\n          <td bitCell class=\"tw-max-w-sm tw-truncate\">{{ row.name }}</td>\n          <td bitCell>\n            <bit-form-field\n              *ngIf=\"!row.static; else staticPermissions\"\n              class=\"tw-mb-auto tw-inline-block tw-w-auto\"\n            >\n              <select bitInput (change)=\"update($event.target, row)\" [disabled]=\"row.static\">\n                <option value=\"canRead\" [selected]=\"row.read && row.write != true\">\n                  {{ \"canRead\" | i18n }}\n                </option>\n                <option value=\"canReadWrite\" [selected]=\"row.read && row.write\">\n                  {{ \"canReadWrite\" | i18n }}\n                </option>\n              </select>\n            </bit-form-field>\n            <ng-template #staticPermissions>\n              <span *ngIf=\"row.read && row.write != true\">{{ \"canRead\" | i18n }}</span>\n              <span *ngIf=\"row.read != true && row.write\">{{ \"canWrite\" | i18n }}</span>\n              <span *ngIf=\"row.read && row.write\">{{ \"canReadWrite\" | i18n }}</span>\n            </ng-template>\n          </td>\n          <td bitCell class=\"tw-w-0\">\n            <button\n              type=\"button\"\n              bitIconButton=\"bwi-close\"\n              buttonType=\"main\"\n              size=\"default\"\n              [attr.title]=\"'remove' | i18n\"\n              [attr.aria-label]=\"'remove' | i18n\"\n              [bitAction]=\"delete(row)\"\n            ></button>\n          </td>\n        </tr>\n      </ng-container>\n    </ng-template>\n  </bit-table>\n</ng-container>\n\n<ng-template #empty>\n  <div class=\"tw-mt-4 tw-text-center\">\n    {{ emptyMessage }}\n  </div>\n</ng-template>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-10 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  combineLatest,\n  firstValueFrom,\n  map,\n  Observable,\n  share,\n  Subject,\n  switchMap,\n  tap,\n} from \"rxjs\";\n\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport { BaseAccessPolicyView } from \"../../models/view/access-policy.view\";\n\nimport { AccessPolicyService } from \"./access-policy.service\";\n\nexport type AccessSelectorRowView = {\n  type: \"user\" | \"group\" | \"serviceAccount\" | \"project\";\n  name: string;\n  id: string;\n  accessPolicyId: string;\n  read: boolean;\n  write: boolean;\n  icon: string;\n  userId?: string;\n  currentUserInGroup?: boolean;\n  static?: boolean;\n};\n\n@Component({\n  selector: \"sm-access-selector\",\n  templateUrl: \"./access-selector.component.html\",\n})\nexport class AccessSelectorComponent implements OnInit {\n  static readonly userIcon = \"bwi-user\";\n  static readonly groupIcon = \"bwi-family\";\n  static readonly serviceAccountIcon = \"bwi-wrench\";\n  static readonly projectIcon = \"bwi-collection\";\n\n  /**\n   * Emits the selected itemss on submit.\n   */\n  @Output() onCreateAccessPolicies = new EventEmitter<SelectItemView[]>();\n  @Output() onDeleteAccessPolicy = new EventEmitter<AccessSelectorRowView>();\n  @Output() onUpdateAccessPolicy = new EventEmitter<AccessSelectorRowView>();\n\n  @Input() label: string;\n  @Input() hint: string;\n  @Input() columnTitle: string;\n  @Input() emptyMessage: string;\n  @Input() granteeType: \"people\" | \"serviceAccounts\" | \"projects\";\n\n  protected rows$ = new Subject<AccessSelectorRowView[]>();\n  @Input() private set rows(value: AccessSelectorRowView[]) {\n    this.rows$.next(value);\n  }\n\n  private maxLength = 15;\n  protected formGroup = new FormGroup({\n    multiSelect: new FormControl([], [Validators.required, Validators.maxLength(this.maxLength)]),\n  });\n  protected loading = true;\n\n  protected selectItems$: Observable<SelectItemView[]> = combineLatest([\n    this.rows$,\n    this.route.params,\n  ]).pipe(\n    switchMap(([rows, params]) =>\n      this.getPotentialGrantees(params.organizationId).then((grantees) =>\n        grantees\n          .filter((g) => !rows.some((row) => row.id === g.id))\n          .map((granteeView) => {\n            let icon: string;\n            let listName = granteeView.name;\n            let labelName = granteeView.name;\n            if (granteeView.type === \"user\") {\n              icon = AccessSelectorComponent.userIcon;\n              if (Utils.isNullOrWhitespace(granteeView.name)) {\n                listName = granteeView.email;\n                labelName = granteeView.email;\n              } else {\n                listName = `${granteeView.name} (${granteeView.email})`;\n              }\n            } else if (granteeView.type === \"group\") {\n              icon = AccessSelectorComponent.groupIcon;\n            } else if (granteeView.type === \"serviceAccount\") {\n              icon = AccessSelectorComponent.serviceAccountIcon;\n            } else if (granteeView.type === \"project\") {\n              icon = AccessSelectorComponent.projectIcon;\n            }\n            return {\n              icon: icon,\n              id: granteeView.id,\n              labelName: labelName,\n              listName: listName,\n            };\n          })\n      )\n    ),\n    map((selectItems) => selectItems.sort((a, b) => a.listName.localeCompare(b.listName))),\n    tap(() => {\n      this.loading = false;\n      this.formGroup.reset();\n      this.formGroup.enable();\n    }),\n    share()\n  );\n\n  constructor(private accessPolicyService: AccessPolicyService, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.formGroup.disable();\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n    if (this.formGroup.invalid) {\n      return;\n    }\n    this.formGroup.disable();\n    this.loading = true;\n\n    this.onCreateAccessPolicies.emit(this.formGroup.value.multiSelect);\n\n    return firstValueFrom(this.selectItems$);\n  };\n\n  async update(target: any, row: AccessSelectorRowView): Promise<void> {\n    if (target.value === \"canRead\") {\n      row.read = true;\n      row.write = false;\n    } else if (target.value === \"canReadWrite\") {\n      row.read = true;\n      row.write = true;\n    }\n    this.onUpdateAccessPolicy.emit(row);\n  }\n\n  delete = (row: AccessSelectorRowView) => async () => {\n    this.loading = true;\n    this.formGroup.disable();\n    this.onDeleteAccessPolicy.emit(row);\n    return firstValueFrom(this.selectItems$);\n  };\n\n  private getPotentialGrantees(organizationId: string) {\n    switch (this.granteeType) {\n      case \"people\":\n        return this.accessPolicyService.getPeoplePotentialGrantees(organizationId);\n      case \"serviceAccounts\":\n        return this.accessPolicyService.getServiceAccountsPotentialGrantees(organizationId);\n      case \"projects\":\n        return this.accessPolicyService.getProjectsPotentialGrantees(organizationId);\n    }\n  }\n\n  static getAccessItemType(item: SelectItemView) {\n    switch (item.icon) {\n      case AccessSelectorComponent.userIcon:\n        return \"user\";\n      case AccessSelectorComponent.groupIcon:\n        return \"group\";\n      case AccessSelectorComponent.serviceAccountIcon:\n        return \"serviceAccount\";\n      case AccessSelectorComponent.projectIcon:\n        return \"project\";\n    }\n  }\n\n  static getBaseAccessPolicyView(row: AccessSelectorRowView) {\n    const view = new BaseAccessPolicyView();\n    view.id = row.accessPolicyId;\n    view.read = row.read;\n    view.write = row.write;\n    return view;\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\n\nimport { AccessPolicyService } from \"../access-policy.service\";\nimport { AccessSelectorComponent, AccessSelectorRowView } from \"../access-selector.component\";\n\nexport interface AccessRemovalDetails {\n  title: string;\n  message: string;\n  operation: \"update\" | \"delete\";\n  type: \"project\" | \"service-account\";\n  returnRoute: string[];\n  policy: AccessSelectorRowView;\n}\n\n@Component({\n  selector: \"sm-access-removal-dialog\",\n  templateUrl: \"./access-removal-dialog.component.html\",\n})\nexport class AccessRemovalDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    private router: Router,\n    private accessPolicyService: AccessPolicyService,\n    @Inject(DIALOG_DATA) public data: AccessRemovalDetails\n  ) {}\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.message ||\n      !this.data.title ||\n      !this.data.operation ||\n      !this.data.returnRoute ||\n      !this.data.policy\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The access removal dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n\n  removeAccess = async () => {\n    await this.router.navigate(this.data.returnRoute);\n    if (this.data.operation === \"delete\") {\n      await this.accessPolicyService.deleteAccessPolicy(this.data.policy.accessPolicyId);\n    } else if (this.data.operation == \"update\") {\n      await this.accessPolicyService.updateAccessPolicy(\n        AccessSelectorComponent.getBaseAccessPolicyView(this.data.policy)\n      );\n    }\n    this.dialogRef.close();\n  };\n\n  cancel = () => {\n    if (this.data.type == \"project\") {\n      this.accessPolicyService.refreshProjectAccessPolicyChanges();\n    } else if (this.data.type == \"service-account\") {\n      this.accessPolicyService.refreshServiceAccountAccessPolicyChanges();\n    }\n    this.dialogRef.close();\n  };\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ data.title | i18n }}</span>\n  <span bitDialogContent>\n    {{ data.message | i18n }}\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n    <button type=\"button\" bitButton buttonType=\"danger\" [bitAction]=\"removeAccess\">\n      {{ \"removeAccess\" | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" [bitAction]=\"cancel\">\n      {{ \"cancel\" | i18n }}\n    </button>\n  </div>\n</bit-simple-dialog>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map, Observable, share, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\nimport { DialogService, SelectItemView } from \"@bitwarden/components\";\n\nimport {\n  GroupProjectAccessPolicyView,\n  ProjectAccessPoliciesView,\n  UserProjectAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\nimport {\n  AccessRemovalDetails,\n  AccessRemovalDialogComponent,\n} from \"../../shared/access-policies/dialogs/access-removal-dialog.component\";\n\n@Component({\n  selector: \"sm-project-people\",\n  templateUrl: \"./project-people.component.html\",\n})\nexport class ProjectPeopleComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private projectId: string;\n  private rows: AccessSelectorRowView[];\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.projectAccessPolicyChanges$.pipe(\n      startWith(null),\n      switchMap(() =>\n        this.accessPolicyService.getProjectAccessPolicies(this.organizationId, this.projectId)\n      ),\n      map((policies) => {\n        const rows: AccessSelectorRowView[] = [];\n        policies.userAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"user\",\n            name: policy.organizationUserName,\n            id: policy.organizationUserId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            userId: policy.userId,\n            icon: AccessSelectorComponent.userIcon,\n          });\n        });\n\n        policies.groupAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"group\",\n            name: policy.groupName,\n            id: policy.groupId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            currentUserInGroup: policy.currentUserInGroup,\n            icon: AccessSelectorComponent.groupIcon,\n          });\n        });\n        return rows;\n      }),\n      share()\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const projectAccessPoliciesView = new ProjectAccessPoliciesView();\n    projectAccessPoliciesView.userAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"user\")\n      .map((filtered) => {\n        const view = new UserProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.organizationUserId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    projectAccessPoliciesView.groupAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"group\")\n      .map((filtered) => {\n        const view = new GroupProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.groupId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createProjectAccessPolicies(\n      this.organizationId,\n      this.projectId,\n      projectAccessPoliciesView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    if (\n      await this.accessPolicyService.needToShowAccessRemovalWarning(\n        this.organizationId,\n        policy,\n        this.rows\n      )\n    ) {\n      this.launchDeleteWarningDialog(policy);\n      return;\n    }\n\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  protected async handleUpdateAccessPolicy(policy: AccessSelectorRowView) {\n    if (\n      policy.read === true &&\n      policy.write === false &&\n      (await this.accessPolicyService.needToShowAccessRemovalWarning(\n        this.organizationId,\n        policy,\n        this.rows\n      ))\n    ) {\n      this.launchUpdateWarningDialog(policy);\n      return;\n    }\n\n    try {\n      return await this.accessPolicyService.updateAccessPolicy(\n        AccessSelectorComponent.getBaseAccessPolicyView(policy)\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogService,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n\n    this.rows$.pipe(takeUntil(this.destroy$)).subscribe((rows) => {\n      this.rows = rows;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private async launchDeleteWarningDialog(policy: AccessSelectorRowView) {\n    this.dialogService.open<unknown, AccessRemovalDetails>(AccessRemovalDialogComponent, {\n      data: {\n        title: \"smAccessRemovalWarningProjectTitle\",\n        message: \"smAccessRemovalWarningProjectMessage\",\n        operation: \"delete\",\n        type: \"project\",\n        returnRoute: [\"sm\", this.organizationId, \"projects\"],\n        policy,\n      },\n    });\n  }\n\n  private launchUpdateWarningDialog(policy: AccessSelectorRowView) {\n    this.dialogService.open<unknown, AccessRemovalDetails>(AccessRemovalDialogComponent, {\n      data: {\n        title: \"smAccessRemovalWarningProjectTitle\",\n        message: \"smAccessRemovalWarningProjectMessage\",\n        operation: \"update\",\n        type: \"project\",\n        returnRoute: [\"sm\", this.organizationId, \"projects\"],\n        policy,\n      },\n    });\n  }\n}\n","<div class=\"tw-w-2/5\">\n  <p class=\"tw-mt-8\">\n    {{ \"projectPeopleDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"people\"\n    [label]=\"'people' | i18n\"\n    [hint]=\"'projectPeopleSelectHint' | i18n\"\n    [columnTitle]=\"'groupSlashUser' | i18n\"\n    [emptyMessage]=\"'projectEmptyPeopleAccessPolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n    (onUpdateAccessPolicy)=\"handleUpdateAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<ng-container *ngIf=\"secrets$ | async as secrets; else spinner\">\n  <div *ngIf=\"secrets.length > 0\" class=\"float-right tw-mt-3 tw-items-center\">\n    <button type=\"button\" bitButton buttonType=\"secondary\" (click)=\"openNewSecretDialog()\">\n      <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n      {{ \"newSecret\" | i18n }}\n    </button>\n  </div>\n  <sm-secrets-list\n    (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n    (newSecretEvent)=\"openNewSecretDialog()\"\n    (editSecretEvent)=\"openEditSecret($event)\"\n    (copySecretNameEvent)=\"copySecretName($event)\"\n    (copySecretValueEvent)=\"copySecretValue($event)\"\n    [secrets]=\"secrets\"\n  ></sm-secrets-list>\n</ng-container>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, filter, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"../../secrets/dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../../secrets/dialog/secret-dialog.component\";\nimport { SecretService } from \"../../secrets/secret.service\";\nimport { SecretsListComponent } from \"../../shared/secrets-list.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-project-secrets\",\n  templateUrl: \"./project-secrets.component.html\",\n})\nexport class ProjectSecretsComponent {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n  private projectId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private secretService: SecretService,\n    private dialogService: DialogService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    // Refresh list if project is edited\n    const currentProjectEdited = this.projectService.project$.pipe(\n      filter((p) => p?.id === this.projectId),\n      startWith(null)\n    );\n\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params, currentProjectEdited),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        this.projectId = params.projectId;\n        return await this.getSecretsByProject();\n      })\n    );\n  }\n\n  private async getSecretsByProject(): Promise<SecretListView[]> {\n    return await this.secretService.getSecretsByProject(this.organizationId, this.projectId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        projectId: this.projectId,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    SecretsListComponent.copySecretName(name, this.platformUtilsService, this.i18nService);\n  }\n\n  copySecretValue(id: string) {\n    SecretsListComponent.copySecretValue(\n      id,\n      this.platformUtilsService,\n      this.i18nService,\n      this.secretService\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map, Observable, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components\";\n\nimport {\n  ProjectAccessPoliciesView,\n  ServiceAccountProjectAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\n\n@Component({\n  selector: \"sm-project-service-accounts\",\n  templateUrl: \"./project-service-accounts.component.html\",\n})\nexport class ProjectServiceAccountsComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private projectId: string;\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.projectAccessPolicyChanges$.pipe(\n      startWith(null),\n      switchMap(() =>\n        this.accessPolicyService.getProjectAccessPolicies(this.organizationId, this.projectId)\n      ),\n      map((policies) =>\n        policies.serviceAccountAccessPolicies.map((policy) => ({\n          type: \"serviceAccount\",\n          name: policy.serviceAccountName,\n          id: policy.serviceAccountId,\n          accessPolicyId: policy.id,\n          read: policy.read,\n          write: policy.write,\n          icon: AccessSelectorComponent.serviceAccountIcon,\n          static: true,\n        }))\n      )\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const projectAccessPoliciesView = new ProjectAccessPoliciesView();\n    projectAccessPoliciesView.serviceAccountAccessPolicies = selected\n      .filter(\n        (selection) => AccessSelectorComponent.getAccessItemType(selection) === \"serviceAccount\"\n      )\n      .map((filtered) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.serviceAccountId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createProjectAccessPolicies(\n      this.organizationId,\n      this.projectId,\n      projectAccessPoliciesView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<div class=\"tw-w-2/5\">\n  <p class=\"tw-mt-8\">\n    {{ \"projectServiceAccountsDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"serviceAccounts\"\n    [label]=\"'serviceAccounts' | i18n\"\n    [hint]=\"'projectServiceAccountsSelectHint' | i18n\"\n    [columnTitle]=\"'serviceAccounts' | i18n\"\n    [emptyMessage]=\"'projectEmptyServiceAccountAccessPolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<sm-header *ngIf=\"project$ | async as project\" [title]=\"project.name\" icon=\"bwi-collection\">\n  <bit-breadcrumbs slot=\"breadcrumbs\">\n    <bit-breadcrumb [route]=\"['..']\" icon=\"bwi-angle-left\">{{ \"projects\" | i18n }}</bit-breadcrumb>\n  </bit-breadcrumbs>\n  <bit-tab-nav-bar label=\"Main\" slot=\"tabs\">\n    <bit-tab-link [route]=\"['secrets']\">{{ \"secrets\" | i18n }}</bit-tab-link>\n    <ng-container *ngIf=\"project.write\">\n      <bit-tab-link [route]=\"['people']\">{{ \"people\" | i18n }}</bit-tab-link>\n      <bit-tab-link [route]=\"['service-accounts']\">{{ \"serviceAccounts\" | i18n }}</bit-tab-link>\n    </ng-container>\n  </bit-tab-nav-bar>\n  <sm-new-menu></sm-new-menu>\n  <button\n    type=\"button\"\n    slot=\"secondary\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"openEditDialog()\"\n    *ngIf=\"project.write\"\n  >\n    {{ \"editProject\" | i18n }}\n  </button>\n</sm-header>\n<router-outlet></router-outlet>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, filter, Observable, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectPermissionDetailsView } from \"../../models/view/project.view\";\nimport {\n  OperationType,\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../dialog/project-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-project\",\n  templateUrl: \"./project.component.html\",\n})\nexport class ProjectComponent implements OnInit, OnDestroy {\n  protected project$: Observable<ProjectPermissionDetailsView>;\n\n  private organizationId: string;\n  private projectId: string;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit(): void {\n    // Update project if it is edited\n    const currentProjectEdited = this.projectService.project$.pipe(\n      filter((p) => p?.id === this.projectId),\n      startWith(null)\n    );\n\n    this.project$ = combineLatest([this.route.params, currentProjectEdited]).pipe(\n      switchMap(([params, _]) => {\n        return this.projectService.getByProjectId(params.projectId);\n      })\n    );\n\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async openEditDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        projectId: this.projectId,\n      },\n    });\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  ProjectDeleteDialogComponent,\n  ProjectDeleteOperation,\n} from \"../dialog/project-delete-dialog.component\";\nimport {\n  OperationType,\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../dialog/project-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-projects\",\n  templateUrl: \"./projects.component.html\",\n})\nexport class ProjectsComponent implements OnInit {\n  protected projects$: Observable<ProjectListView[]>;\n  protected search: string;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private accessPolicyService: AccessPolicyService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.projects$ = combineLatest([\n      this.route.params,\n      this.projectService.project$.pipe(startWith(null)),\n      this.accessPolicyService.projectAccessPolicyChanges$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(async ([params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getProjects();\n      })\n    );\n  }\n\n  private async getProjects(): Promise<ProjectListView[]> {\n    return await this.projectService.getProjects(this.organizationId);\n  }\n\n  openEditProject(projectId: string) {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        projectId: projectId,\n      },\n    });\n  }\n\n  openNewProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openDeleteProjectDialog(event: ProjectListView[]) {\n    this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n      data: {\n        projects: event,\n      },\n    });\n  }\n}\n","<sm-header>\n  <input bitInput [placeholder]=\"'searchProjects' | i18n\" [(ngModel)]=\"search\" class=\"tw-w-80\" />\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-projects-list\n  (newProjectEvent)=\"openNewProjectDialog()\"\n  (editProjectEvent)=\"openEditProject($event)\"\n  (deleteProjectEvent)=\"openDeleteProjectDialog($event)\"\n  [projects]=\"projects$ | async\"\n  [search]=\"search\"\n>\n</sm-projects-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { ProjectPeopleComponent } from \"./project/project-people.component\";\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectServiceAccountsComponent } from \"./project/project-service-accounts.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ProjectsComponent,\n  },\n  {\n    path: \":projectId\",\n    component: ProjectComponent,\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"secrets\",\n      },\n      {\n        path: \"secrets\",\n        component: ProjectSecretsComponent,\n      },\n      {\n        path: \"people\",\n        component: ProjectPeopleComponent,\n      },\n      {\n        path: \"service-accounts\",\n        component: ProjectServiceAccountsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProjectsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { ProjectDeleteDialogComponent } from \"./dialog/project-delete-dialog.component\";\nimport { ProjectDialogComponent } from \"./dialog/project-dialog.component\";\nimport { ProjectPeopleComponent } from \"./project/project-people.component\";\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectServiceAccountsComponent } from \"./project/project-service-accounts.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsRoutingModule } from \"./projects-routing.module\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ProjectsRoutingModule, BreadcrumbsModule],\n  declarations: [\n    ProjectsComponent,\n    ProjectDialogComponent,\n    ProjectDeleteDialogComponent,\n    ProjectPeopleComponent,\n    ProjectServiceAccountsComponent,\n    ProjectComponent,\n    ProjectSecretsComponent,\n  ],\n  providers: [],\n})\nexport class ProjectsModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretsListComponent } from \"../shared/secrets-list.component\";\n\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"./dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"./dialog/secret-dialog.component\";\nimport { SecretService } from \"./secret.service\";\n\n@Component({\n  selector: \"sm-secrets\",\n  templateUrl: \"./secrets.component.html\",\n})\nexport class SecretsComponent implements OnInit {\n  protected secrets$: Observable<SecretListView[]>;\n  protected search: string;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getSecrets();\n      })\n    );\n\n    if (this.route.snapshot.queryParams.search) {\n      this.search = this.route.snapshot.queryParams.search;\n    }\n  }\n\n  private async getSecrets(): Promise<SecretListView[]> {\n    return await this.secretService.getSecrets(this.organizationId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    SecretsListComponent.copySecretName(name, this.platformUtilsService, this.i18nService);\n  }\n\n  copySecretValue(id: string) {\n    SecretsListComponent.copySecretValue(\n      id,\n      this.platformUtilsService,\n      this.i18nService,\n      this.secretService\n    );\n  }\n}\n","<sm-header>\n  <input bitInput [placeholder]=\"'searchSecrets' | i18n\" [(ngModel)]=\"search\" class=\"tw-w-80\" />\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-secrets-list\n  (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n  (newSecretEvent)=\"openNewSecretDialog()\"\n  (editSecretEvent)=\"openEditSecret($event)\"\n  (copySecretNameEvent)=\"copySecretName($event)\"\n  (copySecretValueEvent)=\"copySecretValue($event)\"\n  [secrets]=\"secrets$ | async\"\n  [search]=\"search\"\n></sm-secrets-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { SecretsComponent } from \"./secrets.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: SecretsComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretDeleteDialogComponent } from \"./dialog/secret-delete.component\";\nimport { SecretDialogComponent } from \"./dialog/secret-dialog.component\";\nimport { SecretsRoutingModule } from \"./secrets-routing.module\";\nimport { SecretsComponent } from \"./secrets.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, SecretsRoutingModule],\n  declarations: [SecretDeleteDialogComponent, SecretDialogComponent, SecretsComponent],\n  providers: [],\n})\nexport class SecretsModule {}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class AccessTokenRequest {\n  name: EncString;\n  encryptedPayload: EncString;\n  key: EncString;\n  expireAt: Date;\n}\n","export class RevokeAccessTokensRequest {\n  ids: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenCreationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  clientSecret: string;\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.clientSecret = this.getResponseProperty(\"ClientSecret\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenResponse extends BaseResponse {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.scopes = this.getResponseProperty(\"Scopes\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","export class AccessTokenView {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: Date;\n  creationDate: Date;\n  revisionDate: Date;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport { AccessTokenRequest } from \"../models/requests/access-token.request\";\nimport { RevokeAccessTokensRequest } from \"../models/requests/revoke-access-tokens.request\";\nimport { AccessTokenCreationResponse } from \"../models/responses/access-token-creation.response\";\nimport { AccessTokenResponse } from \"../models/responses/access-tokens.response\";\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessService {\n  private readonly _accessTokenVersion = \"0\";\n  protected _accessToken: Subject<AccessTokenView> = new Subject();\n\n  accessToken$ = this._accessToken.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getAccessTokens(\n    organizationId: string,\n    serviceAccountId: string\n  ): Promise<AccessTokenView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, AccessTokenResponse);\n\n    return await this.createAccessTokenViews(organizationId, results.data);\n  }\n\n  async createAccessToken(\n    organizationId: string,\n    serviceAccountId: string,\n    accessTokenView: AccessTokenView\n  ): Promise<string> {\n    const keyMaterial = await this.cryptoFunctionService.randomBytes(16);\n    const key = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-accesstoken\",\n      \"sm-access-token\",\n      64,\n      \"sha256\"\n    );\n    const encryptionKey = new SymmetricCryptoKey(key);\n\n    const request = await this.createAccessTokenRequest(\n      organizationId,\n      encryptionKey,\n      accessTokenView\n    );\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      request,\n      true,\n      true\n    );\n    const result = new AccessTokenCreationResponse(r);\n    this._accessToken.next(null);\n    const b64Key = Utils.fromBufferToB64(keyMaterial);\n    return `${this._accessTokenVersion}.${result.id}.${result.clientSecret}:${b64Key}`;\n  }\n\n  async revokeAccessTokens(serviceAccountId: string, accessTokenIds: string[]): Promise<void> {\n    const request = new RevokeAccessTokensRequest();\n    request.ids = accessTokenIds;\n\n    await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens/revoke\",\n      request,\n      true,\n      false\n    );\n\n    this._accessToken.next(null);\n  }\n\n  private async createAccessTokenRequest(\n    organizationId: string,\n    encryptionKey: SymmetricCryptoKey,\n    accessTokenView: AccessTokenView\n  ): Promise<AccessTokenRequest> {\n    const organizationKey = await this.getOrganizationKey(organizationId);\n    const accessTokenRequest = new AccessTokenRequest();\n    const [name, encryptedPayload, key] = await Promise.all([\n      await this.encryptService.encrypt(accessTokenView.name, organizationKey),\n      await this.encryptService.encrypt(\n        JSON.stringify({ encryptionKey: organizationKey.keyB64 }),\n        encryptionKey\n      ),\n      await this.encryptService.encrypt(encryptionKey.keyB64, organizationKey),\n    ]);\n\n    accessTokenRequest.name = name;\n    accessTokenRequest.encryptedPayload = encryptedPayload;\n    accessTokenRequest.key = key;\n    accessTokenRequest.expireAt = accessTokenView.expireAt;\n    return accessTokenRequest;\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async createAccessTokenViews(\n    organizationId: string,\n    accessTokenResponses: AccessTokenResponse[]\n  ): Promise<AccessTokenView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      accessTokenResponses.map(async (s) => {\n        const view = new AccessTokenView();\n        view.id = s.id;\n        view.name = await this.encryptService.decryptToUtf8(new EncString(s.name), orgKey);\n        view.scopes = s.scopes;\n        view.expireAt = s.expireAt ? new Date(s.expireAt) : null;\n        view.creationDate = new Date(s.creationDate);\n        view.revisionDate = new Date(s.revisionDate);\n        return view;\n      })\n    );\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nexport interface AccessTokenDetails {\n  subTitle: string;\n  expirationDate?: Date;\n  accessToken: string;\n}\n\n@Component({\n  selector: \"sm-access-token-dialog\",\n  templateUrl: \"./access-token-dialog.component.html\",\n})\nexport class AccessTokenDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenDetails,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {\n    this.dialogRef.disableClose = true;\n  }\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (!this.data.subTitle || !this.data.accessToken) {\n      this.dialogRef.close();\n      throw new Error(\"The access token dialog was not called with the appropriate values.\");\n    }\n  }\n\n  copyAccessToken(): void {\n    this.platformUtilsService.copyToClipboard(this.data.accessToken);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"accessTokenCreatedAndCopied\")\n    );\n    this.dialogRef.close();\n  }\n}\n","<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ \"newAccessToken\" | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.subTitle }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    <bit-callout type=\"info\" [title]=\"'accessTokenCallOutTitle' | i18n\">\n      {{ \"downloadAccessToken\" | i18n }}<br />\n      {{ \"expiresOnAccessToken\" | i18n }}\n      {{\n        data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date : \"medium\")\n      }}\n    </bit-callout>\n\n    <bit-form-field class=\"tw-mb-0\">\n      <bit-label>{{ \"accessToken\" | i18n }}</bit-label>\n      <textarea bitInput disabled rows=\"4\">{{ data.accessToken }}</textarea>\n    </bit-form-field>\n    {{ \"expiresOnAccessToken\" | i18n }}\n    {{ data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date : \"medium\") }}\n  </div>\n\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button type=\"button\" bitButton buttonType=\"primary\" (click)=\"copyAccessToken()\">\n      <i class=\"bwi bwi-clone\" aria-hidden=\"true\"></i>\n      {{ \"copyToken\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","<ng-container [formGroup]=\"form\">\n  <bit-form-field>\n    <bit-label>{{ \"expires\" | i18n }}</bit-label>\n    <select bitInput formControlName=\"expires\">\n      <option ngValue=\"never\">{{ \"never\" | i18n }}</option>\n      <option *ngFor=\"let day of expirationDayOptions\" [ngValue]=\"day\">\n        {{ \"days\" | i18n : day }}\n      </option>\n      <option ngValue=\"custom\">{{ \"custom\" | i18n }}</option>\n    </select>\n  </bit-form-field>\n  <bit-form-field *ngIf=\"form.value.expires === 'custom'\">\n    <bit-label>{{ \"expirationDate\" | i18n }}</bit-label>\n    <input\n      bitInput\n      type=\"datetime-local\"\n      [min]=\"currentDate | date : 'YYYY-MM-ddThh:mm'\"\n      formControlName=\"expireDateTime\"\n    />\n  </bit-form-field>\n</ng-container>\n","import { DatePipe } from \"@angular/common\";\nimport { Component, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\n@Component({\n  selector: \"sm-expiration-options\",\n  templateUrl: \"./expiration-options.component.html\",\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n    {\n      provide: NG_VALIDATORS,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n  ],\n})\nexport class ExpirationOptionsComponent\n  implements ControlValueAccessor, Validator, OnInit, OnDestroy\n{\n  private destroy$ = new Subject<void>();\n\n  @Input() expirationDayOptions: number[];\n\n  @Input() set touched(val: boolean) {\n    if (val) {\n      this.form.markAllAsTouched();\n    }\n  }\n\n  currentDate = new Date();\n\n  protected form = new FormGroup({\n    expires: new FormControl(\"never\", [Validators.required]),\n    expireDateTime: new FormControl(\"\", [Validators.required]),\n  });\n\n  constructor(private datePipe: DatePipe) {}\n\n  async ngOnInit() {\n    this.form.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this._onChange(this.getExpiresDate());\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private _onChange = (_value: Date | null): void => undefined;\n  registerOnChange(fn: (value: Date | null) => void): void {\n    this._onChange = fn;\n  }\n\n  onTouched = (): void => undefined;\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  validate(control: AbstractControl<any, any>): ValidationErrors {\n    if (\n      (this.form.value.expires == \"custom\" && this.form.value.expireDateTime) ||\n      this.form.value.expires !== \"custom\"\n    ) {\n      return null;\n    }\n    return {\n      required: true,\n    };\n  }\n\n  writeValue(value: Date | null): void {\n    if (value == null) {\n      this.form.setValue({ expires: \"never\", expireDateTime: null });\n    }\n    if (value) {\n      this.form.setValue({\n        expires: \"custom\",\n        expireDateTime: this.datePipe.transform(value, \"YYYY-MM-ddThh:mm\"),\n      });\n    }\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  private getExpiresDate(): Date | null {\n    if (this.form.value.expires == \"never\") {\n      return null;\n    }\n    if (this.form.value.expires == \"custom\") {\n      return new Date(this.form.value.expireDateTime);\n    }\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() + Number(this.form.value.expires));\n    return currentDate;\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../../models/view/service-account.view\";\nimport { AccessTokenView } from \"../../models/view/access-token.view\";\nimport { AccessService } from \"../access.service\";\n\nimport { AccessTokenDetails, AccessTokenDialogComponent } from \"./access-token-dialog.component\";\n\nexport interface AccessTokenOperation {\n  organizationId: string;\n  serviceAccountView: ServiceAccountView;\n}\n\n@Component({\n  selector: \"sm-access-token-create-dialog\",\n  templateUrl: \"./access-token-create-dialog.component.html\",\n})\nexport class AccessTokenCreateDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required, Validators.maxLength(80)]),\n    expirationDateControl: new FormControl(null),\n  });\n  protected loading = false;\n\n  expirationDayOptions = [7, 30, 60];\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenOperation,\n    private dialogService: DialogService,\n    private accessService: AccessService\n  ) {}\n\n  async ngOnInit() {\n    if (\n      !this.data.organizationId ||\n      !this.data.serviceAccountView?.id ||\n      !this.data.serviceAccountView?.name\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        `The access token create dialog was not called with the appropriate operation values.`\n      );\n    }\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n    if (this.formGroup.invalid) {\n      return;\n    }\n    const accessTokenView = new AccessTokenView();\n    accessTokenView.name = this.formGroup.value.name;\n    accessTokenView.expireAt = this.formGroup.value.expirationDateControl;\n    const accessToken = await this.accessService.createAccessToken(\n      this.data.organizationId,\n      this.data.serviceAccountView.id,\n      accessTokenView\n    );\n    this.openAccessTokenDialog(\n      this.data.serviceAccountView.name,\n      accessToken,\n      accessTokenView.expireAt\n    );\n    this.dialogRef.close();\n  };\n\n  private openAccessTokenDialog(\n    serviceAccountName: string,\n    accessToken: string,\n    expirationDate?: Date\n  ) {\n    this.dialogService.open<unknown, AccessTokenDetails>(AccessTokenDialogComponent, {\n      data: {\n        subTitle: serviceAccountName,\n        expirationDate: expirationDate,\n        accessToken: accessToken,\n      },\n    });\n  }\n\n  static openNewAccessTokenDialog(\n    dialogService: DialogService,\n    serviceAccountId: string,\n    organizationId: string\n  ) {\n    // TODO once service account names are implemented in service account contents page pass in here.\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.id = serviceAccountId;\n    serviceAccountView.name = \"placeholder\";\n\n    return dialogService.open<unknown, AccessTokenOperation>(AccessTokenCreateDialogComponent, {\n      data: {\n        organizationId: organizationId,\n        serviceAccountView: serviceAccountView,\n      },\n    });\n  }\n}\n","<div *ngIf=\"!tokens\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<bit-no-items *ngIf=\"tokens?.length == 0\">\n  <ng-container slot=\"title\">{{ \"accessTokensNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"accessTokensNoItemsDesc\" | i18n }}</ng-container>\n  <button\n    type=\"button\"\n    slot=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newAccessTokenEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newAccessToken\" | i18n }}\n  </button>\n</bit-no-items>\n\n<bit-table *ngIf=\"tokens?.length >= 1\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"tw-m-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell>{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"permissions\" | i18n }}</th>\n      <th bitCell>{{ \"expires\" | i18n }}</th>\n      <th bitCell>{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body>\n    <tr bitRow *ngFor=\"let token of tokens\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(token.id) : null\"\n          [checked]=\"selection.isSelected(token.id)\"\n        />\n      </td>\n      <td bitCell>{{ token.name }}</td>\n      <td bitCell>{{ permission(token) | i18n }}</td>\n      <td bitCell>\n        {{ token.expireAt === null ? (\"never\" | i18n) : (token.expireAt | date : \"medium\") }}\n      </td>\n      <td bitCell>{{ token.revisionDate | date : \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tokenMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #tokenMenu>\n        <button type=\"button\" bitMenuItem (click)=\"revokeAccessTokensEvent.emit([token])\">\n          <span class=\"tw-text-danger\">\n            <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n            {{ \"revokeAccessToken\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"revokeSelected()\">\n    <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"revokeAccessTokens\" | i18n }}</span>\n  </button>\n</bit-menu>\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>\n      <span>{{ \"newAccessToken\" | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        {{ data.serviceAccountView.name }}\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-form-field>\n        <bit-label>{{ \"name\" | i18n }}</bit-label>\n        <input bitInput formControlName=\"name\" />\n      </bit-form-field>\n      <div class=\"tw-mb-6\">\n        <bit-form-field class=\"tw-mb-0\">\n          <bit-label>{{ \"permissions\" | i18n }}</bit-label>\n          <select bitInput disabled>\n            <option selected value=\"canRead\">\n              {{ \"canRead\" | i18n }}\n            </option>\n          </select>\n        </bit-form-field>\n        <span class=\"tw-text-sm tw-text-muted\">\n          {{ \"accessTokenPermissionsBetaNotification\" | i18n }}\n        </span>\n      </div>\n      <sm-expiration-options\n        formControlName=\"expirationDateControl\"\n        [expirationDayOptions]=\"expirationDayOptions\"\n        [touched]=\"formGroup.controls.expirationDateControl.touched\"\n      ></sm-expiration-options>\n    </div>\n\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button class=\"tw-normal-case\" type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"newAccessToken\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Component({\n  selector: \"sm-access-list\",\n  templateUrl: \"./access-list.component.html\",\n})\nexport class AccessListComponent {\n  @Input()\n  get tokens(): AccessTokenView[] {\n    return this._tokens;\n  }\n  set tokens(secrets: AccessTokenView[]) {\n    this.selection.clear();\n    this._tokens = secrets;\n  }\n  private _tokens: AccessTokenView[];\n\n  @Output() newAccessTokenEvent = new EventEmitter();\n  @Output() revokeAccessTokensEvent = new EventEmitter<AccessTokenView[]>();\n\n  protected selection = new SelectionModel<string>(true, []);\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.tokens.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.tokens.map((s) => s.id));\n  }\n\n  protected revokeSelected() {\n    const selected = this.tokens.filter((s) => this.selection.selected.includes(s.id));\n    this.revokeAccessTokensEvent.emit(selected);\n  }\n\n  protected permission(token: AccessTokenView) {\n    return \"canRead\";\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { UserVerificationPromptComponent } from \"@bitwarden/web-vault/app/components/user-verification-prompt.component\";\n\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\nimport { AccessService } from \"./access.service\";\nimport { AccessTokenCreateDialogComponent } from \"./dialogs/access-token-create-dialog.component\";\n\n@Component({\n  selector: \"sm-access-tokens\",\n  templateUrl: \"./access-tokens.component.html\",\n})\nexport class AccessTokenComponent implements OnInit {\n  accessTokens$: Observable<AccessTokenView[]>;\n\n  private serviceAccountId: string;\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private accessService: AccessService,\n    private dialogService: DialogService,\n    private modalService: ModalService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  ngOnInit() {\n    this.accessTokens$ = this.accessService.accessToken$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        this.serviceAccountId = params.serviceAccountId;\n        return await this.getAccessTokens();\n      })\n    );\n  }\n\n  protected async revoke(tokens: AccessTokenView[]) {\n    if (!(await this.verifyUser())) {\n      return;\n    }\n\n    await this.accessService.revokeAccessTokens(\n      this.serviceAccountId,\n      tokens.map((t) => t.id)\n    );\n\n    this.platformUtilsService.showToast(\"success\", null, \"Access tokens revoked.\");\n  }\n\n  protected openNewAccessTokenDialog() {\n    AccessTokenCreateDialogComponent.openNewAccessTokenDialog(\n      this.dialogService,\n      this.serviceAccountId,\n      this.organizationId\n    );\n  }\n\n  private verifyUser() {\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: \"revokeAccessTokenDesc\",\n        confirmButtonText: \"revokeAccessToken\",\n        modalTitle: \"revokeAccessToken\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n\n  private async getAccessTokens(): Promise<AccessTokenView[]> {\n    return await this.accessService.getAccessTokens(this.organizationId, this.serviceAccountId);\n  }\n}\n","<sm-access-list\n  [tokens]=\"accessTokens$ | async\"\n  (newAccessTokenEvent)=\"openNewAccessTokenDialog()\"\n  (revokeAccessTokensEvent)=\"revoke($event)\"\n></sm-access-list>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  combineLatestWith,\n  map,\n  Observable,\n  share,\n  startWith,\n  Subject,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\nimport { DialogService, SimpleDialogOptions, SimpleDialogType } from \"@bitwarden/components\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport {\n  GroupServiceAccountAccessPolicyView,\n  ServiceAccountAccessPoliciesView,\n  UserServiceAccountAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\nimport {\n  AccessRemovalDetails,\n  AccessRemovalDialogComponent,\n} from \"../../shared/access-policies/dialogs/access-removal-dialog.component\";\n\n@Component({\n  selector: \"sm-service-account-people\",\n  templateUrl: \"./service-account-people.component.html\",\n})\nexport class ServiceAccountPeopleComponent {\n  private destroy$ = new Subject<void>();\n  private serviceAccountId: string;\n  private organizationId: string;\n  private rows: AccessSelectorRowView[];\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.serviceAccountAccessPolicyChanges$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(([_, params]) =>\n        this.accessPolicyService.getServiceAccountAccessPolicies(params.serviceAccountId)\n      ),\n      map((policies) => {\n        const rows: AccessSelectorRowView[] = [];\n        policies.userAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"user\",\n            name: policy.organizationUserName,\n            id: policy.organizationUserId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            userId: policy.userId,\n            icon: AccessSelectorComponent.userIcon,\n            static: true,\n          });\n        });\n\n        policies.groupAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"group\",\n            name: policy.groupName,\n            id: policy.groupId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            currentUserInGroup: policy.currentUserInGroup,\n            icon: AccessSelectorComponent.groupIcon,\n            static: true,\n          });\n        });\n\n        return rows;\n      }),\n      share()\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const serviceAccountAccessPoliciesView = new ServiceAccountAccessPoliciesView();\n    serviceAccountAccessPoliciesView.userAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"user\")\n      .map((filtered) => {\n        const view = new UserServiceAccountAccessPolicyView();\n        view.grantedServiceAccountId = this.serviceAccountId;\n        view.organizationUserId = filtered.id;\n        view.read = true;\n        view.write = true;\n        return view;\n      });\n\n    serviceAccountAccessPoliciesView.groupAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"group\")\n      .map((filtered) => {\n        const view = new GroupServiceAccountAccessPolicyView();\n        view.grantedServiceAccountId = this.serviceAccountId;\n        view.groupId = filtered.id;\n        view.read = true;\n        view.write = true;\n        return view;\n      });\n\n    return this.accessPolicyService.createServiceAccountAccessPolicies(\n      this.serviceAccountId,\n      serviceAccountAccessPoliciesView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    if (\n      await this.accessPolicyService.needToShowAccessRemovalWarning(\n        this.organizationId,\n        policy,\n        this.rows\n      )\n    ) {\n      this.launchDeleteWarningDialog(policy);\n      return;\n    }\n\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n      const simpleDialogOpts: SimpleDialogOptions = {\n        title: this.i18nService.t(\"saPeopleWarningTitle\"),\n        content: this.i18nService.t(\"saPeopleWarningMessage\"),\n        type: SimpleDialogType.WARNING,\n        acceptButtonText: this.i18nService.t(\"close\"),\n        cancelButtonText: null,\n      };\n      this.dialogService.openSimpleDialog(simpleDialogOpts);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogService,\n    private i18nService: I18nService,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.serviceAccountId = params.serviceAccountId;\n      this.organizationId = params.organizationId;\n    });\n\n    this.rows$.pipe(takeUntil(this.destroy$)).subscribe((rows) => {\n      this.rows = rows;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private launchDeleteWarningDialog(policy: AccessSelectorRowView) {\n    this.dialogService.open<unknown, AccessRemovalDetails>(AccessRemovalDialogComponent, {\n      data: {\n        title: \"smAccessRemovalWarningSaTitle\",\n        message: \"smAccessRemovalWarningSaMessage\",\n        operation: \"delete\",\n        type: \"service-account\",\n        returnRoute: [\"sm\", this.organizationId, \"service-accounts\"],\n        policy,\n      },\n    });\n  }\n}\n","<div class=\"tw-mt-4 tw-w-2/5\">\n  <p class=\"tw-mt-6\">\n    {{ \"serviceAccountPeopleDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"people\"\n    [label]=\"'people' | i18n\"\n    [hint]=\"'projectPeopleSelectHint' | i18n\"\n    [columnTitle]=\"'groupSlashUser' | i18n\"\n    [emptyMessage]=\"'projectEmptyPeopleAccessPolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, map, Observable, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport { ServiceAccountProjectAccessPolicyView } from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\n\n@Component({\n  selector: \"sm-service-account-projects\",\n  templateUrl: \"./service-account-projects.component.html\",\n})\nexport class ServiceAccountProjectsComponent {\n  private destroy$ = new Subject<void>();\n  private serviceAccountId: string;\n  private organizationId: string;\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.serviceAccountGrantedPolicyChanges$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(([_, params]) =>\n        this.accessPolicyService.getGrantedPolicies(params.serviceAccountId, params.organizationId)\n      ),\n      map((policies) => {\n        return policies.map((policy) => {\n          return {\n            type: \"project\",\n            name: policy.grantedProjectName,\n            id: policy.grantedProjectId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            icon: AccessSelectorComponent.projectIcon,\n            static: true,\n          } as AccessSelectorRowView;\n        });\n      })\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const serviceAccountProjectAccessPolicyView = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"project\")\n      .map((filtered) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.serviceAccountId = this.serviceAccountId;\n        view.grantedProjectId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createGrantedPolicies(\n      this.organizationId,\n      this.serviceAccountId,\n      serviceAccountProjectAccessPolicyView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.serviceAccountId = params.serviceAccountId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<div class=\"tw-mt-4 tw-w-2/5\">\n  <p class=\"tw-mt-6\">\n    {{ \"serviceAccountProjectsDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"projects\"\n    [label]=\"'projects' | i18n\"\n    [hint]=\"'newSaSelectAccess' | i18n\"\n    [columnTitle]=\"'projects' | i18n\"\n    [emptyMessage]=\"'serviceAccountEmptyProjectAccesspolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<sm-header\n  *ngIf=\"serviceAccount$ | async as serviceAccount\"\n  [title]=\"serviceAccount.name\"\n  icon=\"bwi-wrench\"\n>\n  <bit-breadcrumbs slot=\"breadcrumbs\">\n    <bit-breadcrumb [route]=\"['..']\" icon=\"bwi-angle-left\">{{\n      \"serviceAccounts\" | i18n\n    }}</bit-breadcrumb>\n  </bit-breadcrumbs>\n  <sm-new-menu></sm-new-menu>\n  <bit-tab-nav-bar label=\"Main\" slot=\"tabs\">\n    <bit-tab-link [route]=\"['projects']\">{{ \"projects\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['people']\">{{ \"people\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['access']\">{{ \"accessTokens\" | i18n }}</bit-tab-link>\n  </bit-tab-nav-bar>\n  <button\n    type=\"button\"\n    slot=\"secondary\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"openNewAccessTokenDialog()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newAccessToken\" | i18n }}\n  </button>\n</sm-header>\n<router-outlet></router-outlet>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { AccessTokenCreateDialogComponent } from \"./access/dialogs/access-token-create-dialog.component\";\nimport { ServiceAccountService } from \"./service-account.service\";\n\n@Component({\n  selector: \"sm-service-account\",\n  templateUrl: \"./service-account.component.html\",\n})\nexport class ServiceAccountComponent {\n  private organizationId: string;\n  private serviceAccountId: string;\n\n  /**\n   * TODO: remove when a server method is available that fetches a service account by ID\n   */\n  protected serviceAccount$ = this.route.params.pipe(\n    switchMap((params) => {\n      this.serviceAccountId = params.serviceAccountId;\n      this.organizationId = params.organizationId;\n\n      return this.serviceAccountService\n        .getServiceAccounts(params.organizationId)\n        .then((saList) => saList.find((sa) => sa.id === params.serviceAccountId));\n    })\n  );\n\n  constructor(\n    private route: ActivatedRoute,\n    private serviceAccountService: ServiceAccountService,\n    private dialogService: DialogService\n  ) {}\n\n  protected openNewAccessTokenDialog() {\n    AccessTokenCreateDialogComponent.openNewAccessTokenDialog(\n      this.dialogService,\n      this.serviceAccountId,\n      this.organizationId\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>\n      <span>{{ title }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        <ng-container *ngIf=\"data.serviceAccounts.length == 1\">\n          {{ data.serviceAccounts[0].name }}\n        </ng-container>\n        <ng-container *ngIf=\"data.serviceAccounts.length > 1\">\n          {{ data.serviceAccounts.length }}\n          {{ \"serviceAccounts\" | i18n }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-callout type=\"warning\" [title]=\"'warning' | i18n\">\n        {{ dialogContent }}\n      </bit-callout>\n      <bit-form-field>\n        <bit-label>{{ dialogConfirmationLabel }}</bit-label>\n        <input bitInput formControlName=\"confirmDelete\" />\n      </bit-form-field>\n    </div>\n\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"danger\" bitFormButton>\n        {{ title }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  AbstractControl,\n} from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nexport interface ServiceAccountDeleteOperation {\n  serviceAccounts: ServiceAccountView[];\n}\n\n@Component({\n  selector: \"sm-service-account-delete-dialog\",\n  templateUrl: \"./service-account-delete-dialog.component.html\",\n})\nexport class ServiceAccountDeleteDialogComponent {\n  formGroup = new FormGroup({\n    confirmDelete: new FormControl(\"\", [this.matchConfirmationMessageValidator()]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: ServiceAccountDeleteOperation,\n    private serviceAccountService: ServiceAccountService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private dialogService: DialogService\n  ) {}\n\n  get title() {\n    return this.data.serviceAccounts.length === 1\n      ? this.i18nService.t(\"deleteServiceAccount\")\n      : this.i18nService.t(\"deleteServiceAccounts\");\n  }\n\n  get dialogContent() {\n    return this.data.serviceAccounts.length === 1\n      ? this.i18nService.t(\"deleteServiceAccountDialogMessage\", this.data.serviceAccounts[0].name)\n      : this.i18nService.t(\"deleteServiceAccountsDialogMessage\");\n  }\n\n  get dialogConfirmationLabel() {\n    return this.i18nService.t(\"deleteProjectInputLabel\", this.dialogConfirmationMessage);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    await this.delete();\n    this.dialogRef.close();\n  };\n\n  async delete() {\n    const bulkResponses = await this.serviceAccountService.delete(this.data.serviceAccounts);\n\n    const errors = bulkResponses.filter((response) => response.errorMessage);\n    if (errors.length > 0) {\n      this.openBulkStatusDialog(errors);\n      return;\n    }\n\n    const message =\n      this.data.serviceAccounts.length === 1\n        ? \"deleteServiceAccountToast\"\n        : \"deleteServiceAccountsToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  }\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteServiceAccounts\",\n        subTitle: \"serviceAccounts\",\n        columnTitle: \"serviceAccountName\",\n        message: \"bulkDeleteProjectsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n\n  private get dialogConfirmationMessage() {\n    return this.data.serviceAccounts?.length === 1\n      ? this.i18nService.t(\"deleteProjectConfirmMessage\", this.data.serviceAccounts[0].name)\n      : this.i18nService.t(\n          \"deleteServiceAccountsConfirmMessage\",\n          this.data.serviceAccounts?.length.toString()\n        );\n  }\n\n  private matchConfirmationMessageValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (this.dialogConfirmationMessage.toLowerCase() == control.value.toLowerCase()) {\n        return null;\n      } else {\n        return {\n          confirmationDoesntMatchError: {\n            message: this.i18nService.t(\"smConfirmationRequired\"),\n          },\n        };\n      }\n    };\n  }\n}\n","<div *ngIf=\"!serviceAccounts\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<bit-no-items *ngIf=\"serviceAccounts?.length == 0\">\n  <ng-container slot=\"title\">{{ \"serviceAccountsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"serviceAccountsNoItemsMessage\" | i18n }}</ng-container>\n  <button\n    slot=\"button\"\n    type=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newServiceAccountEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newServiceAccount\" | i18n }}\n  </button>\n</bit-no-items>\n\n<bit-table *ngIf=\"serviceAccounts?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell colspan=\"2\" bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"secrets\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let serviceAccount of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(serviceAccount.id) : null\"\n          [checked]=\"selection.isSelected(serviceAccount.id)\"\n        />\n      </td>\n      <td bitCell class=\"tw-w-0 tw-pr-0\">\n        <i class=\"bwi bwi-wrench tw-text-muted\" aria-hidden=\"true\"></i>\n      </td>\n      <td bitCell class=\"tw-break-all\">\n        <a bitLink [routerLink]=\"serviceAccount.id\">\n          {{ serviceAccount.name }}\n        </a>\n      </td>\n      <td bitCell>\n        <!-- TODO add number of secrets once mapping is implemented-->\n        <span> 0 </span>\n      </td>\n      <td bitCell>{{ serviceAccount.revisionDate | date : \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"serviceAccountMenu\"\n        ></button>\n      </td>\n      <bit-menu #serviceAccountMenu>\n        <a type=\"button\" bitMenuItem [routerLink]=\"serviceAccount.id\">\n          <i class=\"bwi bwi-fw bwi-eye\" aria-hidden=\"true\"></i>\n          {{ \"viewServiceAccount\" | i18n }}\n        </a>\n        <button type=\"button\" bitMenuItem (click)=\"editServiceAccountEvent.emit(serviceAccount.id)\">\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editServiceAccount\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"delete(serviceAccount)\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">\n            {{ \"deleteServiceAccount\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteServiceAccounts()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">\n      {{ \"deleteServiceAccounts\" | i18n }}\n    </span>\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\n\n@Component({\n  selector: \"sm-service-accounts-list\",\n  templateUrl: \"./service-accounts-list.component.html\",\n})\nexport class ServiceAccountsListComponent implements OnDestroy {\n  protected dataSource = new TableDataSource<ServiceAccountView>();\n\n  @Input()\n  get serviceAccounts(): ServiceAccountView[] {\n    return this._serviceAccounts;\n  }\n  set serviceAccounts(serviceAccounts: ServiceAccountView[]) {\n    this.selection.clear();\n    this._serviceAccounts = serviceAccounts;\n    this.dataSource.data = serviceAccounts;\n  }\n  private _serviceAccounts: ServiceAccountView[];\n\n  @Input()\n  set search(search: string) {\n    this.dataSource.filter = search;\n  }\n\n  @Output() newServiceAccountEvent = new EventEmitter();\n  @Output() deleteServiceAccountsEvent = new EventEmitter<ServiceAccountView[]>();\n  @Output() onServiceAccountCheckedEvent = new EventEmitter<string[]>();\n  @Output() editServiceAccountEvent = new EventEmitter<string>();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onServiceAccountCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.serviceAccounts.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.serviceAccounts.map((s) => s.id));\n  }\n\n  delete(serviceAccount: ServiceAccountView) {\n    this.deleteServiceAccountsEvent.emit([serviceAccount]);\n  }\n\n  bulkDeleteServiceAccounts() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteServiceAccountsEvent.emit(\n        this.serviceAccounts.filter((sa) => this.selection.isSelected(sa.id))\n      );\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n    }\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\nimport { AccessPolicyService } from \"../shared/access-policies/access-policy.service\";\n\nimport {\n  ServiceAccountDeleteDialogComponent,\n  ServiceAccountDeleteOperation,\n} from \"./dialog/service-account-delete-dialog.component\";\nimport {\n  OperationType,\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountService } from \"./service-account.service\";\n\n@Component({\n  selector: \"sm-service-accounts\",\n  templateUrl: \"./service-accounts.component.html\",\n})\nexport class ServiceAccountsComponent implements OnInit {\n  protected serviceAccounts$: Observable<ServiceAccountView[]>;\n  protected search: string;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogService,\n    private accessPolicyService: AccessPolicyService,\n    private serviceAccountService: ServiceAccountService\n  ) {}\n\n  ngOnInit() {\n    this.serviceAccounts$ = combineLatest([\n      this.route.params,\n      this.serviceAccountService.serviceAccount$.pipe(startWith(null)),\n      this.accessPolicyService.serviceAccountAccessPolicyChanges$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(async ([params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getServiceAccounts();\n      })\n    );\n  }\n\n  openNewServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openEditServiceAccountDialog(serviceAccountId: string) {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        serviceAccountId: serviceAccountId,\n        operation: OperationType.Edit,\n      },\n    });\n  }\n\n  openDeleteDialog(event: ServiceAccountView[]) {\n    this.dialogService.open<unknown, ServiceAccountDeleteOperation>(\n      ServiceAccountDeleteDialogComponent,\n      {\n        data: {\n          serviceAccounts: event,\n        },\n      }\n    );\n  }\n\n  private async getServiceAccounts(): Promise<ServiceAccountView[]> {\n    return await this.serviceAccountService.getServiceAccounts(this.organizationId);\n  }\n}\n","<sm-header>\n  <input\n    bitInput\n    [placeholder]=\"'searchServiceAccounts' | i18n\"\n    [(ngModel)]=\"search\"\n    class=\"tw-w-80\"\n  />\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-service-accounts-list\n  [serviceAccounts]=\"serviceAccounts$ | async\"\n  (newServiceAccountEvent)=\"openNewServiceAccountDialog()\"\n  (editServiceAccountEvent)=\"openEditServiceAccountDialog($event)\"\n  (deleteServiceAccountsEvent)=\"openDeleteDialog($event)\"\n  [search]=\"search\"\n></sm-service-accounts-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { ServiceAccountPeopleComponent } from \"./people/service-account-people.component\";\nimport { ServiceAccountProjectsComponent } from \"./projects/service-account-projects.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ServiceAccountsComponent,\n  },\n  {\n    path: \":serviceAccountId\",\n    component: ServiceAccountComponent,\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"projects\",\n      },\n      {\n        path: \"access\",\n        component: AccessTokenComponent,\n      },\n      {\n        path: \"people\",\n        component: ServiceAccountPeopleComponent,\n      },\n      {\n        path: \"projects\",\n        component: ServiceAccountProjectsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ServiceAccountsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { AccessListComponent } from \"./access/access-list.component\";\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { AccessTokenCreateDialogComponent } from \"./access/dialogs/access-token-create-dialog.component\";\nimport { AccessTokenDialogComponent } from \"./access/dialogs/access-token-dialog.component\";\nimport { ExpirationOptionsComponent } from \"./access/dialogs/expiration-options.component\";\nimport { ServiceAccountDeleteDialogComponent } from \"./dialog/service-account-delete-dialog.component\";\nimport { ServiceAccountDialogComponent } from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountPeopleComponent } from \"./people/service-account-people.component\";\nimport { ServiceAccountProjectsComponent } from \"./projects/service-account-projects.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsListComponent } from \"./service-accounts-list.component\";\nimport { ServiceAccountsRoutingModule } from \"./service-accounts-routing.module\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ServiceAccountsRoutingModule, BreadcrumbsModule],\n  declarations: [\n    AccessListComponent,\n    AccessTokenComponent,\n    AccessTokenCreateDialogComponent,\n    AccessTokenDialogComponent,\n    ExpirationOptionsComponent,\n    ServiceAccountComponent,\n    ServiceAccountDeleteDialogComponent,\n    ServiceAccountDialogComponent,\n    ServiceAccountPeopleComponent,\n    ServiceAccountProjectsComponent,\n    ServiceAccountsComponent,\n    ServiceAccountsListComponent,\n    ServiceAccountPeopleComponent,\n  ],\n  providers: [],\n})\nexport class ServiceAccountsModule {}\n","import { SecretsManagerImportErrorLine } from \"./sm-import-error-line\";\n\nexport class SecretsManagerImportError extends Error {\n  constructor(message?: string) {\n    super(message);\n  }\n\n  lines: SecretsManagerImportErrorLine[];\n}\n","import { SecretsManagerImportedProjectRequest } from \"./sm-imported-project.request\";\nimport { SecretsManagerImportedSecretRequest } from \"./sm-imported-secret.request\";\n\nexport class SecretsManagerImportRequest {\n  projects: SecretsManagerImportedProjectRequest[];\n  secrets: SecretsManagerImportedSecretRequest[];\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class SecretsManagerImportedProjectRequest {\n  id: string;\n  name: EncString;\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class SecretsManagerImportedSecretRequest {\n  id: string;\n  key: EncString;\n  value: EncString;\n  note: EncString;\n  projectIds: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretsManagerExportedProjectResponse extends BaseResponse {\n  id: string;\n  name: string;\n\n  constructor(response: any) {\n    super(response);\n\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretsManagerExportedSecretResponse extends BaseResponse {\n  id: string;\n  key: string;\n  value: string;\n  note: string;\n  projectIds: string[];\n\n  constructor(response: any) {\n    super(response);\n\n    this.id = this.getResponseProperty(\"Id\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.note = this.getResponseProperty(\"Note\");\n\n    const projectIds = this.getResponseProperty(\"ProjectIds\");\n    this.projectIds = projectIds?.map((id: any) => id.toString());\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretsManagerExportedProjectResponse } from \"./sm-exported-project.response\";\nimport { SecretsManagerExportedSecretResponse } from \"./sm-exported-secret.response\";\n\nexport class SecretsManagerExportResponse extends BaseResponse {\n  projects: SecretsManagerExportedProjectResponse[];\n  secrets: SecretsManagerExportedSecretResponse[];\n\n  constructor(response: any) {\n    super(response);\n\n    const projects = this.getResponseProperty(\"Projects\");\n    const secrets = this.getResponseProperty(\"Secrets\");\n\n    this.projects = projects?.map((k: any) => new SecretsManagerExportedProjectResponse(k));\n    this.secrets = secrets?.map((k: any) => new SecretsManagerExportedSecretResponse(k));\n  }\n}\n","export class SecretsManagerExport {\n  projects: SecretsManagerExportProject[];\n  secrets: SecretsManagerExportSecret[];\n}\n\nexport class SecretsManagerExportProject {\n  id: string;\n  name: string;\n}\n\nexport class SecretsManagerExportSecret {\n  id: string;\n  key: string;\n  value: string;\n  note: string;\n  projectIds: string[];\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\n\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerImportRequest } from \"../models/requests/sm-import.request\";\nimport { SecretsManagerImportedProjectRequest } from \"../models/requests/sm-imported-project.request\";\nimport { SecretsManagerImportedSecretRequest } from \"../models/requests/sm-imported-secret.request\";\nimport { SecretsManagerExportResponse } from \"../models/responses/sm-export.response\";\nimport {\n  SecretsManagerExport,\n  SecretsManagerExportProject,\n  SecretsManagerExportSecret,\n} from \"../models/sm-export\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretsManagerPortingApiService {\n  constructor(\n    private apiService: ApiService,\n    private encryptService: EncryptService,\n    private cryptoService: CryptoService,\n    private i18nService: I18nService\n  ) {}\n\n  async export(organizationId: string, exportFormat = \"json\"): Promise<string> {\n    const response = await this.apiService.send(\n      \"GET\",\n      \"/sm/\" + organizationId + \"/export?format=\" + exportFormat,\n      null,\n      true,\n      true\n    );\n\n    return JSON.stringify(\n      await this.decryptExport(organizationId, new SecretsManagerExportResponse(response)),\n      null,\n      \"  \"\n    );\n  }\n\n  async import(organizationId: string, fileContents: string): Promise<SecretsManagerImportError> {\n    let requestObject = {};\n\n    try {\n      requestObject = JSON.parse(fileContents);\n      const requestBody = await this.encryptImport(organizationId, requestObject);\n\n      await this.apiService.send(\n        \"POST\",\n        \"/sm/\" + organizationId + \"/import\",\n        requestBody,\n        true,\n        true\n      );\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      return this.handleServerError(errorResponse, requestObject);\n    }\n  }\n\n  private async encryptImport(\n    organizationId: string,\n    importData: any\n  ): Promise<SecretsManagerImportRequest> {\n    const encryptedImport = new SecretsManagerImportRequest();\n\n    try {\n      const orgKey = await this.cryptoService.getOrgKey(organizationId);\n      encryptedImport.projects = [];\n      encryptedImport.secrets = [];\n\n      encryptedImport.projects = await Promise.all(\n        importData.projects.map(async (p: any) => {\n          const project = new SecretsManagerImportedProjectRequest();\n          project.id = p.id;\n          project.name = await this.encryptService.encrypt(p.name, orgKey);\n          return project;\n        })\n      );\n\n      encryptedImport.secrets = await Promise.all(\n        importData.secrets.map(async (s: any) => {\n          const secret = new SecretsManagerImportedSecretRequest();\n\n          [secret.key, secret.value, secret.note] = await Promise.all([\n            this.encryptService.encrypt(s.key, orgKey),\n            this.encryptService.encrypt(s.value, orgKey),\n            this.encryptService.encrypt(s.note, orgKey),\n          ]);\n\n          secret.id = s.id;\n          secret.projectIds = s.projectIds;\n\n          return secret;\n        })\n      );\n    } catch (error) {\n      return null;\n    }\n\n    return encryptedImport;\n  }\n\n  private async decryptExport(\n    organizationId: string,\n    exportData: SecretsManagerExportResponse\n  ): Promise<SecretsManagerExport> {\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const decryptedExport = new SecretsManagerExport();\n    decryptedExport.projects = [];\n    decryptedExport.secrets = [];\n\n    decryptedExport.projects = await Promise.all(\n      exportData.projects.map(async (p) => {\n        const project = new SecretsManagerExportProject();\n        project.id = p.id;\n        project.name = await this.encryptService.decryptToUtf8(new EncString(p.name), orgKey);\n        return project;\n      })\n    );\n\n    decryptedExport.secrets = await Promise.all(\n      exportData.secrets.map(async (s) => {\n        const secret = new SecretsManagerExportSecret();\n\n        [secret.key, secret.value, secret.note] = await Promise.all([\n          this.encryptService.decryptToUtf8(new EncString(s.key), orgKey),\n          this.encryptService.decryptToUtf8(new EncString(s.value), orgKey),\n          this.encryptService.decryptToUtf8(new EncString(s.note), orgKey),\n        ]);\n\n        secret.id = s.id;\n        secret.projectIds = s.projectIds;\n\n        return secret;\n      })\n    );\n\n    return decryptedExport;\n  }\n\n  private handleServerError(\n    errorResponse: ErrorResponse,\n    importResult: any\n  ): SecretsManagerImportError {\n    if (errorResponse.validationErrors == null) {\n      return new SecretsManagerImportError(errorResponse.message);\n    }\n\n    const result = new SecretsManagerImportError();\n    result.lines = [];\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const id = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Projects\":\n          item = importResult.projects[id];\n          itemType = \"Project\";\n          break;\n        case \"Secrets\":\n          item = importResult.secrets[id];\n          itemType = \"Secret\";\n          break;\n        default:\n          return;\n      }\n\n      result.lines.push({\n        id: id + 1,\n        type: itemType == \"Project\" ? \"Project\" : \"Secret\",\n        key: item.key,\n        errorMessage: value.length > 0 ? value[0] : \"\",\n      });\n    });\n\n    return result;\n  }\n}\n","import { formatDate } from \"@angular/common\";\nimport { Injectable } from \"@angular/core\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretsManagerPortingService {\n  constructor(private i18nService: I18nService) {}\n\n  async getFileName(prefix: string = null, extension = \"json\"): Promise<string> {\n    const locale = await firstValueFrom(this.i18nService.locale$);\n    const dateString = formatDate(new Date(), \"yyyyMMddHHmmss\", locale);\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n}\n","<sm-header></sm-header>\n\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <div class=\"tw-my-4 tw-max-w-xl\">\n    <app-callout type=\"info\" title=\"{{ 'exportingOrganizationSecretDataTitle' | i18n }}\">\n      {{ \"exportingOrganizationSecretDataDescription\" | i18n : orgName }}\n    </app-callout>\n  </div>\n\n  <bit-form-field class=\"tw-max-w-sm\">\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <select bitInput formControlName=\"format\">\n      <option *ngFor=\"let format of exportFormats; let i = index\" [value]=\"i\">\n        {{ format.name }}\n      </option>\n    </select>\n  </bit-form-field>\n\n  <button bitButton bitFormButton type=\"submit\" buttonType=\"primary\">\n    {{ \"exportData\" | i18n }}\n  </button>\n</form>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { UserVerificationPromptComponent } from \"@bitwarden/web-vault/app/components/user-verification-prompt.component\";\n\nimport { SecretsManagerPortingApiService } from \"../services/sm-porting-api.service\";\nimport { SecretsManagerPortingService } from \"../services/sm-porting.service\";\n\ntype ExportFormat = {\n  name: string;\n  fileExtension: string;\n};\n\n@Component({\n  selector: \"sm-export\",\n  templateUrl: \"./sm-export.component.html\",\n})\nexport class SecretsManagerExportComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  protected orgName: string;\n  protected orgId: string;\n  protected exportFormats: ExportFormat[] = [{ name: \"Bitwarden (json)\", fileExtension: \"json\" }];\n\n  protected formGroup = new FormGroup({\n    format: new FormControl(0, [Validators.required]),\n  });\n\n  constructor(\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n    private platformUtilsService: PlatformUtilsService,\n    private smPortingService: SecretsManagerPortingService,\n    private fileDownloadService: FileDownloadService,\n    private logService: LogService,\n    private modalService: ModalService,\n    private secretsManagerApiService: SecretsManagerPortingApiService\n  ) {}\n\n  async ngOnInit() {\n    this.route.params\n      .pipe(\n        switchMap(async (params) => await this.organizationService.get(params.organizationId)),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((organization) => {\n        this.orgName = organization.name;\n        this.orgId = organization.id;\n      });\n\n    this.formGroup.get(\"format\").disable();\n  }\n\n  async ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    await this.doExport();\n  };\n\n  private async doExport() {\n    const fileExtension = this.exportFormats[this.formGroup.get(\"format\").value].fileExtension;\n    const exportData = await this.secretsManagerApiService.export(this.orgId, fileExtension);\n\n    await this.downloadFile(exportData, fileExtension);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"dataExportSuccess\"));\n  }\n\n  private async downloadFile(data: string, format: string) {\n    const fileName = await this.smPortingService.getFileName(null, format);\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: data,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n\n  private verifyUser() {\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: \"exportWarningDesc\",\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n}\n","<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importError\" | i18n }}\n  </span>\n  <span bitDialogContent>\n    <div>{{ \"resolveTheErrorsBelowAndTryAgain\" | i18n }}</div>\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"name\" | i18n }}</th>\n          <th bitCell>{{ \"description\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let line of errorLines\">\n          <td bitCell class=\"tw-break-all\">[{{ line.id }}] [{{ line.type }}] {{ line.key }}</td>\n          <td bitCell>{{ line.errorMessage }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </span>\n  <div bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerImportErrorLine } from \"../models/error/sm-import-error-line\";\n\nexport interface SecretsManagerImportErrorDialogOperation {\n  error: SecretsManagerImportError;\n}\n\n@Component({\n  selector: \"sm-import-error-dialog\",\n  templateUrl: \"./sm-import-error-dialog.component.html\",\n})\nexport class SecretsManagerImportErrorDialogComponent {\n  errorLines: SecretsManagerImportErrorLine[];\n\n  constructor(\n    public dialogRef: DialogRef,\n    private i18nService: I18nService,\n    @Inject(DIALOG_DATA) public data: SecretsManagerImportErrorDialogOperation\n  ) {\n    this.errorLines = data.error.lines;\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport {\n  SecretsManagerImportErrorDialogComponent,\n  SecretsManagerImportErrorDialogOperation,\n} from \"../dialog/sm-import-error-dialog.component\";\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerPortingApiService } from \"../services/sm-porting-api.service\";\n\n@Component({\n  selector: \"sm-import\",\n  templateUrl: \"./sm-import.component.html\",\n})\nexport class SecretsManagerImportComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  protected orgId: string = null;\n  protected selectedFile: File;\n  protected formGroup = new FormGroup({\n    pastedContents: new FormControl(\"\"),\n  });\n\n  constructor(\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n    private platformUtilsService: PlatformUtilsService,\n    protected fileDownloadService: FileDownloadService,\n    private logService: LogService,\n    private secretsManagerPortingApiService: SecretsManagerPortingApiService,\n    private dialogService: DialogService\n  ) {}\n\n  async ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.orgId = params.organizationId;\n    });\n  }\n\n  async ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    const fileElement = document.getElementById(\"file\") as HTMLInputElement;\n    const importContents = await this.getImportContents(\n      fileElement,\n      this.formGroup.get(\"pastedContents\").value.trim()\n    );\n\n    if (importContents == null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    try {\n      const error = await this.secretsManagerPortingApiService.import(this.orgId, importContents);\n\n      if (error?.lines?.length > 0) {\n        this.openImportErrorDialog(error);\n        return;\n      } else if (error != null) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          this.i18nService.t(\"errorOccurred\"),\n          this.i18nService.t(\"errorReadingImportFile\")\n        );\n        return;\n      }\n\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"importSuccess\"));\n      this.clearForm();\n    } catch (error) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"errorReadingImportFile\")\n      );\n      this.logService.error(error);\n    }\n  };\n\n  protected async getImportContents(\n    fileElement: HTMLInputElement,\n    pastedContents: string\n  ): Promise<string> {\n    const files = fileElement.files;\n\n    if (\n      (files == null || files.length === 0) &&\n      (pastedContents == null || pastedContents === \"\")\n    ) {\n      return null;\n    }\n\n    let fileContents = pastedContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      return null;\n    }\n\n    return fileContents;\n  }\n\n  protected setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    const file = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n    this.selectedFile = file;\n  }\n\n  private clearForm() {\n    (document.getElementById(\"file\") as HTMLInputElement).value = \"\";\n    this.selectedFile = null;\n    this.formGroup.reset({\n      pastedContents: \"\",\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private openImportErrorDialog(error: SecretsManagerImportError) {\n    this.dialogService.open<unknown, SecretsManagerImportErrorDialogOperation>(\n      SecretsManagerImportErrorDialogComponent,\n      {\n        data: {\n          error: error,\n        },\n      }\n    );\n  }\n}\n","<sm-header></sm-header>\n\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" class=\"tw-max-w-xl\">\n  <bit-form-field>\n    <bit-label>{{ \"fileUpload\" | i18n }}</bit-label>\n    <div class=\"file-selector\">\n      <button bitButton type=\"button\" buttonType=\"secondary\" (click)=\"fileSelector.click()\">\n        {{ \"chooseFile\" | i18n }}\n      </button>\n      {{ selectedFile?.name ?? (\"noFileChosen\" | i18n) }}\n    </div>\n    <input\n      #fileSelector\n      hidden\n      bitInput\n      type=\"file\"\n      id=\"file\"\n      class=\"form-control-file\"\n      name=\"file\"\n      (change)=\"setSelectedFile($event)\"\n      accept=\"application/JSON\"\n    />\n    <bit-hint>{{ \"acceptedFormats\" | i18n }} Bitwarden (json)</bit-hint>\n  </bit-form-field>\n  <div class=\"my-4\">\n    {{ \"or\" | i18n }}\n  </div>\n  <bit-form-field>\n    <bit-label for=\"pastedContents\">{{ \"copyPasteImportContents\" | i18n }}</bit-label>\n    <textarea\n      bitInput\n      id=\"pastedContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      formControlName=\"pastedContents\"\n    ></textarea>\n    <bit-hint>{{ \"acceptedFormats\" | i18n }} Bitwarden (json)</bit-hint>\n  </bit-form-field>\n  <button bitButton bitFormButton type=\"submit\" buttonType=\"primary\">\n    {{ \"importData\" | i18n }}\n  </button>\n</form>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { OrganizationPermissionsGuard } from \"@bitwarden/web-vault/app/admin-console/organizations/guards/org-permissions.guard\";\n\nimport { SecretsManagerExportComponent } from \"./porting/sm-export.component\";\nimport { SecretsManagerImportComponent } from \"./porting/sm-import.component\";\n\nconst routes: Routes = [\n  {\n    path: \"import\",\n    component: SecretsManagerImportComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: {\n      titleId: \"importData\",\n      organizationPermissions: (org: Organization) => org.isAdmin,\n    },\n  },\n  {\n    path: \"export\",\n    component: SecretsManagerExportComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: {\n      titleId: \"exportData\",\n      organizationPermissions: (org: Organization) => org.isAdmin,\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretsManagerImportErrorDialogComponent } from \"./dialog/sm-import-error-dialog.component\";\nimport { SecretsManagerExportComponent } from \"./porting/sm-export.component\";\nimport { SecretsManagerImportComponent } from \"./porting/sm-import.component\";\nimport { SecretsManagerPortingApiService } from \"./services/sm-porting-api.service\";\nimport { SecretsManagerPortingService } from \"./services/sm-porting.service\";\nimport { SettingsRoutingModule } from \"./settings-routing.module\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, SettingsRoutingModule],\n  declarations: [\n    SecretsManagerImportComponent,\n    SecretsManagerExportComponent,\n    SecretsManagerImportErrorDialogComponent,\n  ],\n  providers: [SecretsManagerPortingService, SecretsManagerPortingApiService],\n})\nexport class SettingsModule {}\n","import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate } from \"@angular/router\";\n\n@Injectable()\nexport class SMGuard implements CanActivate {\n  async canActivate(route: ActivatedRouteSnapshot) {\n    // TODO: Verify org\n    return true;\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { SecretService } from \"../../secrets/secret.service\";\n\nexport interface SecretHardDeleteOperation {\n  secretIds: string[];\n  organizationId: string;\n}\n\n@Component({\n  selector: \"sm-secret-hard-delete-dialog\",\n  templateUrl: \"./secret-hard-delete.component.html\",\n})\nexport class SecretHardDeleteDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) public data: SecretHardDeleteOperation\n  ) {}\n\n  get title() {\n    return this.data.secretIds.length === 1 ? \"hardDeleteSecret\" : \"hardDeleteSecrets\";\n  }\n\n  get submitButtonText() {\n    return this.data.secretIds.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  delete = async () => {\n    await this.secretService.deleteTrashed(this.data.organizationId, this.data.secretIds);\n    const message =\n      this.data.secretIds.length === 1 ? \"hardDeleteSuccessToast\" : \"hardDeletesSuccessToast\";\n    this.dialogRef.close(this.data.secretIds);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  };\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    {{\n      data.secretIds.length === 1\n        ? (\"hardDeleteSecretConfirmation\" | i18n)\n        : (\"hardDeleteSecretsConfirmation\" | i18n)\n    }}\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"delete\">\n      {{ submitButtonText | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </div>\n</bit-simple-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { SecretService } from \"../../secrets/secret.service\";\n\nexport interface SecretRestoreOperation {\n  secretIds: string[];\n  organizationId: string;\n}\n\n@Component({\n  selector: \"sm-secret-restore-dialog\",\n  templateUrl: \"./secret-restore.component.html\",\n})\nexport class SecretRestoreDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) public data: SecretRestoreOperation\n  ) {}\n\n  get title() {\n    return this.data.secretIds.length === 1 ? \"restoreSecret\" : \"restoreSecrets\";\n  }\n\n  restore = async () => {\n    let message = \"\";\n    await this.secretService.restoreTrashed(this.data.organizationId, this.data.secretIds);\n    message =\n      this.data.secretIds.length === 1\n        ? \"secretRestoredSuccessToast\"\n        : \"secretsRestoredSuccessToast\";\n    this.dialogRef.close(this.data.secretIds);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  };\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    {{\n      data.secretIds.length === 1 ? (\"restoreSecretPrompt\" | i18n) : (\"restoreSecretsPrompt\" | i18n)\n    }}\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"restore\">\n      {{ title | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </div>\n</bit-simple-dialog>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretService } from \"../secrets/secret.service\";\n\nimport {\n  SecretHardDeleteDialogComponent,\n  SecretHardDeleteOperation,\n} from \"./dialog/secret-hard-delete.component\";\nimport {\n  SecretRestoreDialogComponent,\n  SecretRestoreOperation,\n} from \"./dialog/secret-restore.component\";\n\n@Component({\n  selector: \"sm-trash\",\n  templateUrl: \"./trash.component.html\",\n})\nexport class TrashComponent implements OnInit {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getSecrets();\n      })\n    );\n  }\n\n  private async getSecrets(): Promise<SecretListView[]> {\n    return await this.secretService.getTrashedSecrets(this.organizationId);\n  }\n\n  openDeleteSecret(secrets: SecretListView[]) {\n    const secretIds = secrets.map((secret) => secret.id);\n\n    this.dialogService.open<unknown, SecretHardDeleteOperation>(SecretHardDeleteDialogComponent, {\n      data: {\n        secretIds: secretIds,\n        organizationId: this.organizationId,\n      },\n    });\n  }\n\n  openRestoreSecret(secretIds: string[]) {\n    this.dialogService.open<unknown, SecretRestoreOperation>(SecretRestoreDialogComponent, {\n      data: {\n        secretIds: secretIds,\n        organizationId: this.organizationId,\n      },\n    });\n  }\n}\n","<sm-header>\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<bit-callout type=\"warning\" [title]=\"'warning' | i18n\">{{\n  \"trashCleanupWarning\" | i18n\n}}</bit-callout>\n<sm-secrets-list\n  (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n  (restoreSecretsEvent)=\"openRestoreSecret($event)\"\n  [secrets]=\"secrets$ | async\"\n  [trash]=\"true\"\n></sm-secrets-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { TrashComponent } from \"./trash.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: TrashComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TrashRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretHardDeleteDialogComponent } from \"./dialog/secret-hard-delete.component\";\nimport { SecretRestoreDialogComponent } from \"./dialog/secret-restore.component\";\nimport { TrashRoutingModule } from \"./trash-routing.module\";\nimport { TrashComponent } from \"./trash.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, TrashRoutingModule],\n  declarations: [SecretHardDeleteDialogComponent, SecretRestoreDialogComponent, TrashComponent],\n  providers: [],\n})\nexport class TrashModule {}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AuthGuard } from \"@bitwarden/angular/auth/guards/auth.guard\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { OrganizationPermissionsGuard } from \"@bitwarden/web-vault/app/admin-console/organizations/guards/org-permissions.guard\";\nimport { buildFlaggedRoute } from \"@bitwarden/web-vault/app/oss-routing.module\";\n\nimport { LayoutComponent } from \"./layout/layout.component\";\nimport { NavigationComponent } from \"./layout/navigation.component\";\nimport { OverviewModule } from \"./overview/overview.module\";\nimport { ProjectsModule } from \"./projects/projects.module\";\nimport { SecretsModule } from \"./secrets/secrets.module\";\nimport { ServiceAccountsModule } from \"./service-accounts/service-accounts.module\";\nimport { SettingsModule } from \"./settings/settings.module\";\nimport { SMGuard } from \"./sm.guard\";\nimport { TrashModule } from \"./trash/trash.module\";\n\nconst routes: Routes = [\n  buildFlaggedRoute(\"secretsManager\", {\n    path: \":organizationId\",\n    component: LayoutComponent,\n    canActivate: [AuthGuard, OrganizationPermissionsGuard, SMGuard],\n    data: {\n      organizationPermissions: (org: Organization) => org.canAccessSecretsManager,\n    },\n    children: [\n      {\n        path: \"\",\n        component: NavigationComponent,\n        outlet: \"sidebar\",\n      },\n      {\n        path: \"secrets\",\n        loadChildren: () => SecretsModule,\n        data: {\n          titleId: \"secrets\",\n        },\n      },\n      {\n        path: \"projects\",\n        loadChildren: () => ProjectsModule,\n        data: {\n          titleId: \"projects\",\n        },\n      },\n      {\n        path: \"service-accounts\",\n        loadChildren: () => ServiceAccountsModule,\n        data: {\n          titleId: \"serviceAccounts\",\n        },\n      },\n      {\n        path: \"trash\",\n        loadChildren: () => TrashModule,\n        data: {\n          titleId: \"trash\",\n        },\n      },\n      {\n        path: \"settings\",\n        loadChildren: () => SettingsModule,\n      },\n      {\n        path: \"\",\n        loadChildren: () => OverviewModule,\n        pathMatch: \"full\",\n      },\n    ],\n  }),\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsManagerRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { LayoutModule } from \"./layout/layout.module\";\nimport { SecretsManagerSharedModule } from \"./shared/sm-shared.module\";\nimport { SecretsManagerRoutingModule } from \"./sm-routing.module\";\nimport { SMGuard } from \"./sm.guard\";\n\n@NgModule({\n  imports: [SharedModule, SecretsManagerSharedModule, SecretsManagerRoutingModule, LayoutModule],\n  providers: [SMGuard],\n})\nexport class SecretsManagerModule {}\n"],"names":["constructor","modalRef","config","userVerificationService","formBuilder","platformUtilsService","i18nService","confirmDescription","this","data","confirmButtonText","modalTitle","secret","submit","verifyUser","value","e","showToast","t","close","UserVerificationPromptComponent","NavigationModule","LayoutModule","NoItemsModule","SecretsManagerSharedModule","LayoutComponent","ngOnInit","document","body","classList","remove","SecretsManagerLogo","NavBaseComponent","variant","treeDepth","hideActiveStyles","mainContentClicked","setActive","NavItemComponent","_active","rlaOptions","paths","queryParams","fragment","matrixParams","focusVisibleWithin$","BehaviorSubject","fvwStyles$","pipe","map","isActive","showActiveStyles","exactMatch","val","onFocusIn","target","next","matches","onFocusOut","toggle","NavGroupComponent","contentId","Math","random","toString","substring","open","openChange","event","stopPropagation","emit","initNestedStyles","nestedGroups","nestedItems","forEach","navGroupOrItem","ngAfterContentInit","NavDividerComponent","OrgSwitcherComponent","route","organizationService","organizations$","orgs","filter","sort","a","b","name","localeCompare","activeOrganization$","combineLatest","paramMap","params","find","org","id","get","hideNewButton","NavigationComponent","logo","orgFilter","canAccessSecretsManager","isAdmin$","organizationId","isAdmin","ProgressModule","OnboardingModule","BulkOperationStatus","BulkStatusDialogComponent","dialogRef","title","subTitle","columnTitle","message","details","length","Error","ProjectListView","ProjectView","ProjectRequest","ProjectListItemResponse","response","super","getResponseProperty","creationDate","revisionDate","ProjectResponse","ProjectPermissionDetailsResponse","read","write","ProjectService","cryptoService","apiService","encryptService","_project","Subject","project$","asObservable","getByProjectId","projectId","r","send","projectResponse","createProjectPermissionDetailsView","getProjects","results","L","createProjectsListView","create","projectView","request","getProjectRequest","project","createProjectView","update","delete","projects","projectIds","element","bulkOperationStatus","errorMessage","error","getOrganizationKey","getOrgKey","orgKey","encrypt","decryptToUtf8","Promise","all","s","projectListView","ProjectDeleteDialogComponent","projectService","dialogService","formGroup","confirmDelete","matchConfirmationMessageValidator","markAllAsTouched","invalid","dialogContent","dialogConfirmationLabel","dialogConfirmationMessage","bulkResponses","openBulkStatusDialog","bulkStatusResults","control","toLowerCase","confirmationDoesntMatchError","OperationType","ProjectDialogComponent","router","loading","getProjectView","operation","Add","newProject","createProject","navigate","updateProject","Edit","loadData","setValue","SecretListView","SecretProjectView","SecretView","SecretRequest","SecretProjectResponse","SecretListItemResponse","k","SecretWithProjectsListResponse","secrets","dr","SecretResponse","note","SecretService","_secret","secret$","getBySecretId","secretId","secretResponse","createSecretView","getSecrets","createSecretsListView","getSecretsByProject","secretView","getSecretRequest","secretIds","getTrashedSecrets","deleteTrashed","restoreTrashed","key","encryptedString","push","decryptProjectsMappedToSecrets","projectsMappedToSecretsView","secretListView","p","includes","projectsMappedToSecretView","SecretDeleteDialogComponent","secretService","showSoftDeleteSecretWarning","submitButtonText","openDeleteSecretDialog","SecretDialogComponent","notes","destroy$","getSecretView","createSecret","updateSecret","removeValidators","updateValueAndValidity","then","disable","enable","ngOnDestroy","complete","showSpinner","deleteButtonIsVisible","getSecretListView","lastValueFrom","closed","closeData","undefined","secretListViews","emptyProjects","ServiceAccountView","ServiceAccountRequest","ServiceAccountResponse","ServiceAccountService","_serviceAccount","serviceAccount$","getServiceAccounts","createServiceAccountViews","getByServiceAccountId","serviceAccountId","createServiceAccountView","serviceAccountView","getServiceAccountRequest","serviceAccounts","ids","serviceAccount","sa","organizationKey","serviceAccountResponse","serviceAccountResponses","ServiceAccountDialogComponent","serviceAccountService","getServiceAccountView","serviceAccountMessage","patchValue","SortableComponent","default","_default","table","ariaSort","direction","dataSource","column","bitSortable","fn","icon","NoItemsComponent","newSecretEvent","editSecretEvent","copySecretNameEvent","copySecretValueEvent","restoreSecretsEvent","deleteSecretsEvent","$event","selection","toggleAll","bulkRestoreSecrets","SecretsListComponent","_secrets","clear","search","onSecretCheckedEvent","sortProjects","aProjects","bProjects","changed","takeUntil","subscribe","_","selected","isAllSelected","select","bulkDeleteSecrets","isSelected","static","copyToClipboard","copyToClipboardAsync","text","isSafari","navigator","clipboard","ClipboardItem","lock","logout","HeaderComponent","stateService","messagingService","routeData$","titleId","account$","activeAccount$","accounts$","activeAccount","accounts","profile","NewMenuComponent","openSecretDialog","openProjectDialog","openServiceAccountDialog","newProjectEvent","editProjectEvent","deleteProject","ProjectsListComponent","_projects","deleteProjectEvent","onProjectCheckedEvent","bulkDeleteProjects","OnboardingTaskComponent","completed","handleClick","ev","SizeClasses","small","large","BackgroundClasses","danger","primary","success","warning","ProgressComponent","barWidth","bgColor","showText","size","displayText","outerBarStyles","concat","innerBarStyles","textContent","OnboardingComponent","dismiss","visible","amountCompleted","tasks","task","SectionComponent","openNewProjectDialog","hideOnboarding","openEditProject","openDeleteProjectDialog","openDeleteSecret","openNewSecretDialog","openEditSecret","copySecretName","copySecretValue","OverviewComponent","tableSize","showOnboarding","orgId$","distinctUntilChanged","orgId","organizationName","userIsAdmin","projects$","startWith","switchMap","share","secrets$","serviceAccounts$","view$","latestProjects","getRecentItems","latestSecrets","allProjects","allSecrets","saveCompletedTasks","importSecrets","createServiceAccount","take","view","Object","values","items","Date","getTime","slice","orgTasks","prevTasks","getSMOnboardingTasks","newlyCompletedOrgTasks","fromEntries","entries","_k","v","nextOrgTasks","setSMOnboardingTasks","routes","path","component","OverviewRoutingModule","OverviewModule","BaseAccessPolicyView","UserProjectAccessPolicyView","UserServiceAccountAccessPolicyView","GroupProjectAccessPolicyView","GroupServiceAccountAccessPolicyView","ServiceAccountProjectAccessPolicyView","ProjectAccessPoliciesView","ServiceAccountAccessPoliciesView","PotentialGranteeView","AccessPoliciesCreateRequest","BaseAccessPolicyResponse","UserProjectAccessPolicyResponse","organizationUserId","organizationUserName","grantedProjectId","userId","UserServiceAccountAccessPolicyResponse","grantedServiceAccountId","GroupProjectAccessPolicyResponse","groupId","groupName","currentUserInGroup","GroupServiceAccountAccessPolicyResponse","ServiceAccountProjectAccessPolicyResponse","serviceAccountName","grantedProjectName","ProjectAccessPoliciesResponse","userAccessPolicies","groupAccessPolicies","serviceAccountAccessPolicies","ServiceAccountAccessPoliciesResponse","AccessPolicyUpdateRequest","AccessPolicyRequest","GrantedPolicyRequest","PotentialGranteeResponse","type","email","AccessPolicyService","_projectAccessPolicyChanges$","_serviceAccountAccessPolicyChanges$","_serviceAccountGrantedPolicyChanges$","projectAccessPolicyChanges$","serviceAccountAccessPolicyChanges$","serviceAccountGrantedPolicyChanges$","refreshProjectAccessPolicyChanges","refreshServiceAccountAccessPolicyChanges","getGrantedPolicies","createServiceAccountProjectAccessPolicyViews","createGrantedPolicies","policies","getGrantedPoliciesCreateRequest","views","getProjectAccessPolicies","createProjectAccessPoliciesView","getServiceAccountAccessPolicies","createServiceAccountAccessPoliciesView","createProjectAccessPolicies","projectAccessPoliciesView","getAccessPoliciesCreateRequest","createServiceAccountAccessPolicies","serviceAccountAccessPoliciesView","getServiceAccountAccessPoliciesCreateRequest","deleteAccessPolicy","accessPolicyId","updateAccessPolicy","baseAccessPolicyView","payload","needToShowAccessRemovalWarning","policy","currentPolicies","organization","isOwner","currentUserId","readWriteGroupPolicies","x","readWriteUserPolicies","projectAccessPoliciesResponse","ap","createUserProjectAccessPolicyView","createGroupProjectAccessPolicyView","createServiceAccountProjectAccessPolicyView","createRequest","userAccessPolicyRequests","getAccessPolicyRequest","groupAccessPolicyRequests","serviceAccountAccessPolicyRequests","createBaseAccessPolicyView","serviceAccountAccessPoliciesResponse","createUserServiceAccountAccessPolicyView","createGroupServiceAccountAccessPolicyView","getPeoplePotentialGrantees","createPotentialGranteeViews","getServiceAccountsPotentialGrantees","getProjectsPotentialGrantees","granteeId","grantedId","responses","AccessSelectorComponent","rows","rows$","accessPolicyService","onCreateAccessPolicies","onDeleteAccessPolicy","onUpdateAccessPolicy","maxLength","multiSelect","selectItems$","getPotentialGrantees","grantees","g","some","row","granteeView","listName","labelName","userIcon","groupIcon","serviceAccountIcon","projectIcon","selectItems","tap","reset","firstValueFrom","granteeType","item","AccessRemovalDialogComponent","removeAccess","returnRoute","getBaseAccessPolicyView","cancel","ProjectPeopleComponent","handleCreateAccessPolicies","getAccessItemType","filtered","handleDeleteAccessPolicy","launchDeleteWarningDialog","validationService","showError","handleUpdateAccessPolicy","launchUpdateWarningDialog","ProjectSecretsComponent","currentProjectEdited","combineLatestWith","ProjectServiceAccountsComponent","openEditDialog","ProjectComponent","ProjectsComponent","children","pathMatch","redirectTo","ProjectsRoutingModule","ProjectsModule","SecretsComponent","snapshot","SecretsRoutingModule","SecretsModule","AccessTokenRequest","RevokeAccessTokensRequest","AccessTokenCreationResponse","clientSecret","expireAt","AccessTokenResponse","scopes","AccessTokenView","AccessService","cryptoFunctionService","_accessTokenVersion","_accessToken","accessToken$","getAccessTokens","createAccessTokenViews","createAccessToken","accessTokenView","keyMaterial","randomBytes","hkdf","encryptionKey","createAccessTokenRequest","result","b64Key","revokeAccessTokens","accessTokenIds","accessTokenRequest","encryptedPayload","JSON","stringify","keyB64","accessTokenResponses","AccessTokenDialogComponent","disableClose","accessToken","copyAccessToken","ExpirationOptionsComponent","touched","form","datePipe","currentDate","expires","expireDateTime","_onChange","_value","onTouched","valueChanges","getExpiresDate","registerOnChange","registerOnTouched","validate","required","writeValue","transform","setDisabledState","isDisabled","setDate","getDate","Number","provide","multi","useExisting","AccessTokenCreateDialogComponent","accessService","expirationDateControl","expirationDayOptions","openAccessTokenDialog","expirationDate","newAccessTokenEvent","revokeAccessTokensEvent","AccessListComponent","tokens","_tokens","revokeSelected","permission","token","AccessTokenComponent","modalService","accessTokens$","revoke","openNewAccessTokenDialog","ref","allowMultipleModals","onClosedPromise","ServiceAccountPeopleComponent","simpleDialogOpts","content","acceptButtonText","cancelButtonText","openSimpleDialog","ServiceAccountProjectsComponent","serviceAccountProjectAccessPolicyView","ServiceAccountComponent","saList","ServiceAccountDeleteDialogComponent","errors","newServiceAccountEvent","editServiceAccountEvent","ServiceAccountsListComponent","_serviceAccounts","deleteServiceAccountsEvent","onServiceAccountCheckedEvent","bulkDeleteServiceAccounts","ServiceAccountsComponent","openNewServiceAccountDialog","openEditServiceAccountDialog","openDeleteDialog","ServiceAccountsRoutingModule","ServiceAccountsModule","SecretsManagerImportError","SecretsManagerImportRequest","SecretsManagerImportedProjectRequest","SecretsManagerImportedSecretRequest","SecretsManagerExportedProjectResponse","SecretsManagerExportedSecretResponse","SecretsManagerExportResponse","SecretsManagerExport","SecretsManagerExportProject","SecretsManagerExportSecret","SecretsManagerPortingApiService","export","exportFormat","decryptExport","import","fileContents","requestObject","parse","requestBody","encryptImport","errorResponse","handleServerError","importData","encryptedImport","exportData","decryptedExport","importResult","validationErrors","lines","index","itemType","match","SecretsManagerPortingService","getFileName","prefix","extension","locale","locale$","dateString","SecretsManagerExportComponent","smPortingService","fileDownloadService","logService","secretsManagerApiService","exportFormats","fileExtension","format","doExport","orgName","downloadFile","fileName","download","blobData","blobOptions","SecretsManagerImportErrorDialogComponent","errorLines","SecretsManagerImportComponent","secretsManagerPortingApiService","pastedContents","fileElement","getElementById","importContents","getImportContents","trim","openImportErrorDialog","clearForm","files","getFileContents","setSelectedFile","fileInputEl","file","selectedFile","resolve","reject","reader","FileReader","readAsText","onload","evt","onerror","canActivate","organizationPermissions","SettingsRoutingModule","SettingsModule","SMGuard","SecretHardDeleteDialogComponent","SecretRestoreDialogComponent","restore","TrashComponent","openRestoreSecret","TrashRoutingModule","TrashModule","outlet","loadChildren","SecretsManagerRoutingModule","SecretsManagerModule"],"sourceRoot":""}