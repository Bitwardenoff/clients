/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum IpcMessageType {
  Connected = 0,
  Disconnected = 1,
  Message = 2
}
export class IpcMessage {
  clientId: number
  kind: IpcMessageType
  message: string
}
export namespace passwords {
  /** Fetch the stored password from the keychain. */
  export function getPassword(service: string, account: string): Promise<string>
  /** Fetch the stored password from the keychain that was stored with Keytar. */
  export function getPasswordKeytar(service: string, account: string): Promise<string>
  /** Save the password to the keychain. Adds an entry if none exists otherwise updates the existing entry. */
  export function setPassword(service: string, account: string, password: string): Promise<void>
  /** Delete the stored password from the keychain. */
  export function deletePassword(service: string, account: string): Promise<void>
}
export namespace biometrics {
  export function prompt(hwnd: Buffer, message: string): Promise<boolean>
  export function available(): Promise<boolean>
}
export namespace ipc {
  /** Start the IPC server. */
  export function listen(callback: (error: any, message: IpcMessage) => void): void
  /** Stop the active IPC server. */
  export function stop(): void
  /** Send a message over the IPC server. */
  export function send(message: string): Promise<void>
}
