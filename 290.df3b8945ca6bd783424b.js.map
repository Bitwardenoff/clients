{"version":3,"file":"290.df3b8945ca6bd783424b.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/common/src/enums/encryptedExportType.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/file-password-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/common/src/abstractions/import.service.ts","webpack://@bitwarden/web-vault/../../libs/common/src/enums/importOptions.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/domain/importResult.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/baseImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/ascendoCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/avastCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/avastJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/aviraCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/bitwardenCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/bitwardenJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/bitwardenPasswordProtectedImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/blackBerryCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/blurCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/buttercupCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/chromeCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/clipperzHtmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/codebookCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/dashlaneImporters/dashlaneCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/dashlaneImporters/dashlaneJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/encryptrCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/enpassCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/enpassJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/firefoxCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/fsecureFskImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/gnomeJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/importError.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/kasperskyTxtImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/keepass2XmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/keepassxCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/keeperImporters/keeperCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/lastpassCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/logMeOnceCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/meldiumCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/msecureCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/mykiCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/nordpassCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/types/onepassword1PuxImporterTypes.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepassword1PifImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepassword1PuxImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/cipherImportContext.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepasswordCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepasswordMacCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepasswordWinCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/padlockCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passkeepCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passmanJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passpackCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordAgentCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordBossJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordDragonXmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordSafeXmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordWalletTxtImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/rememBearCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/roboformCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/safariCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/safeInCloudXmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/saferpassCsvImport.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/secureSafeCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/splashIdCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/stickyPasswordXmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/truekeyCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/upmCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/yotiCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/zohoVaultCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/importCiphersRequest.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/importOrganizationCiphersRequest.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvpRequest.ts","webpack://@bitwarden/web-vault/../../libs/common/src/services/import.service.ts"],"sourcesContent":["export enum EncryptedExportType {\n  AccountEncrypted = 0,\n  FileEncrypted = 1,\n}\n","import { Directive, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, takeUntil, Subject, startWith } from \"rxjs\";\n\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums/encryptedExportType\";\nimport { EventType } from \"@bitwarden/common/enums/eventType\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  disabledByPolicy = false;\n  showFilePassword: boolean;\n  showConfirmFilePassword: boolean;\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: ExportService,\n    protected eventService: EventService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService\n  ) {}\n\n  async ngOnInit() {\n    await this.checkExportDisabled();\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  async checkExportDisabled() {\n    this.disabledByPolicy = await this.policyService.policyAppliesToUser(\n      PolicyType.DisablePersonalVaultExport\n    );\n    if (this.disabledByPolicy) {\n      this.exportForm.disable();\n    }\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.platformUtilsService.showDialog(\n        \"<p>\" +\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \"<p>\" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\",\n        true\n      );\n    } else {\n      return await this.platformUtilsService.showDialog(\n        this.i18nService.t(\"exportWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\"\n      );\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  toggleFilePassword() {\n    this.showFilePassword = !this.showFilePassword;\n    document.getElementById(\"filePassword\").focus();\n  }\n\n  toggleConfirmFilePassword() {\n    this.showConfirmFilePassword = !this.showConfirmFilePassword;\n    document.getElementById(\"confirmFilePassword\").focus();\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","import { Directive } from \"@angular/core\";\nimport { FormBuilder, FormControl } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\n\nimport { ModalConfig } from \"../services/modal.service\";\n\nimport { ModalRef } from \"./modal/modal.ref\";\n\n/**\n * Used to verify the user's identity (using their master password or email-based OTP for Key Connector users). You can customize all of the text in the modal.\n */\n@Directive()\nexport class UserVerificationPromptComponent {\n  confirmDescription = this.config.data.confirmDescription;\n  confirmButtonText = this.config.data.confirmButtonText;\n  modalTitle = this.config.data.modalTitle;\n  secret = new FormControl();\n\n  constructor(\n    private modalRef: ModalRef,\n    protected config: ModalConfig,\n    protected userVerificationService: UserVerificationService,\n    private formBuilder: FormBuilder,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  async submit() {\n    try {\n      //Incorrect secret will throw an invalid password error.\n      await this.userVerificationService.verifyUser(this.secret.value);\n    } catch (e) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"error\"),\n        this.i18nService.t(\"invalidMasterPassword\")\n      );\n      return;\n    }\n\n    this.modalRef.close(true);\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { UserVerificationPromptComponent as BaseUserVerificationPrompt } from \"@bitwarden/angular/components/user-verification-prompt.component\";\n\n@Component({\n  templateUrl: \"user-verification-prompt.component.html\",\n})\nexport class UserVerificationPromptComponent extends BaseUserVerificationPrompt {}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"confirmUserTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\">\n      <h2 class=\"tw-mt-6 tw-mb-6 tw-pl-3.5 tw-pr-3.5 tw-font-semibold\" id=\"modalTitle | i18n \">\n        {{ modalTitle | i18n | uppercase }}\n      </h2>\n      <div class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-p-3.5\">\n        {{ confirmDescription | i18n }}\n      </div>\n      <div class=\"tw-p-3.5\">\n        <app-user-verification ngDefaultControl [formControl]=\"secret\" name=\"secret\">\n        </app-user-verification>\n      </div>\n      <div\n        class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-p-3.5\"\n      >\n        <button bitButton buttonType=\"primary\" type=\"submit\" appBlurClick>\n          <span>{{ confirmButtonText | i18n }}</span>\n        </button>\n        <button bitButton buttonType=\"secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"fileTypeHeading\">\n          <label id=\"fileTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"fileTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-ml-1 tw-mt-1 tw-mb-1\" for=\"AccountEncrypted\">\n                {{ \"accountBackup\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountBackupOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-ml-1 tw-mt-1 tw-mb-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <div class=\"input-group\">\n            <bit-form-field class=\"tw-w-full\">\n              <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n              <input\n                bitInput\n                type=\"{{ showFilePassword ? 'text' : 'password' }}\"\n                id=\"filePassword\"\n                formControlName=\"filePassword\"\n                name=\"password\"\n              />\n\n              <div class=\"input-group-append\">\n                <button\n                  bitSuffix\n                  bitButton\n                  buttonType=\"secondary\"\n                  appStopClick\n                  appA11yTitle=\"{{ 'toggleVisibility' | i18n }}\"\n                  [attr.aria-pressed]=\"showFilePassword\"\n                  (click)=\"toggleFilePassword()\"\n                  type=\"button\"\n                >\n                  <i\n                    class=\"bwi bwi-lg\"\n                    aria-hidden=\"true\"\n                    [ngClass]=\"{ 'bwi-eye': !showFilePassword, 'bwi-eye-slash': showFilePassword }\"\n                  ></i>\n                </button>\n              </div>\n            </bit-form-field>\n            <div class=\"small text-muted\">\n              {{ \"exportPasswordDescription\" | i18n }}\n            </div>\n          </div>\n          <div class=\"input-group tw-mt-4\">\n            <bit-form-field class=\"tw-w-full\">\n              <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n              <input\n                bitInput\n                type=\"{{ showConfirmFilePassword ? 'text' : 'password' }}\"\n                id=\"confirmFilePassword\"\n                formControlName=\"confirmFilePassword\"\n                name=\"confirmFilePassword\"\n              />\n              <div class=\"input-group-append\">\n                <button\n                  bitSuffix\n                  bitButton\n                  buttonType=\"secondary\"\n                  appStopClick\n                  appA11yTitle=\"{{ 'toggleVisibility' | i18n }}\"\n                  [attr.aria-pressed]=\"showConfirmFilePassword\"\n                  (click)=\"toggleConfirmFilePassword()\"\n                  type=\"button\"\n                >\n                  <i\n                    class=\"bwi bwi-lg\"\n                    aria-hidden=\"true\"\n                    [ngClass]=\"{\n                      'bwi-eye': !showConfirmFilePassword,\n                      'bwi-eye-slash': showConfirmFilePassword\n                    }\"\n                  ></i>\n                </button>\n              </div>\n            </bit-form-field>\n          </div>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabled\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\n\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/components/export.component\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums/encryptedExportType\";\n\nimport { UserVerificationPromptComponent } from \"../../components/user-verification-prompt.component\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: ExportService,\n    eventService: EventService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    private modalService: ModalService\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","import { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\nimport { ModalRef } from \"@bitwarden/angular/components/modal/modal.ref\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n})\nexport class FilePasswordPromptComponent {\n  showFilePassword: boolean;\n  filePassword = new FormControl(\"\", Validators.required);\n\n  constructor(private modalRef: ModalRef) {}\n\n  toggleFilePassword() {\n    this.showFilePassword = !this.showFilePassword;\n  }\n\n  submit() {\n    this.filePassword.markAsTouched();\n    if (!this.filePassword.valid) {\n      return;\n    }\n\n    this.modalRef.close(this.filePassword.value);\n  }\n\n  cancel() {\n    this.modalRef.close(null);\n  }\n}\n","<div\n  class=\"modal fade\"\n  role=\"dialog\"\n  aria-modal=\"true\"\n  [attr.aria-labelledby]=\"'confirmVaultImport' | i18n\"\n>\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form #form (ngSubmit)=\"submit()\">\n      <div class=\"form-group modal-content\">\n        <h2 class=\"tw-mt-6 tw-mb-6 tw-ml-3.5 tw-font-semibold\" id=\"confirmVaultImport\">\n          {{ \"confirmVaultImport\" | i18n | uppercase }}\n        </h2>\n        <div\n          class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-pr-3.5 tw-pt-3.5 tw-pl-3.5\"\n        >\n          {{ \"confirmVaultImportDesc\" | i18n }}\n          <bit-form-field class=\"tw-w-full tw-pt-3.5\">\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              required\n              type=\"{{ showFilePassword ? 'text' : 'password' }}\"\n              name=\"filePassword\"\n              [formControl]=\"filePassword\"\n              appAutofocus\n              appInputVerbatim\n            />\n            <button\n              bitSuffix\n              bitButton\n              appStopClick\n              appA11yTitle=\"{{ 'toggleVisibility' | i18n }}\"\n              [attr.aria-pressed]=\"showFilePassword\"\n              (click)=\"toggleFilePassword()\"\n              type=\"button\"\n            >\n              <i\n                class=\"bwi bwi-lg\"\n                aria-hidden=\"true\"\n                [ngClass]=\"{ 'bwi-eye': !showFilePassword, 'bwi-eye-slash': showFilePassword }\"\n              ></i>\n            </button>\n          </bit-form-field>\n        </div>\n        <div\n          class=\"tw-flex tw-w-full tw-flex-wrap tw-items-center tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-pl-3.5 tw-pr-3.5 tw-pb-3.5 tw-pt-4 tw-pl-4 tw-pr-4\"\n        >\n          <button bitButton buttonType=\"primary\" class=\"tw-mr-2\" type=\"submit\" appBlurClick>\n            <span>{{ \"importData\" | i18n }}</span>\n          </button>\n          <button bitButton buttonType=\"secondary\" type=\"button\" (click)=\"cancel()\">\n            <span>{{ \"cancel\" | i18n }}</span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","<div class=\"page-header\">\n  <h1>{{ \"importData\" | i18n }}</h1>\n</div>\n<app-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</app-callout>\n<form #form (ngSubmit)=\"submit()\" ngNativeValidate>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"type\">1. {{ \"selectFormat\" | i18n }}</label>\n        <select\n          id=\"type\"\n          name=\"Format\"\n          [(ngModel)]=\"format\"\n          class=\"form-control\"\n          [disabled]=\"importBlockedByPolicy\"\n          required\n        >\n          <option *ngFor=\"let o of featuredImportOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          <ng-container *ngIf=\"importOptions && importOptions.length\">\n            <option value=\"-\" disabled></option>\n            <option *ngFor=\"let o of importOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          </ng-container>\n        </select>\n      </div>\n    </div>\n  </div>\n  <app-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n  </app-callout>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"file\">2. {{ \"selectImportFile\" | i18n }}</label>\n        <input\n          type=\"file\"\n          id=\"file\"\n          class=\"form-control-file\"\n          name=\"file\"\n          [disabled]=\"importBlockedByPolicy\"\n        />\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"fileContents\">{{ \"orCopyPasteFileContents\" | i18n }}</label>\n    <textarea\n      id=\"fileContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      [(ngModel)]=\"fileContents\"\n      [disabled]=\"importBlockedByPolicy\"\n    ></textarea>\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-submit\"\n    [disabled]=\"loading || importBlockedByPolicy\"\n    [ngClass]=\"{ manual: importBlockedByPolicy }\"\n  >\n    <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n    <span>{{ \"importData\" | i18n }}</span>\n  </button>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { ImportService } from \"@bitwarden/common/abstractions/import.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { ImportOption, ImportType } from \"@bitwarden/common/enums/importOptions\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\nimport { ImportError } from \"@bitwarden/common/importers/importError\";\n\nimport { FilePasswordPromptComponent } from \"./file-password-prompt.component\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileContents: string;\n  formPromise: Promise<ImportError>;\n  loading = false;\n  importBlockedByPolicy = false;\n\n  protected organizationId: string = null;\n  protected successNavigate: any[] = [\"vault\"];\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportService,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected modalService: ModalService\n  ) {}\n\n  async ngOnInit() {\n    this.setImportOptions();\n\n    this.importBlockedByPolicy = await this.policyService.policyAppliesToUser(\n      PolicyType.PersonalOwnership\n    );\n  }\n\n  async submit() {\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    this.loading = true;\n\n    const importer = this.importService.getImporter(this.format, this.organizationId);\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    if (\n      (files == null || files.length === 0) &&\n      (this.fileContents == null || this.fileContents === \"\")\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    let fileContents = this.fileContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    try {\n      this.formPromise = this.importService.import(importer, fileContents, this.organizationId);\n      let error = await this.formPromise;\n\n      if (error?.passwordRequired) {\n        const filePassword = await this.getFilePassword();\n        if (filePassword == null) {\n          this.loading = false;\n          return;\n        }\n\n        error = await this.doPasswordProtectedImport(filePassword, fileContents);\n      }\n\n      if (error != null) {\n        this.error(error);\n        this.loading = false;\n        return;\n      }\n\n      //No errors, display success message\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"importSuccess\"));\n      this.router.navigate(this.successNavigate);\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    this.loading = false;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  private async error(error: Error) {\n    await Swal.fire({\n      heightAuto: false,\n      buttonsStyling: false,\n      icon: \"error\" as SweetAlertIcon,\n      iconHtml: `<i class=\"swal-custom-icon bwi bwi-error text-danger\"></i>`,\n      input: \"textarea\",\n      inputValue: error.message,\n      inputAttributes: {\n        readonly: \"true\",\n      },\n      titleText: this.i18nService.t(\"importError\"),\n      text: this.i18nService.t(\"importErrorDesc\"),\n      showConfirmButton: true,\n      confirmButtonText: this.i18nService.t(\"ok\"),\n      onOpen: (popupEl) => {\n        popupEl.querySelector(\".swal2-textarea\").scrollTo(0, 0);\n      },\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\") {\n      return this.extract1PuxContent(file);\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extract1PuxContent(file: File): Promise<string> {\n    return new JSZip()\n      .loadAsync(file)\n      .then((zip) => {\n        return zip.file(\"export.data\").async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const ref = this.modalService.open(FilePasswordPromptComponent, {\n      allowMultipleModals: true,\n    });\n\n    if (ref == null) {\n      return null;\n    }\n\n    return await ref.onClosedPromise();\n  }\n\n  async doPasswordProtectedImport(\n    filePassword: string,\n    fileContents: string\n  ): Promise<ImportError> {\n    const passwordProtectedImporter = this.importService.getImporter(\n      \"bitwardenpasswordprotected\",\n      this.organizationId,\n      filePassword\n    );\n\n    return this.importService.import(passwordProtectedImporter, fileContents, this.organizationId);\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n: scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!(await this.organizationService.hasOrganizations())) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDescription\",\n            scopeIdentifier: (await this.organizationService.get(this.organizationId)).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingPersonalVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea')\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","import { ImportOption, ImportType } from \"../enums/importOptions\";\nimport { ImportError } from \"../importers/importError\";\nimport { Importer } from \"../importers/importer\";\n\nexport abstract class ImportService {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string\n  ) => Promise<ImportError>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    organizationId: string,\n    password?: string\n  ) => Importer;\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n] as const;\n\nexport type ImportType =\n  | typeof featuredImportOptions[number][\"id\"]\n  | typeof regularImportOptions[number][\"id\"];\n","import { CipherView } from \"../view/cipherView\";\nimport { CollectionView } from \"../view/collectionView\";\nimport { FolderView } from \"../view/folderView\";\n\nexport class ImportResult {\n  success = false;\n  missingPassword = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { LogService } from \"../abstractions/log.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { Utils } from \"../misc/utils\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { FieldView } from \"../models/view/fieldView\";\nimport { FolderView } from \"../models/view/folderView\";\nimport { LoginUriView } from \"../models/view/loginUriView\";\nimport { LoginView } from \"../models/view/loginView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\nimport { ConsoleLogService } from \"../services/consoleLog.service\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  protected getCardBrand(cardNum: string) {\n    if (this.isNullOrWhitespace(cardNum)) {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\"\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mir\n    re = new RegExp(\"^220[0-4]\");\n    if (cardNum.match(re) != null) {\n      return \"Mir\";\n    }\n\n    return null;\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (!this.isNullOrWhitespace(expiration)) {\n      expiration = expiration.replace(/\\s/g, \"\");\n      const parts = expiration.split(\"/\");\n      if (parts.length === 2) {\n        let month: string = null;\n        let year: string = null;\n        if (parts[0].length === 1 || parts[0].length === 2) {\n          month = parts[0];\n          if (month.length === 2 && month[0] === \"0\") {\n            month = month.substr(1, 1);\n          }\n        }\n        if (parts[1].length === 2 || parts[1].length === 4) {\n          year = month.length === 2 ? \"20\" + parts[1] : parts[1];\n        }\n        if (month != null && year != null) {\n          cipher.card.expMonth = month;\n          cipher.card.expYear = year;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    let folderIndex = result.folders.length;\n    const hasFolder = !this.isNullOrWhitespace(folderName);\n    let addFolder = hasFolder;\n\n    if (hasFolder) {\n      for (let i = 0; i < result.folders.length; i++) {\n        if (result.folders[i].name === folderName) {\n          addFolder = false;\n          folderIndex = i;\n          break;\n        }\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n    if (hasFolder) {\n      result.folderRelationships.push([result.ciphers.length, folderIndex]);\n    }\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherRepromptType } from \"../enums/cipherRepromptType\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { FieldView } from \"../models/view/fieldView\";\nimport { LoginView } from \"../models/view/loginView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { EncString } from \"../models/domain/encString\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CipherWithIdExport } from \"../models/export/cipherWithIdsExport\";\nimport { CollectionWithIdExport } from \"../models/export/collectionWithIdExport\";\nimport { FolderWithIdExport } from \"../models/export/folderWithIdExport\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private results: any;\n  private result: ImportResult;\n\n  constructor(protected cryptoService: CryptoService, protected i18nService: I18nService) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    this.results = JSON.parse(data);\n    if (this.results == null || this.results.items == null) {\n      if (this.results?.passwordProtected) {\n        this.result.success = false;\n        this.result.missingPassword = true;\n        this.result.errorMessage = this.i18nService.t(\"importPasswordRequired\");\n        return this.result;\n      }\n\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (this.results.encrypted) {\n      await this.parseEncrypted();\n    } else {\n      this.parseDecrypted();\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted() {\n    if (this.results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(this.results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    if (this.organization && this.results.collections != null) {\n      for (const c of this.results.collections as CollectionWithIdExport[]) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        if (collection != null) {\n          collection.id = null;\n          collection.organizationId = this.organizationId;\n          const view = await collection.decrypt();\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(view);\n        }\n      }\n    } else if (!this.organization && this.results.folders != null) {\n      for (const f of this.results.folders as FolderWithIdExport[]) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          folder.id = null;\n          const view = await folder.decrypt();\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(view);\n        }\n      }\n    }\n\n    for (const c of this.results.items as CipherWithIdExport[]) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.folderId = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt();\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private parseDecrypted() {\n    const groupingsMap = new Map<string, number>();\n    if (this.organization && this.results.collections != null) {\n      this.results.collections.forEach((c: CollectionWithIdExport) => {\n        const collection = CollectionWithIdExport.toView(c);\n        if (collection != null) {\n          collection.id = null;\n          collection.organizationId = null;\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(collection);\n        }\n      });\n    } else if (!this.organization && this.results.folders != null) {\n      this.results.folders.forEach((f: FolderWithIdExport) => {\n        const folder = FolderWithIdExport.toView(f);\n        if (folder != null) {\n          folder.id = null;\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(folder);\n        }\n      });\n    }\n\n    this.results.items.forEach((c: CipherWithIdExport) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.folderId = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { EncString } from \"../models/domain/encString\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\n\nimport { BitwardenJsonImporter } from \"./bitwardenJsonImporter\";\nimport { Importer } from \"./importer\";\n\ninterface BitwardenPasswordProtectedFileFormat {\n  encrypted: boolean;\n  passwordProtected: boolean;\n  salt: string;\n  kdfIterations: number;\n  kdfType: number;\n  encKeyValidation_DO_NOT_EDIT: string;\n  data: string;\n}\n\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(cryptoService: CryptoService, i18nService: I18nService, private password: string) {\n    super(cryptoService, i18nService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData = JSON.parse(data);\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    if (!(await this.checkPassword(parsedData))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(jdoc: BitwardenPasswordProtectedFileFormat): Promise<boolean> {\n    this.key = await this.cryptoService.makePinKey(\n      this.password,\n      jdoc.salt,\n      KdfType.PBKDF2_SHA256,\n      jdoc.kdfIterations\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/importResult\";\nimport { CardView } from \"../../models/view/cardView\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { IdentityView } from \"../../models/view/identityView\";\nimport { LoginView } from \"../../models/view/loginView\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlaneCsvTypes\";\n\nconst _mappedCredentialsColums = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentiyColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColums);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = row.code;\n        cipher.card.expMonth = row.expiration_month;\n        cipher.card.expYear = row.expiration_year.substring(2, 4);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentiyColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/importResult\";\nimport { CardView } from \"../../models/view/cardView\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { IdentityView } from \"../../models/view/identityView\";\nimport { SecureNoteView } from \"../../models/view/secureNoteView\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = this.getCardBrand(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = this.getCardBrand(fieldValue);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FolderView } from \"../models/view/folderView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item: any) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f: any) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: any[]) {\n    const urls: string[] = [];\n    fields.forEach((field: any) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: any[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field: any) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: any[]) {\n    fields.forEach((field: any) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: any[]): any[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: any[] = [];\n    const map = new Map<string, any>([]);\n    folders.forEach((obj: any) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: any) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(titlePrefix: string, tree: any[], map: Map<string, string>) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f: any) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.service);\n      cipher.notes = this.getValueOrDefault(value.notes);\n\n      if (value.style === \"website\" || value.style === \"globe\") {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(value.url);\n      } else if (value.style === \"creditcard\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.username);\n        cipher.card.number = this.getValueOrDefault(value.creditNumber);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.creditCvv);\n        if (!this.isNullOrWhitespace(value.creditExpiry)) {\n          if (!this.setCardExpiration(cipher, value.creditExpiry)) {\n            this.processKvp(cipher, \"Expiration\", value.creditExpiry);\n          }\n        }\n        if (!this.isNullOrWhitespace(value.password)) {\n          this.processKvp(cipher, \"PIN\", value.password);\n        }\n      } else {\n        continue;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export class ImportError extends Error {\n  constructor(message?: string, public passwordRequired: boolean = false) {\n    super(message);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"../enums/fieldType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { FolderView } from \"../models/view/folderView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = doc.querySelector(\"KeePassFile > Root > Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/domain/importResult\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[5]) + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          this.processKvp(cipher, value[i], value[i + 1]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FolderView } from \"../models/view/folderView\";\nimport { IdentityView } from \"../models/view/identityView\";\nimport { LoginView } from \"../models/view/loginView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = this.getCardBrand(value.ccnum);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { IdentityView } from \"../models/view/identityView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { LoginView } from \"../models/view/loginView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = this.getCardBrand(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { FieldType } from \"../../enums/fieldType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/importResult\";\nimport { CardView } from \"../../models/view/cardView\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { IdentityView } from \"../../models/view/identityView\";\nimport { PasswordHistoryView } from \"../../models/view/passwordHistoryView\";\nimport { SecureNoteView } from \"../../models/view/secureNoteView\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = this.getCardBrand(fieldValue);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { FieldType } from \"../../enums/fieldType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/importResult\";\nimport { CardView } from \"../../models/view/cardView\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { IdentityView } from \"../../models/view/identityView\";\nimport { LoginView } from \"../../models/view/loginView\";\nimport { PasswordHistoryView } from \"../../models/view/passwordHistoryView\";\nimport { SecureNoteView } from \"../../models/view/secureNoteView\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword1PuxImporterTypes\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = this.getCardBrand(fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"../../models/view/cipherView\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { FieldType } from \"../../enums/fieldType\";\nimport { ImportResult } from \"../../models/domain/importResult\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipherImportContext\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = this.getCardBrand(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { CardView } from \"../../models/view/cardView\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { IdentityView } from \"../../models/view/identityView\";\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepasswordCsvImporter\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { CardView } from \"../../models/view/cardView\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { IdentityView } from \"../../models/view/identityView\";\nimport { LoginView } from \"../../models/view/loginView\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipherImportContext\";\nimport { OnePasswordCsvImporter } from \"./onepasswordCsvImporter\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\nimport { FolderView } from \"../models/view/folderView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = this.getCardBrand(val);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FieldView } from \"../models/view/fieldView\";\nimport { FolderView } from \"../models/view/folderView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\nimport { CipherView } from \"../models/view/cipherView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\nimport { CipherView } from \"../models/view/cipherView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","import { CipherRequest } from \"./cipherRequest\";\nimport { FolderRequest } from \"./folderRequest\";\nimport { KvpRequest } from \"./kvpRequest\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CipherRequest } from \"./cipherRequest\";\nimport { CollectionRequest } from \"./collectionRequest\";\nimport { KvpRequest } from \"./kvpRequest\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CollectionService } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FolderService } from \"../abstractions/folder/folder.service.abstraction\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { ImportService as ImportServiceAbstraction } from \"../abstractions/import.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../enums/importOptions\";\nimport { AscendoCsvImporter } from \"../importers/ascendoCsvImporter\";\nimport { AvastCsvImporter } from \"../importers/avastCsvImporter\";\nimport { AvastJsonImporter } from \"../importers/avastJsonImporter\";\nimport { AviraCsvImporter } from \"../importers/aviraCsvImporter\";\nimport { BitwardenCsvImporter } from \"../importers/bitwardenCsvImporter\";\nimport { BitwardenJsonImporter } from \"../importers/bitwardenJsonImporter\";\nimport { BitwardenPasswordProtectedImporter } from \"../importers/bitwardenPasswordProtectedImporter\";\nimport { BlackBerryCsvImporter } from \"../importers/blackBerryCsvImporter\";\nimport { BlurCsvImporter } from \"../importers/blurCsvImporter\";\nimport { ButtercupCsvImporter } from \"../importers/buttercupCsvImporter\";\nimport { ChromeCsvImporter } from \"../importers/chromeCsvImporter\";\nimport { ClipperzHtmlImporter } from \"../importers/clipperzHtmlImporter\";\nimport { CodebookCsvImporter } from \"../importers/codebookCsvImporter\";\nimport { DashlaneCsvImporter } from \"../importers/dashlaneImporters/dashlaneCsvImporter\";\nimport { DashlaneJsonImporter } from \"../importers/dashlaneImporters/dashlaneJsonImporter\";\nimport { EncryptrCsvImporter } from \"../importers/encryptrCsvImporter\";\nimport { EnpassCsvImporter } from \"../importers/enpassCsvImporter\";\nimport { EnpassJsonImporter } from \"../importers/enpassJsonImporter\";\nimport { FirefoxCsvImporter } from \"../importers/firefoxCsvImporter\";\nimport { FSecureFskImporter } from \"../importers/fsecureFskImporter\";\nimport { GnomeJsonImporter } from \"../importers/gnomeJsonImporter\";\nimport { ImportError } from \"../importers/importError\";\nimport { Importer } from \"../importers/importer\";\nimport { KasperskyTxtImporter } from \"../importers/kasperskyTxtImporter\";\nimport { KeePass2XmlImporter } from \"../importers/keepass2XmlImporter\";\nimport { KeePassXCsvImporter } from \"../importers/keepassxCsvImporter\";\nimport { KeeperCsvImporter } from \"../importers/keeperImporters/keeperCsvImporter\";\nimport { LastPassCsvImporter } from \"../importers/lastpassCsvImporter\";\nimport { LogMeOnceCsvImporter } from \"../importers/logMeOnceCsvImporter\";\nimport { MeldiumCsvImporter } from \"../importers/meldiumCsvImporter\";\nimport { MSecureCsvImporter } from \"../importers/msecureCsvImporter\";\nimport { MykiCsvImporter } from \"../importers/mykiCsvImporter\";\nimport { NordPassCsvImporter } from \"../importers/nordpassCsvImporter\";\nimport { OnePassword1PifImporter } from \"../importers/onepasswordImporters/onepassword1PifImporter\";\nimport { OnePassword1PuxImporter } from \"../importers/onepasswordImporters/onepassword1PuxImporter\";\nimport { OnePasswordMacCsvImporter } from \"../importers/onepasswordImporters/onepasswordMacCsvImporter\";\nimport { OnePasswordWinCsvImporter } from \"../importers/onepasswordImporters/onepasswordWinCsvImporter\";\nimport { PadlockCsvImporter } from \"../importers/padlockCsvImporter\";\nimport { PassKeepCsvImporter } from \"../importers/passkeepCsvImporter\";\nimport { PassmanJsonImporter } from \"../importers/passmanJsonImporter\";\nimport { PasspackCsvImporter } from \"../importers/passpackCsvImporter\";\nimport { PasswordAgentCsvImporter } from \"../importers/passwordAgentCsvImporter\";\nimport { PasswordBossJsonImporter } from \"../importers/passwordBossJsonImporter\";\nimport { PasswordDragonXmlImporter } from \"../importers/passwordDragonXmlImporter\";\nimport { PasswordSafeXmlImporter } from \"../importers/passwordSafeXmlImporter\";\nimport { PasswordWalletTxtImporter } from \"../importers/passwordWalletTxtImporter\";\nimport { RememBearCsvImporter } from \"../importers/rememBearCsvImporter\";\nimport { RoboFormCsvImporter } from \"../importers/roboformCsvImporter\";\nimport { SafariCsvImporter } from \"../importers/safariCsvImporter\";\nimport { SafeInCloudXmlImporter } from \"../importers/safeInCloudXmlImporter\";\nimport { SaferPassCsvImporter } from \"../importers/saferpassCsvImport\";\nimport { SecureSafeCsvImporter } from \"../importers/secureSafeCsvImporter\";\nimport { SplashIdCsvImporter } from \"../importers/splashIdCsvImporter\";\nimport { StickyPasswordXmlImporter } from \"../importers/stickyPasswordXmlImporter\";\nimport { TrueKeyCsvImporter } from \"../importers/truekeyCsvImporter\";\nimport { UpmCsvImporter } from \"../importers/upmCsvImporter\";\nimport { YotiCsvImporter } from \"../importers/yotiCsvImporter\";\nimport { ZohoVaultCsvImporter } from \"../importers/zohoVaultCsvImporter\";\nimport { Utils } from \"../misc/utils\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CipherRequest } from \"../models/request/cipherRequest\";\nimport { CollectionRequest } from \"../models/request/collectionRequest\";\nimport { FolderRequest } from \"../models/request/folderRequest\";\nimport { ImportCiphersRequest } from \"../models/request/importCiphersRequest\";\nimport { ImportOrganizationCiphersRequest } from \"../models/request/importOrganizationCiphersRequest\";\nimport { KvpRequest } from \"../models/request/kvpRequest\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { CipherView } from \"../models/view/cipherView\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private apiService: ApiService,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null\n  ): Promise<ImportError> {\n    const importResult = await importer.parse(fileContents);\n    if (importResult.success) {\n      if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n        return new ImportError(this.i18nService.t(\"importNothingError\"));\n      } else if (importResult.ciphers.length > 0) {\n        const halfway = Math.floor(importResult.ciphers.length / 2);\n        const last = importResult.ciphers.length - 1;\n\n        if (\n          this.badData(importResult.ciphers[0]) &&\n          this.badData(importResult.ciphers[halfway]) &&\n          this.badData(importResult.ciphers[last])\n        ) {\n          return new ImportError(this.i18nService.t(\"importFormatError\"));\n        }\n      }\n      try {\n        await this.postImport(importResult, organizationId);\n      } catch (error) {\n        const errorResponse = new ErrorResponse(error, 400);\n        return this.handleServerError(errorResponse, importResult);\n      }\n      return null;\n    } else {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        return new ImportError(importResult.errorMessage, importResult.missingPassword);\n      } else {\n        return new ImportError(\n          this.i18nService.t(\"importFormatError\"),\n          importResult.missingPassword\n        );\n      }\n    }\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    organizationId: string = null,\n    password: string = null\n  ): Importer {\n    const importer = this.getImporterInstance(format, password);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(format: ImportType | \"bitwardenpasswordprotected\", password: string) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n        return new BitwardenJsonImporter(this.cryptoService, this.i18nService);\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          password\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      default:\n        return null;\n    }\n  }\n\n  private async postImport(importResult: ImportResult, organizationId: string = null) {\n    if (organizationId == null) {\n      const request = new ImportCiphersRequest();\n      for (let i = 0; i < importResult.ciphers.length; i++) {\n        const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n        request.ciphers.push(new CipherRequest(c));\n      }\n      if (importResult.folders != null) {\n        for (let i = 0; i < importResult.folders.length; i++) {\n          const f = await this.folderService.encrypt(importResult.folders[i]);\n          request.folders.push(new FolderRequest(f));\n        }\n      }\n      if (importResult.folderRelationships != null) {\n        importResult.folderRelationships.forEach((r) =>\n          request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n        );\n      }\n      return await this.apiService.postImportCiphers(request);\n    } else {\n      const request = new ImportOrganizationCiphersRequest();\n      for (let i = 0; i < importResult.ciphers.length; i++) {\n        importResult.ciphers[i].organizationId = organizationId;\n        const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n        request.ciphers.push(new CipherRequest(c));\n      }\n      if (importResult.collections != null) {\n        for (let i = 0; i < importResult.collections.length; i++) {\n          importResult.collections[i].organizationId = organizationId;\n          const c = await this.collectionService.encrypt(importResult.collections[i]);\n          request.collections.push(new CollectionRequest(c));\n        }\n      }\n      if (importResult.collectionRelationships != null) {\n        importResult.collectionRelationships.forEach((r) =>\n          request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n        );\n      }\n      return await this.apiService.postImportOrganizationCiphers(organizationId, request);\n    }\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): ImportError {\n    if (errorResponse.validationErrors == null) {\n      return new ImportError(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new ImportError(errorMessage);\n  }\n}\n"],"names":["EncryptedExportType","constructor","cryptoService","i18nService","platformUtilsService","exportService","eventService","policyService","win","logService","userVerificationService","formBuilder","fileDownloadService","onSaved","disabledByPolicy","exportForm","this","group","format","secret","filePassword","confirmFilePassword","fileEncryptionType","AccountEncrypted","formatOptions","name","value","destroy$","Subject","ngOnInit","checkExportDisabled","merge","get","valueChanges","pipe","takeUntil","startWith","subscribe","adjustValidators","ngOnDestroy","next","policyAppliesToUser","disable","encryptedFormat","doExport","formPromise","getExportData","data","downloadFile","saved","collectEvent","setValue","clearValidators","e","error","submit","showToast","t","warningDialog","verifyUser","message","showDialog","emit","FileEncrypted","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","toggleFilePassword","showFilePassword","document","getElementById","focus","toggleConfirmFilePassword","showConfirmFilePassword","reset","controls","enable","csv","fileName","download","blobData","blobOptions","type","Window","modalRef","config","confirmDescription","confirmButtonText","modalTitle","close","UserVerificationPromptComponent","ExportComponent","modalService","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","isAccountEncryptedExport","ref","open","allowMultipleModals","onClosedPromise","FilePasswordPromptComponent","markAsTouched","cancel","ImportComponent","importService","router","loading","importBlockedByPolicy","organizationId","successNavigate","setImportOptions","importer","getImporter","files","length","fileContents","content","getFileContents","import","passwordRequired","getFilePassword","doPasswordProtectedImport","navigate","getFormatInstructionTitle","results","featuredImportOptions","concat","importOptions","filter","o","id","regularImportOptions","sort","a","b","collator","compare","localeCompare","heightAuto","buttonsStyling","icon","iconHtml","input","inputValue","inputAttributes","readonly","titleText","text","showConfirmButton","onOpen","popupEl","querySelector","scrollTo","file","extract1PuxContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","target","result","textContent","onerror","loadAsync","then","zip","async","passwordProtectedImporter","title","ExportScopeCalloutComponent","organizationService","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","forEach","formEl","addEventListener","classList","add","remove","onClick","event","contains","tagName","toLowerCase","inputEl","click","ImportService","ImportResult","success","missingPassword","ciphers","folders","folderRelationships","collections","collectionRelationships","BaseImporter","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","Object","assign","splitNewLine","join","trim","errors","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","push","indexOf","substring","nameFromUrl","url","hostname","startsWith","replace","str","getValueOrDefault","defaultValue","split","getCardBrand","cardNum","re","RegExp","test","setCardExpiration","cipher","expiration","parts","month","year","substr","card","expMonth","expYear","moveFoldersToCollections","r","map","f","collection","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","processKvp","key","search","field","processFolder","folderName","folderIndex","hasFolder","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","AvastCsvImporter","web","AvastJsonImporter","JSON","logins","custName","note","pwd","loginName","label","cards","cardholderName","holderName","number","cardNumber","code","cvv","brand","expirationDate","AviraCsvImporter","website","secondary_username","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","console","delimPosition","lastIndexOf","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","items","passwordProtected","errorMessage","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","groupingsMap","Map","c","view","decrypt","set","folderId","collectionIds","passwordHistory","has","cId","BitwardenPasswordProtectedImporter","parsedData","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfIterations","kdfType","BlackBerryCsvImporter","grouping","fav","extra","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ChromeCsvImporter","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColums","Set","_mappedPersonalInfoAsIdentiyColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","keys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","obj","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","toString","EncryptrCsvImporter","Label","Notes","Text","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","sensitive","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FSecureFskImporter","service","style","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","ImportError","Error","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","Number","undefined","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","line","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Login","Database","WirelessRouter","Server","API_Credential","CreditCard","BankAccount","SecureNote","SoftwareLicense","EmailAccount","MedicalRecord","Identity","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","reduce","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","pin","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportCiphersRequest","ImportOrganizationCiphersRequest","KvpRequest","cipherService","folderService","apiService","collectionService","getImportOptions","importResult","halfway","Math","floor","last","badData","postImport","errorResponse","handleServerError","getImporterInstance","request","encrypt","postImportCiphers","postImportOrganizationCiphers","validationErrors","index","itemType"],"sourceRoot":""}