{"version":3,"file":"929.7cd8fd86e1ef3bbd487c.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/common/src/abstractions/import.service.ts","webpack://@bitwarden/web-vault/../../libs/common/src/enums/importOptions.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/domain/importResult.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/baseImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/ascendoCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/avastCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/avastJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/aviraCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/bitwardenCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/bitwardenJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/bitwardenPasswordProtectedImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/blackBerryCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/blurCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/buttercupCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/chromeCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/clipperzHtmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/codebookCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/dashlaneImporters/dashlaneCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/dashlaneImporters/dashlaneJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/encryptrCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/enpassCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/enpassJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/firefoxCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/fsecureFskImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/gnomeJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/importError.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/kasperskyTxtImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/keepass2XmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/keepassxCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/keeperImporters/keeperCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/lastpassCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/logMeOnceCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/meldiumCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/msecureCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/mykiCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/nordpassCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/types/onepassword1PuxImporterTypes.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepassword1PifImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepassword1PuxImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/cipherImportContext.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepasswordCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepasswordMacCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepasswordWinCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/padlockCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passkeepCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passmanJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passpackCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordAgentCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordBossJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordDragonXmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordSafeXmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordWalletTxtImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/rememBearCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/roboformCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/safariCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/safeInCloudXmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/saferpassCsvImport.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/secureSafeCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/splashIdCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/stickyPasswordXmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/truekeyCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/upmCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/yotiCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/zohoVaultCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/importCiphersRequest.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/importOrganizationCiphersRequest.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvpRequest.ts","webpack://@bitwarden/web-vault/../../libs/common/src/services/import.service.ts"],"sourcesContent":["import { Directive, EventEmitter, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\n\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { EventType } from \"@bitwarden/common/enums/eventType\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\n\n@Directive()\nexport class ExportComponent implements OnInit {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  disabledByPolicy = false;\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: ExportService,\n    protected eventService: EventService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService\n  ) {}\n\n  async ngOnInit() {\n    await this.checkExportDisabled();\n  }\n\n  async checkExportDisabled() {\n    this.disabledByPolicy = await this.policyService.policyAppliesToUser(\n      PolicyType.DisablePersonalVaultExport\n    );\n    if (this.disabledByPolicy) {\n      this.exportForm.disable();\n    }\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n\n    const secret = this.exportForm.get(\"secret\").value;\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.platformUtilsService.showDialog(\n        \"<p>\" +\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \"<p>\" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\",\n        true\n      );\n    } else {\n      return await this.platformUtilsService.showDialog(\n        this.i18nService.t(\"exportWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\"\n      );\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    return this.exportService.getExport(this.format);\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<form\n  #form\n  (ngSubmit)=\"submit()\"\n  ngNativeValidate\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <label for=\"format\">{{ \"fileFormat\" | i18n }}</label>\n      <select class=\"form-control\" id=\"format\" name=\"Format\" formControlName=\"format\">\n        <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n      </select>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <app-user-verification ngDefaultControl formControlName=\"secret\" name=\"secret\">\n      </app-user-verification>\n    </div>\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-submit\"\n    [disabled]=\"form.loading || exportForm.disabled\"\n  >\n    <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n    <span>{{ \"exportVault\" | i18n }}</span>\n  </button>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\n\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/components/export.component\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: ExportService,\n    eventService: EventService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService\n    );\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n}\n","<div class=\"page-header\">\n  <h1>{{ \"importData\" | i18n }}</h1>\n</div>\n<app-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</app-callout>\n<form #form (ngSubmit)=\"submit()\" ngNativeValidate>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"type\">1. {{ \"selectFormat\" | i18n }}</label>\n        <select\n          id=\"type\"\n          name=\"Format\"\n          [(ngModel)]=\"format\"\n          class=\"form-control\"\n          [disabled]=\"importBlockedByPolicy\"\n          required\n        >\n          <option *ngFor=\"let o of featuredImportOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          <ng-container *ngIf=\"importOptions && importOptions.length\">\n            <option value=\"-\" disabled></option>\n            <option *ngFor=\"let o of importOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          </ng-container>\n        </select>\n      </div>\n    </div>\n  </div>\n  <app-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n  </app-callout>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"file\">2. {{ \"selectImportFile\" | i18n }}</label>\n        <input\n          type=\"file\"\n          id=\"file\"\n          class=\"form-control-file\"\n          name=\"file\"\n          [disabled]=\"importBlockedByPolicy\"\n        />\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"fileContents\">{{ \"orCopyPasteFileContents\" | i18n }}</label>\n    <textarea\n      id=\"fileContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      [(ngModel)]=\"fileContents\"\n      [disabled]=\"importBlockedByPolicy\"\n    ></textarea>\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-submit\"\n    [disabled]=\"loading || importBlockedByPolicy\"\n    [ngClass]=\"{ manual: importBlockedByPolicy }\"\n  >\n    <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n    <span>{{ \"importData\" | i18n }}</span>\n  </button>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { ImportService } from \"@bitwarden/common/abstractions/import.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { ImportOption, ImportType } from \"@bitwarden/common/enums/importOptions\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileContents: string;\n  formPromise: Promise<Error>;\n  loading = false;\n  importBlockedByPolicy = false;\n\n  protected organizationId: string = null;\n  protected successNavigate: any[] = [\"vault\"];\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportService,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService\n  ) {}\n\n  async ngOnInit() {\n    this.setImportOptions();\n\n    this.importBlockedByPolicy = await this.policyService.policyAppliesToUser(\n      PolicyType.PersonalOwnership\n    );\n  }\n\n  async submit() {\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    this.loading = true;\n\n    const importer = this.importService.getImporter(this.format, this.organizationId);\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    if (\n      (files == null || files.length === 0) &&\n      (this.fileContents == null || this.fileContents === \"\")\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    let fileContents = this.fileContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    try {\n      this.formPromise = this.importService.import(importer, fileContents, this.organizationId);\n      const error = await this.formPromise;\n      if (error != null) {\n        this.error(error);\n        this.loading = false;\n        return;\n      }\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"importSuccess\"));\n      this.router.navigate(this.successNavigate);\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    this.loading = false;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  private async error(error: Error) {\n    await Swal.fire({\n      heightAuto: false,\n      buttonsStyling: false,\n      icon: \"error\" as SweetAlertIcon,\n      iconHtml: `<i class=\"swal-custom-icon bwi bwi-error text-danger\"></i>`,\n      input: \"textarea\",\n      inputValue: error.message,\n      inputAttributes: {\n        readonly: \"true\",\n      },\n      titleText: this.i18nService.t(\"importError\"),\n      text: this.i18nService.t(\"importErrorDesc\"),\n      showConfirmButton: true,\n      confirmButtonText: this.i18nService.t(\"ok\"),\n      onOpen: (popupEl) => {\n        popupEl.querySelector(\".swal2-textarea\").scrollTo(0, 0);\n      },\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\") {\n      return this.extract1PuxContent(file);\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extract1PuxContent(file: File): Promise<string> {\n    return new JSZip()\n      .loadAsync(file)\n      .then((zip) => {\n        return zip.file(\"export.data\").async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n: scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!(await this.organizationService.hasOrganizations())) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDescription\",\n            scopeIdentifier: (await this.organizationService.get(this.organizationId)).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingPersonalVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { ImportOption, ImportType } from \"../enums/importOptions\";\nimport { ImportError } from \"../importers/importError\";\nimport { Importer } from \"../importers/importer\";\n\nexport abstract class ImportService {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string\n  ) => Promise<ImportError>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    organizationId: string,\n    password?: string\n  ) => Importer;\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n] as const;\n\nexport type ImportType =\n  | typeof featuredImportOptions[number][\"id\"]\n  | typeof regularImportOptions[number][\"id\"];\n","import { CipherView } from \"../view/cipherView\";\nimport { CollectionView } from \"../view/collectionView\";\nimport { FolderView } from \"../view/folderView\";\n\nexport class ImportResult {\n  success = false;\n  missingPassword = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { LogService } from \"../abstractions/log.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { Utils } from \"../misc/utils\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { FieldView } from \"../models/view/fieldView\";\nimport { FolderView } from \"../models/view/folderView\";\nimport { LoginUriView } from \"../models/view/loginUriView\";\nimport { LoginView } from \"../models/view/loginView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\nimport { ConsoleLogService } from \"../services/consoleLog.service\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  protected getCardBrand(cardNum: string) {\n    if (this.isNullOrWhitespace(cardNum)) {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\"\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mir\n    re = new RegExp(\"^220[0-4]\");\n    if (cardNum.match(re) != null) {\n      return \"Mir\";\n    }\n\n    return null;\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (!this.isNullOrWhitespace(expiration)) {\n      expiration = expiration.replace(/\\s/g, \"\");\n      const parts = expiration.split(\"/\");\n      if (parts.length === 2) {\n        let month: string = null;\n        let year: string = null;\n        if (parts[0].length === 1 || parts[0].length === 2) {\n          month = parts[0];\n          if (month.length === 2 && month[0] === \"0\") {\n            month = month.substr(1, 1);\n          }\n        }\n        if (parts[1].length === 2 || parts[1].length === 4) {\n          year = month.length === 2 ? \"20\" + parts[1] : parts[1];\n        }\n        if (month != null && year != null) {\n          cipher.card.expMonth = month;\n          cipher.card.expYear = year;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    let folderIndex = result.folders.length;\n    const hasFolder = !this.isNullOrWhitespace(folderName);\n    let addFolder = hasFolder;\n\n    if (hasFolder) {\n      for (let i = 0; i < result.folders.length; i++) {\n        if (result.folders[i].name === folderName) {\n          addFolder = false;\n          folderIndex = i;\n          break;\n        }\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n    if (hasFolder) {\n      result.folderRelationships.push([result.ciphers.length, folderIndex]);\n    }\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherRepromptType } from \"../enums/cipherRepromptType\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { CollectionView } from \"../models/view/collectionView\";\nimport { FieldView } from \"../models/view/fieldView\";\nimport { LoginView } from \"../models/view/loginView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { EncString } from \"../models/domain/encString\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CipherWithIdExport } from \"../models/export/cipherWithIdsExport\";\nimport { CollectionWithIdExport } from \"../models/export/collectionWithIdExport\";\nimport { FolderWithIdExport } from \"../models/export/folderWithIdExport\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private results: any;\n  private result: ImportResult;\n\n  constructor(protected cryptoService: CryptoService, protected i18nService: I18nService) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    this.results = JSON.parse(data);\n    if (this.results == null || this.results.items == null) {\n      if (this.results?.passwordProtected) {\n        this.result.success = false;\n        this.result.missingPassword = true;\n        this.result.errorMessage = this.i18nService.t(\"importPasswordRequired\");\n        return this.result;\n      }\n\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (this.results.encrypted) {\n      await this.parseEncrypted();\n    } else {\n      this.parseDecrypted();\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted() {\n    if (this.results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(this.results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    if (this.organization && this.results.collections != null) {\n      for (const c of this.results.collections as CollectionWithIdExport[]) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        if (collection != null) {\n          collection.id = null;\n          collection.organizationId = this.organizationId;\n          const view = await collection.decrypt();\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(view);\n        }\n      }\n    } else if (!this.organization && this.results.folders != null) {\n      for (const f of this.results.folders as FolderWithIdExport[]) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          folder.id = null;\n          const view = await folder.decrypt();\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(view);\n        }\n      }\n    }\n\n    for (const c of this.results.items as CipherWithIdExport[]) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.folderId = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt();\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private parseDecrypted() {\n    const groupingsMap = new Map<string, number>();\n    if (this.organization && this.results.collections != null) {\n      this.results.collections.forEach((c: CollectionWithIdExport) => {\n        const collection = CollectionWithIdExport.toView(c);\n        if (collection != null) {\n          collection.id = null;\n          collection.organizationId = null;\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(collection);\n        }\n      });\n    } else if (!this.organization && this.results.folders != null) {\n      this.results.folders.forEach((f: FolderWithIdExport) => {\n        const folder = FolderWithIdExport.toView(f);\n        if (folder != null) {\n          folder.id = null;\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(folder);\n        }\n      });\n    }\n\n    this.results.items.forEach((c: CipherWithIdExport) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.folderId = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { EncString } from \"../models/domain/encString\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetricCryptoKey\";\n\nimport { BitwardenJsonImporter } from \"./bitwardenJsonImporter\";\nimport { Importer } from \"./importer\";\n\ninterface BitwardenPasswordProtectedFileFormat {\n  encrypted: boolean;\n  passwordProtected: boolean;\n  salt: string;\n  kdfIterations: number;\n  kdfType: number;\n  encKeyValidation_DO_NOT_EDIT: string;\n  data: string;\n}\n\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(cryptoService: CryptoService, i18nService: I18nService, private password: string) {\n    super(cryptoService, i18nService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData = JSON.parse(data);\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    if (!(await this.checkPassword(parsedData))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(jdoc: BitwardenPasswordProtectedFileFormat): Promise<boolean> {\n    this.key = await this.cryptoService.makePinKey(\n      this.password,\n      jdoc.salt,\n      KdfType.PBKDF2_SHA256,\n      jdoc.kdfIterations\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/importResult\";\nimport { CardView } from \"../../models/view/cardView\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { IdentityView } from \"../../models/view/identityView\";\nimport { LoginView } from \"../../models/view/loginView\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlaneCsvTypes\";\n\nconst _mappedCredentialsColums = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentiyColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColums);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = row.code;\n        cipher.card.expMonth = row.expiration_month;\n        cipher.card.expYear = row.expiration_year.substring(2, 4);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentiyColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/importResult\";\nimport { CardView } from \"../../models/view/cardView\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { IdentityView } from \"../../models/view/identityView\";\nimport { SecureNoteView } from \"../../models/view/secureNoteView\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = this.getCardBrand(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = this.getCardBrand(fieldValue);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FolderView } from \"../models/view/folderView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item: any) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f: any) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: any[]) {\n    const urls: string[] = [];\n    fields.forEach((field: any) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: any[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field: any) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: any[]) {\n    fields.forEach((field: any) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: any[]): any[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: any[] = [];\n    const map = new Map<string, any>([]);\n    folders.forEach((obj: any) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: any) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(titlePrefix: string, tree: any[], map: Map<string, string>) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f: any) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.service);\n      cipher.notes = this.getValueOrDefault(value.notes);\n\n      if (value.style === \"website\" || value.style === \"globe\") {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(value.url);\n      } else if (value.style === \"creditcard\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.username);\n        cipher.card.number = this.getValueOrDefault(value.creditNumber);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.creditCvv);\n        if (!this.isNullOrWhitespace(value.creditExpiry)) {\n          if (!this.setCardExpiration(cipher, value.creditExpiry)) {\n            this.processKvp(cipher, \"Expiration\", value.creditExpiry);\n          }\n        }\n        if (!this.isNullOrWhitespace(value.password)) {\n          this.processKvp(cipher, \"PIN\", value.password);\n        }\n      } else {\n        continue;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export class ImportError extends Error {\n  constructor(message?: string, public passwordRequired: boolean = false) {\n    super(message);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"../enums/fieldType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { FolderView } from \"../models/view/folderView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = doc.querySelector(\"KeePassFile > Root > Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/domain/importResult\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[5]) + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          this.processKvp(cipher, value[i], value[i + 1]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FolderView } from \"../models/view/folderView\";\nimport { IdentityView } from \"../models/view/identityView\";\nimport { LoginView } from \"../models/view/loginView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = this.getCardBrand(value.ccnum);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { IdentityView } from \"../models/view/identityView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { LoginView } from \"../models/view/loginView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = this.getCardBrand(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { FieldType } from \"../../enums/fieldType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/importResult\";\nimport { CardView } from \"../../models/view/cardView\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { IdentityView } from \"../../models/view/identityView\";\nimport { PasswordHistoryView } from \"../../models/view/passwordHistoryView\";\nimport { SecureNoteView } from \"../../models/view/secureNoteView\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = this.getCardBrand(fieldValue);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { FieldType } from \"../../enums/fieldType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/importResult\";\nimport { CardView } from \"../../models/view/cardView\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { IdentityView } from \"../../models/view/identityView\";\nimport { LoginView } from \"../../models/view/loginView\";\nimport { PasswordHistoryView } from \"../../models/view/passwordHistoryView\";\nimport { SecureNoteView } from \"../../models/view/secureNoteView\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword1PuxImporterTypes\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = this.getCardBrand(fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"../../models/view/cipherView\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { FieldType } from \"../../enums/fieldType\";\nimport { ImportResult } from \"../../models/domain/importResult\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipherImportContext\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = this.getCardBrand(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { CardView } from \"../../models/view/cardView\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { IdentityView } from \"../../models/view/identityView\";\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepasswordCsvImporter\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { CardView } from \"../../models/view/cardView\";\nimport { CipherView } from \"../../models/view/cipherView\";\nimport { IdentityView } from \"../../models/view/identityView\";\nimport { LoginView } from \"../../models/view/loginView\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipherImportContext\";\nimport { OnePasswordCsvImporter } from \"./onepasswordCsvImporter\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\nimport { CollectionView } from \"../models/view/collectionView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\nimport { FolderView } from \"../models/view/folderView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = this.getCardBrand(val);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CipherView } from \"../models/view/cipherView\";\nimport { FieldView } from \"../models/view/fieldView\";\nimport { FolderView } from \"../models/view/folderView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\nimport { CipherView } from \"../models/view/cipherView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CardView } from \"../models/view/cardView\";\nimport { SecureNoteView } from \"../models/view/secureNoteView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/importResult\";\nimport { CipherView } from \"../models/view/cipherView\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","import { CipherRequest } from \"./cipherRequest\";\nimport { FolderRequest } from \"./folderRequest\";\nimport { KvpRequest } from \"./kvpRequest\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CipherRequest } from \"./cipherRequest\";\nimport { CollectionRequest } from \"./collectionRequest\";\nimport { KvpRequest } from \"./kvpRequest\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CollectionService } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FolderService } from \"../abstractions/folder/folder.service.abstraction\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { ImportService as ImportServiceAbstraction } from \"../abstractions/import.service\";\nimport { PlatformUtilsService } from \"../abstractions/platformUtils.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../enums/importOptions\";\nimport { AscendoCsvImporter } from \"../importers/ascendoCsvImporter\";\nimport { AvastCsvImporter } from \"../importers/avastCsvImporter\";\nimport { AvastJsonImporter } from \"../importers/avastJsonImporter\";\nimport { AviraCsvImporter } from \"../importers/aviraCsvImporter\";\nimport { BitwardenCsvImporter } from \"../importers/bitwardenCsvImporter\";\nimport { BitwardenJsonImporter } from \"../importers/bitwardenJsonImporter\";\nimport { BitwardenPasswordProtectedImporter } from \"../importers/bitwardenPasswordProtectedImporter\";\nimport { BlackBerryCsvImporter } from \"../importers/blackBerryCsvImporter\";\nimport { BlurCsvImporter } from \"../importers/blurCsvImporter\";\nimport { ButtercupCsvImporter } from \"../importers/buttercupCsvImporter\";\nimport { ChromeCsvImporter } from \"../importers/chromeCsvImporter\";\nimport { ClipperzHtmlImporter } from \"../importers/clipperzHtmlImporter\";\nimport { CodebookCsvImporter } from \"../importers/codebookCsvImporter\";\nimport { DashlaneCsvImporter } from \"../importers/dashlaneImporters/dashlaneCsvImporter\";\nimport { DashlaneJsonImporter } from \"../importers/dashlaneImporters/dashlaneJsonImporter\";\nimport { EncryptrCsvImporter } from \"../importers/encryptrCsvImporter\";\nimport { EnpassCsvImporter } from \"../importers/enpassCsvImporter\";\nimport { EnpassJsonImporter } from \"../importers/enpassJsonImporter\";\nimport { FirefoxCsvImporter } from \"../importers/firefoxCsvImporter\";\nimport { FSecureFskImporter } from \"../importers/fsecureFskImporter\";\nimport { GnomeJsonImporter } from \"../importers/gnomeJsonImporter\";\nimport { ImportError } from \"../importers/importError\";\nimport { Importer } from \"../importers/importer\";\nimport { KasperskyTxtImporter } from \"../importers/kasperskyTxtImporter\";\nimport { KeePass2XmlImporter } from \"../importers/keepass2XmlImporter\";\nimport { KeePassXCsvImporter } from \"../importers/keepassxCsvImporter\";\nimport { KeeperCsvImporter } from \"../importers/keeperImporters/keeperCsvImporter\";\nimport { LastPassCsvImporter } from \"../importers/lastpassCsvImporter\";\nimport { LogMeOnceCsvImporter } from \"../importers/logMeOnceCsvImporter\";\nimport { MeldiumCsvImporter } from \"../importers/meldiumCsvImporter\";\nimport { MSecureCsvImporter } from \"../importers/msecureCsvImporter\";\nimport { MykiCsvImporter } from \"../importers/mykiCsvImporter\";\nimport { NordPassCsvImporter } from \"../importers/nordpassCsvImporter\";\nimport { OnePassword1PifImporter } from \"../importers/onepasswordImporters/onepassword1PifImporter\";\nimport { OnePassword1PuxImporter } from \"../importers/onepasswordImporters/onepassword1PuxImporter\";\nimport { OnePasswordMacCsvImporter } from \"../importers/onepasswordImporters/onepasswordMacCsvImporter\";\nimport { OnePasswordWinCsvImporter } from \"../importers/onepasswordImporters/onepasswordWinCsvImporter\";\nimport { PadlockCsvImporter } from \"../importers/padlockCsvImporter\";\nimport { PassKeepCsvImporter } from \"../importers/passkeepCsvImporter\";\nimport { PassmanJsonImporter } from \"../importers/passmanJsonImporter\";\nimport { PasspackCsvImporter } from \"../importers/passpackCsvImporter\";\nimport { PasswordAgentCsvImporter } from \"../importers/passwordAgentCsvImporter\";\nimport { PasswordBossJsonImporter } from \"../importers/passwordBossJsonImporter\";\nimport { PasswordDragonXmlImporter } from \"../importers/passwordDragonXmlImporter\";\nimport { PasswordSafeXmlImporter } from \"../importers/passwordSafeXmlImporter\";\nimport { PasswordWalletTxtImporter } from \"../importers/passwordWalletTxtImporter\";\nimport { RememBearCsvImporter } from \"../importers/rememBearCsvImporter\";\nimport { RoboFormCsvImporter } from \"../importers/roboformCsvImporter\";\nimport { SafariCsvImporter } from \"../importers/safariCsvImporter\";\nimport { SafeInCloudXmlImporter } from \"../importers/safeInCloudXmlImporter\";\nimport { SaferPassCsvImporter } from \"../importers/saferpassCsvImport\";\nimport { SecureSafeCsvImporter } from \"../importers/secureSafeCsvImporter\";\nimport { SplashIdCsvImporter } from \"../importers/splashIdCsvImporter\";\nimport { StickyPasswordXmlImporter } from \"../importers/stickyPasswordXmlImporter\";\nimport { TrueKeyCsvImporter } from \"../importers/truekeyCsvImporter\";\nimport { UpmCsvImporter } from \"../importers/upmCsvImporter\";\nimport { YotiCsvImporter } from \"../importers/yotiCsvImporter\";\nimport { ZohoVaultCsvImporter } from \"../importers/zohoVaultCsvImporter\";\nimport { Utils } from \"../misc/utils\";\nimport { ImportResult } from \"../models/domain/importResult\";\nimport { CipherRequest } from \"../models/request/cipherRequest\";\nimport { CollectionRequest } from \"../models/request/collectionRequest\";\nimport { FolderRequest } from \"../models/request/folderRequest\";\nimport { ImportCiphersRequest } from \"../models/request/importCiphersRequest\";\nimport { ImportOrganizationCiphersRequest } from \"../models/request/importOrganizationCiphersRequest\";\nimport { KvpRequest } from \"../models/request/kvpRequest\";\nimport { ErrorResponse } from \"../models/response/errorResponse\";\nimport { CipherView } from \"../models/view/cipherView\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private apiService: ApiService,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private platformUtilsService: PlatformUtilsService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null\n  ): Promise<ImportError> {\n    const importResult = await importer.parse(fileContents);\n    if (importResult.success) {\n      if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n        return new ImportError(this.i18nService.t(\"importNothingError\"));\n      } else if (importResult.ciphers.length > 0) {\n        const halfway = Math.floor(importResult.ciphers.length / 2);\n        const last = importResult.ciphers.length - 1;\n\n        if (\n          this.badData(importResult.ciphers[0]) &&\n          this.badData(importResult.ciphers[halfway]) &&\n          this.badData(importResult.ciphers[last])\n        ) {\n          return new ImportError(this.i18nService.t(\"importFormatError\"));\n        }\n      }\n      try {\n        await this.postImport(importResult, organizationId);\n      } catch (error) {\n        const errorResponse = new ErrorResponse(error, 400);\n        return this.handleServerError(errorResponse, importResult);\n      }\n      return null;\n    } else {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        return new ImportError(importResult.errorMessage, importResult.missingPassword);\n      } else {\n        return new ImportError(\n          this.i18nService.t(\"importFormatError\"),\n          importResult.missingPassword\n        );\n      }\n    }\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    organizationId: string = null,\n    password: string = null\n  ): Importer {\n    const importer = this.getImporterInstance(format, password);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(format: ImportType | \"bitwardenpasswordprotected\", password: string) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n        return new BitwardenJsonImporter(this.cryptoService, this.i18nService);\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          password\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      default:\n        return null;\n    }\n  }\n\n  private async postImport(importResult: ImportResult, organizationId: string = null) {\n    if (organizationId == null) {\n      const request = new ImportCiphersRequest();\n      for (let i = 0; i < importResult.ciphers.length; i++) {\n        const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n        request.ciphers.push(new CipherRequest(c));\n      }\n      if (importResult.folders != null) {\n        for (let i = 0; i < importResult.folders.length; i++) {\n          const f = await this.folderService.encrypt(importResult.folders[i]);\n          request.folders.push(new FolderRequest(f));\n        }\n      }\n      if (importResult.folderRelationships != null) {\n        importResult.folderRelationships.forEach((r) =>\n          request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n        );\n      }\n      return await this.apiService.postImportCiphers(request);\n    } else {\n      const request = new ImportOrganizationCiphersRequest();\n      for (let i = 0; i < importResult.ciphers.length; i++) {\n        importResult.ciphers[i].organizationId = organizationId;\n        const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n        request.ciphers.push(new CipherRequest(c));\n      }\n      if (importResult.collections != null) {\n        for (let i = 0; i < importResult.collections.length; i++) {\n          importResult.collections[i].organizationId = organizationId;\n          const c = await this.collectionService.encrypt(importResult.collections[i]);\n          request.collections.push(new CollectionRequest(c));\n        }\n      }\n      if (importResult.collectionRelationships != null) {\n        importResult.collectionRelationships.forEach((r) =>\n          request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n        );\n      }\n      return await this.apiService.postImportOrganizationCiphers(organizationId, request);\n    }\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): ImportError {\n    if (errorResponse.validationErrors == null) {\n      return new ImportError(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new ImportError(errorMessage);\n  }\n}\n"],"names":["constructor","cryptoService","i18nService","platformUtilsService","exportService","eventService","policyService","win","logService","userVerificationService","formBuilder","fileDownloadService","onSaved","disabledByPolicy","exportForm","this","group","format","secret","formatOptions","name","value","ngOnInit","checkExportDisabled","policyAppliesToUser","disable","encryptedFormat","submit","showToast","t","warningDialog","get","verifyUser","e","message","formPromise","getExportData","data","downloadFile","saved","collectEvent","setValue","error","showDialog","emit","getExport","getFileName","prefix","extension","collect","csv","fileName","download","blobData","blobOptions","type","Window","ExportComponent","super","window","ImportComponent","importService","router","loading","importBlockedByPolicy","organizationId","successNavigate","setImportOptions","importer","getImporter","files","document","getElementById","length","fileContents","content","getFileContents","import","navigate","getFormatInstructionTitle","results","featuredImportOptions","concat","importOptions","filter","o","id","regularImportOptions","sort","a","b","collator","compare","localeCompare","heightAuto","buttonsStyling","icon","iconHtml","input","inputValue","inputAttributes","readonly","titleText","text","showConfirmButton","confirmButtonText","onOpen","popupEl","querySelector","scrollTo","file","extract1PuxContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","target","result","textContent","onerror","loadAsync","then","zip","async","title","ExportScopeCalloutComponent","organizationService","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","ImportService","ImportResult","success","missingPassword","ciphers","folders","folderRelationships","collections","collectionRelationships","BaseImporter","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","Object","assign","splitNewLine","join","trim","errors","forEach","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","push","indexOf","substring","nameFromUrl","url","hostname","startsWith","replace","str","getValueOrDefault","defaultValue","split","getCardBrand","cardNum","re","RegExp","test","setCardExpiration","cipher","expiration","parts","month","year","substr","card","expMonth","expYear","moveFoldersToCollections","r","map","f","collection","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","Array","from","querySelectorAll","el","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","processKvp","key","search","field","processFolder","folderName","folderIndex","hasFolder","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","toLowerCase","AvastCsvImporter","web","AvastJsonImporter","JSON","logins","custName","note","pwd","loginName","label","cards","cardholderName","holderName","number","cardNumber","code","cvv","brand","expirationDate","AviraCsvImporter","website","secondary_username","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","console","delimPosition","lastIndexOf","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","items","passwordProtected","errorMessage","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","groupingsMap","Map","c","view","decrypt","set","folderId","collectionIds","passwordHistory","has","cId","BitwardenPasswordProtectedImporter","parsedData","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfIterations","kdfType","BlackBerryCsvImporter","grouping","fav","extra","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ChromeCsvImporter","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColums","Set","_mappedPersonalInfoAsIdentiyColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","keys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","obj","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","toString","EncryptrCsvImporter","Label","Notes","Text","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","sensitive","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FSecureFskImporter","service","style","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","ImportError","Error","passwordRequired","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","Number","undefined","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","line","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Login","Database","WirelessRouter","Server","API_Credential","CreditCard","BankAccount","SecureNote","SoftwareLicense","EmailAccount","MedicalRecord","Identity","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","reduce","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","tagName","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","pin","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportCiphersRequest","ImportOrganizationCiphersRequest","KvpRequest","cipherService","folderService","apiService","collectionService","getImportOptions","importResult","halfway","Math","floor","last","badData","postImport","errorResponse","handleServerError","getImporterInstance","request","encrypt","postImportCiphers","postImportOrganizationCiphers","validationErrors","index","itemType"],"sourceRoot":""}