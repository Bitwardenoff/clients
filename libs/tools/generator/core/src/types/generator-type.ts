import {
  CredentialAlgorithms,
  EmailAlgorithms,
  PasswordAlgorithms,
  UsernameAlgorithms,
} from "../data/generator-types";

/** A type of credential that may be generated by the credential generator. */
export type CredentialAlgorithm = (typeof CredentialAlgorithms)[number];

/** A type of password that may be generated by the credential generator. */
export type PasswordAlgorithm = (typeof PasswordAlgorithms)[number];

/** A type of username that may be generated by the credential generator. */
export type UsernameAlgorithm = (typeof UsernameAlgorithms)[number];

/** A type of email address that may be generated by the credential generator. */
export type EmailAlgorithm = (typeof EmailAlgorithms)[number];

/** Compound credential types supported by the credential generator. */
export const CredentialCategories = {
  password: PasswordAlgorithms as Readonly<PasswordAlgorithm[]>,
  username: UsernameAlgorithms as Readonly<UsernameAlgorithm[]>,
  email: EmailAlgorithms as Readonly<EmailAlgorithm[]>,
};

/** A type of compound credential that may be generated by the credential generator. */
export type CredentialCategory = keyof typeof CredentialCategories;

/** The kind of credential to generate using a compound configuration. */
// FIXME: extend the preferences to include a preferred forwarder
export type CredentialPreference = {
  [Key in keyof typeof CredentialCategories]: (typeof CredentialCategories)[Key][number];
};
